
./Debug/Orm.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fc78 	bl	200008f8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <graphic_ctrl_bit_set>:
#include <stdint.h>
#include "graphics.h"
#include "defines.h"

static void graphic_ctrl_bit_set(uint8_t x) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	0002      	movs	r2, r0
20000018:	1dfb      	adds	r3, r7, #7
2000001a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
2000001c:	4a0f      	ldr	r2, [pc, #60]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000001e:	200f      	movs	r0, #15
20000020:	183b      	adds	r3, r7, r0
20000022:	7d12      	ldrb	r2, [r2, #20]
20000024:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000026:	183b      	adds	r3, r7, r0
20000028:	183a      	adds	r2, r7, r0
2000002a:	7812      	ldrb	r2, [r2, #0]
2000002c:	2104      	movs	r1, #4
2000002e:	438a      	bics	r2, r1
20000030:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
20000032:	1dfb      	adds	r3, r7, #7
20000034:	781b      	ldrb	r3, [r3, #0]
20000036:	b25b      	sxtb	r3, r3
20000038:	2204      	movs	r2, #4
2000003a:	4393      	bics	r3, r2
2000003c:	b25a      	sxtb	r2, r3
2000003e:	183b      	adds	r3, r7, r0
20000040:	781b      	ldrb	r3, [r3, #0]
20000042:	b25b      	sxtb	r3, r3
20000044:	4313      	orrs	r3, r2
20000046:	b25a      	sxtb	r2, r3
20000048:	183b      	adds	r3, r7, r0
2000004a:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
2000004c:	4a03      	ldr	r2, [pc, #12]	; (2000005c <graphic_ctrl_bit_set+0x4c>)
2000004e:	183b      	adds	r3, r7, r0
20000050:	781b      	ldrb	r3, [r3, #0]
20000052:	7513      	strb	r3, [r2, #20]
}
20000054:	46c0      	nop			; (mov r8, r8)
20000056:	46bd      	mov	sp, r7
20000058:	b004      	add	sp, #16
2000005a:	bd80      	pop	{r7, pc}
2000005c:	40021000 	andmi	r1, r2, r0

20000060 <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
20000060:	b580      	push	{r7, lr}
20000062:	b084      	sub	sp, #16
20000064:	af00      	add	r7, sp, #0
20000066:	0002      	movs	r2, r0
20000068:	1dfb      	adds	r3, r7, #7
2000006a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
2000006c:	4a0f      	ldr	r2, [pc, #60]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000006e:	200f      	movs	r0, #15
20000070:	183b      	adds	r3, r7, r0
20000072:	7d12      	ldrb	r2, [r2, #20]
20000074:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
20000076:	183b      	adds	r3, r7, r0
20000078:	183a      	adds	r2, r7, r0
2000007a:	7812      	ldrb	r2, [r2, #0]
2000007c:	2104      	movs	r1, #4
2000007e:	438a      	bics	r2, r1
20000080:	701a      	strb	r2, [r3, #0]
	c &= ~x;
20000082:	1dfb      	adds	r3, r7, #7
20000084:	781b      	ldrb	r3, [r3, #0]
20000086:	b25b      	sxtb	r3, r3
20000088:	43db      	mvns	r3, r3
2000008a:	b25b      	sxtb	r3, r3
2000008c:	183a      	adds	r2, r7, r0
2000008e:	7812      	ldrb	r2, [r2, #0]
20000090:	b252      	sxtb	r2, r2
20000092:	4013      	ands	r3, r2
20000094:	b25a      	sxtb	r2, r3
20000096:	183b      	adds	r3, r7, r0
20000098:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
2000009a:	4a04      	ldr	r2, [pc, #16]	; (200000ac <graphic_ctrl_bit_clear+0x4c>)
2000009c:	183b      	adds	r3, r7, r0
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	7513      	strb	r3, [r2, #20]
}
200000a2:	46c0      	nop			; (mov r8, r8)
200000a4:	46bd      	mov	sp, r7
200000a6:	b004      	add	sp, #16
200000a8:	bd80      	pop	{r7, pc}
200000aa:	46c0      	nop			; (mov r8, r8)
200000ac:	40021000 	andmi	r1, r2, r0

200000b0 <select_controller>:

static void select_controller(uint8_t controller) {
200000b0:	b580      	push	{r7, lr}
200000b2:	b082      	sub	sp, #8
200000b4:	af00      	add	r7, sp, #0
200000b6:	0002      	movs	r2, r0
200000b8:	1dfb      	adds	r3, r7, #7
200000ba:	701a      	strb	r2, [r3, #0]
	switch(controller) {
200000bc:	1dfb      	adds	r3, r7, #7
200000be:	781b      	ldrb	r3, [r3, #0]
200000c0:	2b08      	cmp	r3, #8
200000c2:	d00c      	beq.n	200000de <select_controller+0x2e>
200000c4:	dc02      	bgt.n	200000cc <select_controller+0x1c>
200000c6:	2b00      	cmp	r3, #0
200000c8:	d005      	beq.n	200000d6 <select_controller+0x26>
			break;
		case B_CS1|B_CS2:
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200000ca:	e01a      	b.n	20000102 <select_controller+0x52>
	switch(controller) {
200000cc:	2b10      	cmp	r3, #16
200000ce:	d00d      	beq.n	200000ec <select_controller+0x3c>
200000d0:	2b18      	cmp	r3, #24
200000d2:	d012      	beq.n	200000fa <select_controller+0x4a>
}
200000d4:	e015      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200000d6:	2018      	movs	r0, #24
200000d8:	f7ff ffc2 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000dc:	e011      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200000de:	2008      	movs	r0, #8
200000e0:	f7ff ff96 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200000e4:	2010      	movs	r0, #16
200000e6:	f7ff ffbb 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000ea:	e00a      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200000ec:	2010      	movs	r0, #16
200000ee:	f7ff ff8f 	bl	20000010 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200000f2:	2008      	movs	r0, #8
200000f4:	f7ff ffb4 	bl	20000060 <graphic_ctrl_bit_clear>
			break;
200000f8:	e003      	b.n	20000102 <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200000fa:	2018      	movs	r0, #24
200000fc:	f7ff ff88 	bl	20000010 <graphic_ctrl_bit_set>
			break;
20000100:	46c0      	nop			; (mov r8, r8)
}
20000102:	46c0      	nop			; (mov r8, r8)
20000104:	46bd      	mov	sp, r7
20000106:	b002      	add	sp, #8
20000108:	bd80      	pop	{r7, pc}

2000010a <graphic_wait_ready>:

static void graphic_wait_ready(void) {
2000010a:	b580      	push	{r7, lr}
2000010c:	b082      	sub	sp, #8
2000010e:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000110:	2040      	movs	r0, #64	; 0x40
20000112:	f7ff ffa5 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;		// 15-8 inputs, 7-0 outputs
20000116:	4b14      	ldr	r3, [pc, #80]	; (20000168 <graphic_wait_ready+0x5e>)
20000118:	4a14      	ldr	r2, [pc, #80]	; (2000016c <graphic_wait_ready+0x62>)
2000011a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
2000011c:	2001      	movs	r0, #1
2000011e:	f7ff ff9f 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
20000122:	2002      	movs	r0, #2
20000124:	f7ff ff74 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
20000128:	f000 fb0a 	bl	20000740 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
2000012c:	2040      	movs	r0, #64	; 0x40
2000012e:	f7ff ff6f 	bl	20000010 <graphic_ctrl_bit_set>
		delay_500ns();
20000132:	f000 fb05 	bl	20000740 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
20000136:	4b0c      	ldr	r3, [pc, #48]	; (20000168 <graphic_wait_ready+0x5e>)
20000138:	7c5b      	ldrb	r3, [r3, #17]
2000013a:	b2da      	uxtb	r2, r3
2000013c:	1dfb      	adds	r3, r7, #7
2000013e:	217f      	movs	r1, #127	; 0x7f
20000140:	438a      	bics	r2, r1
20000142:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
20000144:	2040      	movs	r0, #64	; 0x40
20000146:	f7ff ff8b 	bl	20000060 <graphic_ctrl_bit_clear>
		delay_500ns();
2000014a:	f000 faf9 	bl	20000740 <delay_500ns>
		if(c == 0) break;
2000014e:	1dfb      	adds	r3, r7, #7
20000150:	781b      	ldrb	r3, [r3, #0]
20000152:	2b00      	cmp	r3, #0
20000154:	d000      	beq.n	20000158 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
20000156:	e7e9      	b.n	2000012c <graphic_wait_ready+0x22>
		if(c == 0) break;
20000158:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
2000015a:	4b03      	ldr	r3, [pc, #12]	; (20000168 <graphic_wait_ready+0x5e>)
2000015c:	4a04      	ldr	r2, [pc, #16]	; (20000170 <graphic_wait_ready+0x66>)
2000015e:	601a      	str	r2, [r3, #0]
}
20000160:	46c0      	nop			; (mov r8, r8)
20000162:	46bd      	mov	sp, r7
20000164:	b002      	add	sp, #8
20000166:	bd80      	pop	{r7, pc}
20000168:	40021000 	andmi	r1, r2, r0
2000016c:	00005555 	andeq	r5, r0, r5, asr r5
20000170:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000174 <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
20000174:	b580      	push	{r7, lr}
20000176:	b084      	sub	sp, #16
20000178:	af00      	add	r7, sp, #0
2000017a:	0002      	movs	r2, r0
2000017c:	1dfb      	adds	r3, r7, #7
2000017e:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000180:	2040      	movs	r0, #64	; 0x40
20000182:	f7ff ff6d 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;	// 15-8 inputs, 7-0 outputs
20000186:	4b1c      	ldr	r3, [pc, #112]	; (200001f8 <graphic_read+0x84>)
20000188:	4a1c      	ldr	r2, [pc, #112]	; (200001fc <graphic_read+0x88>)
2000018a:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
2000018c:	2003      	movs	r0, #3
2000018e:	f7ff ff3f 	bl	20000010 <graphic_ctrl_bit_set>
	select_controller(controller);
20000192:	1dfb      	adds	r3, r7, #7
20000194:	781b      	ldrb	r3, [r3, #0]
20000196:	0018      	movs	r0, r3
20000198:	f7ff ff8a 	bl	200000b0 <select_controller>
	delay_500ns();
2000019c:	f000 fad0 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200001a0:	2040      	movs	r0, #64	; 0x40
200001a2:	f7ff ff35 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
200001a6:	f000 facb 	bl	20000740 <delay_500ns>
	c = GPIO_E->idrHigh;
200001aa:	4a13      	ldr	r2, [pc, #76]	; (200001f8 <graphic_read+0x84>)
200001ac:	230f      	movs	r3, #15
200001ae:	18fb      	adds	r3, r7, r3
200001b0:	7c52      	ldrb	r2, [r2, #17]
200001b2:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200001b4:	2040      	movs	r0, #64	; 0x40
200001b6:	f7ff ff53 	bl	20000060 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
200001ba:	4b0f      	ldr	r3, [pc, #60]	; (200001f8 <graphic_read+0x84>)
200001bc:	4a10      	ldr	r2, [pc, #64]	; (20000200 <graphic_read+0x8c>)
200001be:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1) {
200001c0:	1dfb      	adds	r3, r7, #7
200001c2:	781b      	ldrb	r3, [r3, #0]
200001c4:	2208      	movs	r2, #8
200001c6:	4013      	ands	r3, r2
200001c8:	d004      	beq.n	200001d4 <graphic_read+0x60>
		select_controller(B_CS1);
200001ca:	2008      	movs	r0, #8
200001cc:	f7ff ff70 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200001d0:	f7ff ff9b 	bl	2000010a <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200001d4:	1dfb      	adds	r3, r7, #7
200001d6:	781b      	ldrb	r3, [r3, #0]
200001d8:	2210      	movs	r2, #16
200001da:	4013      	ands	r3, r2
200001dc:	d004      	beq.n	200001e8 <graphic_read+0x74>
		select_controller(B_CS2);
200001de:	2010      	movs	r0, #16
200001e0:	f7ff ff66 	bl	200000b0 <select_controller>
		graphic_wait_ready();
200001e4:	f7ff ff91 	bl	2000010a <graphic_wait_ready>
	}
	return c;
200001e8:	230f      	movs	r3, #15
200001ea:	18fb      	adds	r3, r7, r3
200001ec:	781b      	ldrb	r3, [r3, #0]
}
200001ee:	0018      	movs	r0, r3
200001f0:	46bd      	mov	sp, r7
200001f2:	b004      	add	sp, #16
200001f4:	bd80      	pop	{r7, pc}
200001f6:	46c0      	nop			; (mov r8, r8)
200001f8:	40021000 	andmi	r1, r2, r0
200001fc:	00005555 	andeq	r5, r0, r5, asr r5
20000200:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000204 <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
20000204:	b580      	push	{r7, lr}
20000206:	b082      	sub	sp, #8
20000208:	af00      	add	r7, sp, #0
2000020a:	0002      	movs	r2, r0
2000020c:	1dfb      	adds	r3, r7, #7
2000020e:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
20000210:	1dfb      	adds	r3, r7, #7
20000212:	781b      	ldrb	r3, [r3, #0]
20000214:	0018      	movs	r0, r3
20000216:	f7ff ffad 	bl	20000174 <graphic_read>
	return graphic_read(controller);
2000021a:	1dfb      	adds	r3, r7, #7
2000021c:	781b      	ldrb	r3, [r3, #0]
2000021e:	0018      	movs	r0, r3
20000220:	f7ff ffa8 	bl	20000174 <graphic_read>
20000224:	0003      	movs	r3, r0
}
20000226:	0018      	movs	r0, r3
20000228:	46bd      	mov	sp, r7
2000022a:	b002      	add	sp, #8
2000022c:	bd80      	pop	{r7, pc}

2000022e <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
2000022e:	b580      	push	{r7, lr}
20000230:	b082      	sub	sp, #8
20000232:	af00      	add	r7, sp, #0
20000234:	0002      	movs	r2, r0
20000236:	1dfb      	adds	r3, r7, #7
20000238:	701a      	strb	r2, [r3, #0]
2000023a:	1dbb      	adds	r3, r7, #6
2000023c:	1c0a      	adds	r2, r1, #0
2000023e:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
20000240:	4a19      	ldr	r2, [pc, #100]	; (200002a8 <graphic_write+0x7a>)
20000242:	1dfb      	adds	r3, r7, #7
20000244:	781b      	ldrb	r3, [r3, #0]
20000246:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000248:	1dbb      	adds	r3, r7, #6
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	0018      	movs	r0, r3
2000024e:	f7ff ff2f 	bl	200000b0 <select_controller>
	delay_500ns();
20000252:	f000 fa75 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000256:	2040      	movs	r0, #64	; 0x40
20000258:	f7ff feda 	bl	20000010 <graphic_ctrl_bit_set>
	delay_500ns();
2000025c:	f000 fa70 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000260:	2040      	movs	r0, #64	; 0x40
20000262:	f7ff fefd 	bl	20000060 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
20000266:	1dbb      	adds	r3, r7, #6
20000268:	781b      	ldrb	r3, [r3, #0]
2000026a:	2208      	movs	r2, #8
2000026c:	4013      	ands	r3, r2
2000026e:	d004      	beq.n	2000027a <graphic_write+0x4c>
		select_controller(B_CS1);
20000270:	2008      	movs	r0, #8
20000272:	f7ff ff1d 	bl	200000b0 <select_controller>
		graphic_wait_ready();
20000276:	f7ff ff48 	bl	2000010a <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000027a:	1dbb      	adds	r3, r7, #6
2000027c:	781b      	ldrb	r3, [r3, #0]
2000027e:	2210      	movs	r2, #16
20000280:	4013      	ands	r3, r2
20000282:	d004      	beq.n	2000028e <graphic_write+0x60>
		select_controller(B_CS2);
20000284:	2010      	movs	r0, #16
20000286:	f7ff ff13 	bl	200000b0 <select_controller>
		graphic_wait_ready();
2000028a:	f7ff ff3e 	bl	2000010a <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
2000028e:	4b06      	ldr	r3, [pc, #24]	; (200002a8 <graphic_write+0x7a>)
20000290:	2200      	movs	r2, #0
20000292:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
20000294:	2040      	movs	r0, #64	; 0x40
20000296:	f7ff febb 	bl	20000010 <graphic_ctrl_bit_set>
	select_controller(0);
2000029a:	2000      	movs	r0, #0
2000029c:	f7ff ff08 	bl	200000b0 <select_controller>
}
200002a0:	46c0      	nop			; (mov r8, r8)
200002a2:	46bd      	mov	sp, r7
200002a4:	b002      	add	sp, #8
200002a6:	bd80      	pop	{r7, pc}
200002a8:	40021000 	andmi	r1, r2, r0

200002ac <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
200002ac:	b580      	push	{r7, lr}
200002ae:	b082      	sub	sp, #8
200002b0:	af00      	add	r7, sp, #0
200002b2:	0002      	movs	r2, r0
200002b4:	1dfb      	adds	r3, r7, #7
200002b6:	701a      	strb	r2, [r3, #0]
200002b8:	1dbb      	adds	r3, r7, #6
200002ba:	1c0a      	adds	r2, r1, #0
200002bc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002be:	2040      	movs	r0, #64	; 0x40
200002c0:	f7ff fece 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
200002c4:	1dbb      	adds	r3, r7, #6
200002c6:	781b      	ldrb	r3, [r3, #0]
200002c8:	0018      	movs	r0, r3
200002ca:	f7ff fef1 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
200002ce:	2003      	movs	r0, #3
200002d0:	f7ff fec6 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200002d4:	1dbb      	adds	r3, r7, #6
200002d6:	781a      	ldrb	r2, [r3, #0]
200002d8:	1dfb      	adds	r3, r7, #7
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	0011      	movs	r1, r2
200002de:	0018      	movs	r0, r3
200002e0:	f7ff ffa5 	bl	2000022e <graphic_write>
}
200002e4:	46c0      	nop			; (mov r8, r8)
200002e6:	46bd      	mov	sp, r7
200002e8:	b002      	add	sp, #8
200002ea:	bd80      	pop	{r7, pc}

200002ec <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
200002ec:	b580      	push	{r7, lr}
200002ee:	b082      	sub	sp, #8
200002f0:	af00      	add	r7, sp, #0
200002f2:	0002      	movs	r2, r0
200002f4:	1dfb      	adds	r3, r7, #7
200002f6:	701a      	strb	r2, [r3, #0]
200002f8:	1dbb      	adds	r3, r7, #6
200002fa:	1c0a      	adds	r2, r1, #0
200002fc:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200002fe:	2040      	movs	r0, #64	; 0x40
20000300:	f7ff feae 	bl	20000060 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000304:	1dbb      	adds	r3, r7, #6
20000306:	781b      	ldrb	r3, [r3, #0]
20000308:	0018      	movs	r0, r3
2000030a:	f7ff fed1 	bl	200000b0 <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000030e:	2001      	movs	r0, #1
20000310:	f7ff fe7e 	bl	20000010 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000314:	2002      	movs	r0, #2
20000316:	f7ff fea3 	bl	20000060 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000031a:	1dbb      	adds	r3, r7, #6
2000031c:	781a      	ldrb	r2, [r3, #0]
2000031e:	1dfb      	adds	r3, r7, #7
20000320:	781b      	ldrb	r3, [r3, #0]
20000322:	0011      	movs	r1, r2
20000324:	0018      	movs	r0, r3
20000326:	f7ff ff82 	bl	2000022e <graphic_write>
}
2000032a:	46c0      	nop			; (mov r8, r8)
2000032c:	46bd      	mov	sp, r7
2000032e:	b002      	add	sp, #8
20000330:	bd80      	pop	{r7, pc}

20000332 <graphic_clear_screen>:

void graphic_clear_screen(void) {
20000332:	b580      	push	{r7, lr}
20000334:	b082      	sub	sp, #8
20000336:	af00      	add	r7, sp, #0
	uint8_t i, j;
	
	for(j = 0; j < 8; j++) {
20000338:	1dbb      	adds	r3, r7, #6
2000033a:	2200      	movs	r2, #0
2000033c:	701a      	strb	r2, [r3, #0]
2000033e:	e023      	b.n	20000388 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
20000340:	1dbb      	adds	r3, r7, #6
20000342:	781b      	ldrb	r3, [r3, #0]
20000344:	2248      	movs	r2, #72	; 0x48
20000346:	4252      	negs	r2, r2
20000348:	4313      	orrs	r3, r2
2000034a:	b2db      	uxtb	r3, r3
2000034c:	2118      	movs	r1, #24
2000034e:	0018      	movs	r0, r3
20000350:	f7ff ffac 	bl	200002ac <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
20000354:	2118      	movs	r1, #24
20000356:	2040      	movs	r0, #64	; 0x40
20000358:	f7ff ffa8 	bl	200002ac <graphic_write_command>
		for(i = 0; i <= 63; i++) {
2000035c:	1dfb      	adds	r3, r7, #7
2000035e:	2200      	movs	r2, #0
20000360:	701a      	strb	r2, [r3, #0]
20000362:	e008      	b.n	20000376 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
20000364:	2118      	movs	r1, #24
20000366:	2000      	movs	r0, #0
20000368:	f7ff ffc0 	bl	200002ec <graphic_write_data>
		for(i = 0; i <= 63; i++) {
2000036c:	1dfb      	adds	r3, r7, #7
2000036e:	781a      	ldrb	r2, [r3, #0]
20000370:	1dfb      	adds	r3, r7, #7
20000372:	3201      	adds	r2, #1
20000374:	701a      	strb	r2, [r3, #0]
20000376:	1dfb      	adds	r3, r7, #7
20000378:	781b      	ldrb	r3, [r3, #0]
2000037a:	2b3f      	cmp	r3, #63	; 0x3f
2000037c:	d9f2      	bls.n	20000364 <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
2000037e:	1dbb      	adds	r3, r7, #6
20000380:	781a      	ldrb	r2, [r3, #0]
20000382:	1dbb      	adds	r3, r7, #6
20000384:	3201      	adds	r2, #1
20000386:	701a      	strb	r2, [r3, #0]
20000388:	1dbb      	adds	r3, r7, #6
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	2b07      	cmp	r3, #7
2000038e:	d9d7      	bls.n	20000340 <graphic_clear_screen+0xe>
		}
	}
}
20000390:	46c0      	nop			; (mov r8, r8)
20000392:	46bd      	mov	sp, r7
20000394:	b002      	add	sp, #8
20000396:	bd80      	pop	{r7, pc}

20000398 <graphic_initialize>:

void graphic_initialize(void) {
20000398:	b580      	push	{r7, lr}
2000039a:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000039c:	2040      	movs	r0, #64	; 0x40
2000039e:	f7ff fe37 	bl	20000010 <graphic_ctrl_bit_set>
	delay_micro(10);
200003a2:	200a      	movs	r0, #10
200003a4:	f000 f9d5 	bl	20000752 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
200003a8:	2078      	movs	r0, #120	; 0x78
200003aa:	f7ff fe59 	bl	20000060 <graphic_ctrl_bit_clear>
	delay_milli(30);
200003ae:	201e      	movs	r0, #30
200003b0:	f000 f9e5 	bl	2000077e <delay_milli>
	graphic_ctrl_bit_set(B_RST);
200003b4:	2020      	movs	r0, #32
200003b6:	f7ff fe2b 	bl	20000010 <graphic_ctrl_bit_set>
	delay_milli(100);
200003ba:	2064      	movs	r0, #100	; 0x64
200003bc:	f000 f9df 	bl	2000077e <delay_milli>
	graphic_write_command(LCD_OFF,			B_CS1|B_CS2);
200003c0:	2118      	movs	r1, #24
200003c2:	203e      	movs	r0, #62	; 0x3e
200003c4:	f7ff ff72 	bl	200002ac <graphic_write_command>
	graphic_write_command(LCD_ON,			B_CS1|B_CS2);
200003c8:	2118      	movs	r1, #24
200003ca:	203f      	movs	r0, #63	; 0x3f
200003cc:	f7ff ff6e 	bl	200002ac <graphic_write_command>
	graphic_write_command(LCD_DISP_START,	B_CS1|B_CS2);
200003d0:	2118      	movs	r1, #24
200003d2:	20c0      	movs	r0, #192	; 0xc0
200003d4:	f7ff ff6a 	bl	200002ac <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,		B_CS1|B_CS2);
200003d8:	2118      	movs	r1, #24
200003da:	2040      	movs	r0, #64	; 0x40
200003dc:	f7ff ff66 	bl	200002ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,		B_CS1|B_CS2);
200003e0:	2118      	movs	r1, #24
200003e2:	20b8      	movs	r0, #184	; 0xb8
200003e4:	f7ff ff62 	bl	200002ac <graphic_write_command>
	select_controller(0);
200003e8:	2000      	movs	r0, #0
200003ea:	f7ff fe61 	bl	200000b0 <select_controller>
}
200003ee:	46c0      	nop			; (mov r8, r8)
200003f0:	46bd      	mov	sp, r7
200003f2:	bd80      	pop	{r7, pc}

200003f4 <pixel>:

void pixel(int x, int y, int set) {
200003f4:	b5b0      	push	{r4, r5, r7, lr}
200003f6:	b088      	sub	sp, #32
200003f8:	af00      	add	r7, sp, #0
200003fa:	60f8      	str	r0, [r7, #12]
200003fc:	60b9      	str	r1, [r7, #8]
200003fe:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000400:	68fb      	ldr	r3, [r7, #12]
20000402:	2b00      	cmp	r3, #0
20000404:	dc00      	bgt.n	20000408 <pixel+0x14>
20000406:	e08e      	b.n	20000526 <pixel+0x132>
20000408:	68bb      	ldr	r3, [r7, #8]
2000040a:	2b00      	cmp	r3, #0
2000040c:	dc00      	bgt.n	20000410 <pixel+0x1c>
2000040e:	e08a      	b.n	20000526 <pixel+0x132>
20000410:	68fb      	ldr	r3, [r7, #12]
20000412:	2b80      	cmp	r3, #128	; 0x80
20000414:	dd00      	ble.n	20000418 <pixel+0x24>
20000416:	e086      	b.n	20000526 <pixel+0x132>
20000418:	68bb      	ldr	r3, [r7, #8]
2000041a:	2b40      	cmp	r3, #64	; 0x40
2000041c:	dd00      	ble.n	20000420 <pixel+0x2c>
2000041e:	e082      	b.n	20000526 <pixel+0x132>
	
	index = (y-1)/8;
20000420:	68bb      	ldr	r3, [r7, #8]
20000422:	3b01      	subs	r3, #1
20000424:	2b00      	cmp	r3, #0
20000426:	da00      	bge.n	2000042a <pixel+0x36>
20000428:	3307      	adds	r3, #7
2000042a:	10db      	asrs	r3, r3, #3
2000042c:	61bb      	str	r3, [r7, #24]
	mask = 1 << ((y - 1) % 8);
2000042e:	68bb      	ldr	r3, [r7, #8]
20000430:	3b01      	subs	r3, #1
20000432:	4a3f      	ldr	r2, [pc, #252]	; (20000530 <pixel+0x13c>)
20000434:	4013      	ands	r3, r2
20000436:	d504      	bpl.n	20000442 <pixel+0x4e>
20000438:	3b01      	subs	r3, #1
2000043a:	2208      	movs	r2, #8
2000043c:	4252      	negs	r2, r2
2000043e:	4313      	orrs	r3, r2
20000440:	3301      	adds	r3, #1
20000442:	001a      	movs	r2, r3
20000444:	2301      	movs	r3, #1
20000446:	4093      	lsls	r3, r2
20000448:	001a      	movs	r2, r3
2000044a:	231f      	movs	r3, #31
2000044c:	18fb      	adds	r3, r7, r3
2000044e:	701a      	strb	r2, [r3, #0]
	
	if(set == 0)
20000450:	687b      	ldr	r3, [r7, #4]
20000452:	2b00      	cmp	r3, #0
20000454:	d105      	bne.n	20000462 <pixel+0x6e>
		mask = ~mask;
20000456:	221f      	movs	r2, #31
20000458:	18bb      	adds	r3, r7, r2
2000045a:	18ba      	adds	r2, r7, r2
2000045c:	7812      	ldrb	r2, [r2, #0]
2000045e:	43d2      	mvns	r2, r2
20000460:	701a      	strb	r2, [r3, #0]
		
	if(x > 64) {
20000462:	68fb      	ldr	r3, [r7, #12]
20000464:	2b40      	cmp	r3, #64	; 0x40
20000466:	dd07      	ble.n	20000478 <pixel+0x84>
		controller = B_CS2;
20000468:	231e      	movs	r3, #30
2000046a:	18fb      	adds	r3, r7, r3
2000046c:	2210      	movs	r2, #16
2000046e:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000470:	68fb      	ldr	r3, [r7, #12]
20000472:	3b41      	subs	r3, #65	; 0x41
20000474:	60fb      	str	r3, [r7, #12]
20000476:	e006      	b.n	20000486 <pixel+0x92>
	} else {
		controller = B_CS1;
20000478:	231e      	movs	r3, #30
2000047a:	18fb      	adds	r3, r7, r3
2000047c:	2208      	movs	r2, #8
2000047e:	701a      	strb	r2, [r3, #0]
		x = x - 1;
20000480:	68fb      	ldr	r3, [r7, #12]
20000482:	3b01      	subs	r3, #1
20000484:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD	| x, controller);
20000486:	68fb      	ldr	r3, [r7, #12]
20000488:	b25b      	sxtb	r3, r3
2000048a:	2240      	movs	r2, #64	; 0x40
2000048c:	4313      	orrs	r3, r2
2000048e:	b25b      	sxtb	r3, r3
20000490:	b2da      	uxtb	r2, r3
20000492:	251e      	movs	r5, #30
20000494:	197b      	adds	r3, r7, r5
20000496:	781b      	ldrb	r3, [r3, #0]
20000498:	0019      	movs	r1, r3
2000049a:	0010      	movs	r0, r2
2000049c:	f7ff ff06 	bl	200002ac <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE	| index, controller);
200004a0:	69bb      	ldr	r3, [r7, #24]
200004a2:	b25b      	sxtb	r3, r3
200004a4:	2248      	movs	r2, #72	; 0x48
200004a6:	4252      	negs	r2, r2
200004a8:	4313      	orrs	r3, r2
200004aa:	b25b      	sxtb	r3, r3
200004ac:	b2da      	uxtb	r2, r3
200004ae:	197b      	adds	r3, r7, r5
200004b0:	781b      	ldrb	r3, [r3, #0]
200004b2:	0019      	movs	r1, r3
200004b4:	0010      	movs	r0, r2
200004b6:	f7ff fef9 	bl	200002ac <graphic_write_command>
	c = graphic_read_data(controller);
200004ba:	2317      	movs	r3, #23
200004bc:	18fc      	adds	r4, r7, r3
200004be:	197b      	adds	r3, r7, r5
200004c0:	781b      	ldrb	r3, [r3, #0]
200004c2:	0018      	movs	r0, r3
200004c4:	f7ff fe9e 	bl	20000204 <graphic_read_data>
200004c8:	0003      	movs	r3, r0
200004ca:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD	| x, controller);
200004cc:	68fb      	ldr	r3, [r7, #12]
200004ce:	b25b      	sxtb	r3, r3
200004d0:	2240      	movs	r2, #64	; 0x40
200004d2:	4313      	orrs	r3, r2
200004d4:	b25b      	sxtb	r3, r3
200004d6:	b2da      	uxtb	r2, r3
200004d8:	197b      	adds	r3, r7, r5
200004da:	781b      	ldrb	r3, [r3, #0]
200004dc:	0019      	movs	r1, r3
200004de:	0010      	movs	r0, r2
200004e0:	f7ff fee4 	bl	200002ac <graphic_write_command>
	
	if(set)
200004e4:	687b      	ldr	r3, [r7, #4]
200004e6:	2b00      	cmp	r3, #0
200004e8:	d009      	beq.n	200004fe <pixel+0x10a>
		mask = mask | c;
200004ea:	221f      	movs	r2, #31
200004ec:	18bb      	adds	r3, r7, r2
200004ee:	18b9      	adds	r1, r7, r2
200004f0:	2217      	movs	r2, #23
200004f2:	18ba      	adds	r2, r7, r2
200004f4:	7809      	ldrb	r1, [r1, #0]
200004f6:	7812      	ldrb	r2, [r2, #0]
200004f8:	430a      	orrs	r2, r1
200004fa:	701a      	strb	r2, [r3, #0]
200004fc:	e008      	b.n	20000510 <pixel+0x11c>
	else
		mask = mask & c;
200004fe:	221f      	movs	r2, #31
20000500:	18bb      	adds	r3, r7, r2
20000502:	18ba      	adds	r2, r7, r2
20000504:	2117      	movs	r1, #23
20000506:	1879      	adds	r1, r7, r1
20000508:	7812      	ldrb	r2, [r2, #0]
2000050a:	7809      	ldrb	r1, [r1, #0]
2000050c:	400a      	ands	r2, r1
2000050e:	701a      	strb	r2, [r3, #0]
		
	graphic_write_data(mask, controller);
20000510:	231e      	movs	r3, #30
20000512:	18fb      	adds	r3, r7, r3
20000514:	781a      	ldrb	r2, [r3, #0]
20000516:	231f      	movs	r3, #31
20000518:	18fb      	adds	r3, r7, r3
2000051a:	781b      	ldrb	r3, [r3, #0]
2000051c:	0011      	movs	r1, r2
2000051e:	0018      	movs	r0, r3
20000520:	f7ff fee4 	bl	200002ec <graphic_write_data>
20000524:	e000      	b.n	20000528 <pixel+0x134>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000526:	46c0      	nop			; (mov r8, r8)
}
20000528:	46bd      	mov	sp, r7
2000052a:	b008      	add	sp, #32
2000052c:	bdb0      	pop	{r4, r5, r7, pc}
2000052e:	46c0      	nop			; (mov r8, r8)
20000530:	80000007 	andhi	r0, r0, r7

20000534 <set_object_speed>:
	void (*clear)(struct tObj*);
	void (*move)(struct tObj*);
	void (*set_speed)(struct tObj*, int, int);
} OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000534:	b580      	push	{r7, lr}
20000536:	b084      	sub	sp, #16
20000538:	af00      	add	r7, sp, #0
2000053a:	60f8      	str	r0, [r7, #12]
2000053c:	60b9      	str	r1, [r7, #8]
2000053e:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
20000540:	68fb      	ldr	r3, [r7, #12]
20000542:	68ba      	ldr	r2, [r7, #8]
20000544:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000546:	68fb      	ldr	r3, [r7, #12]
20000548:	687a      	ldr	r2, [r7, #4]
2000054a:	609a      	str	r2, [r3, #8]
}
2000054c:	46c0      	nop			; (mov r8, r8)
2000054e:	46bd      	mov	sp, r7
20000550:	b004      	add	sp, #16
20000552:	bd80      	pop	{r7, pc}

20000554 <draw_object>:

void draw_object(POBJECT o) {
20000554:	b580      	push	{r7, lr}
20000556:	b084      	sub	sp, #16
20000558:	af00      	add	r7, sp, #0
2000055a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
2000055c:	2300      	movs	r3, #0
2000055e:	60fb      	str	r3, [r7, #12]
20000560:	e017      	b.n	20000592 <draw_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 1);
20000562:	687b      	ldr	r3, [r7, #4]
20000564:	681a      	ldr	r2, [r3, #0]
20000566:	68fb      	ldr	r3, [r7, #12]
20000568:	3304      	adds	r3, #4
2000056a:	005b      	lsls	r3, r3, #1
2000056c:	18d3      	adds	r3, r2, r3
2000056e:	3304      	adds	r3, #4
20000570:	781b      	ldrb	r3, [r3, #0]
20000572:	0018      	movs	r0, r3
20000574:	687b      	ldr	r3, [r7, #4]
20000576:	681a      	ldr	r2, [r3, #0]
20000578:	68fb      	ldr	r3, [r7, #12]
2000057a:	3304      	adds	r3, #4
2000057c:	005b      	lsls	r3, r3, #1
2000057e:	18d3      	adds	r3, r2, r3
20000580:	3305      	adds	r3, #5
20000582:	781b      	ldrb	r3, [r3, #0]
20000584:	2201      	movs	r2, #1
20000586:	0019      	movs	r1, r3
20000588:	f7ff ff34 	bl	200003f4 <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
2000058c:	68fb      	ldr	r3, [r7, #12]
2000058e:	3301      	adds	r3, #1
20000590:	60fb      	str	r3, [r7, #12]
20000592:	687b      	ldr	r3, [r7, #4]
20000594:	681b      	ldr	r3, [r3, #0]
20000596:	681b      	ldr	r3, [r3, #0]
20000598:	68fa      	ldr	r2, [r7, #12]
2000059a:	429a      	cmp	r2, r3
2000059c:	dbe1      	blt.n	20000562 <draw_object+0xe>
	}
}
2000059e:	46c0      	nop			; (mov r8, r8)
200005a0:	46bd      	mov	sp, r7
200005a2:	b004      	add	sp, #16
200005a4:	bd80      	pop	{r7, pc}

200005a6 <clear_object>:

void clear_object(POBJECT o) {
200005a6:	b580      	push	{r7, lr}
200005a8:	b084      	sub	sp, #16
200005aa:	af00      	add	r7, sp, #0
200005ac:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
200005ae:	2300      	movs	r3, #0
200005b0:	60fb      	str	r3, [r7, #12]
200005b2:	e017      	b.n	200005e4 <clear_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 0);
200005b4:	687b      	ldr	r3, [r7, #4]
200005b6:	681a      	ldr	r2, [r3, #0]
200005b8:	68fb      	ldr	r3, [r7, #12]
200005ba:	3304      	adds	r3, #4
200005bc:	005b      	lsls	r3, r3, #1
200005be:	18d3      	adds	r3, r2, r3
200005c0:	3304      	adds	r3, #4
200005c2:	781b      	ldrb	r3, [r3, #0]
200005c4:	0018      	movs	r0, r3
200005c6:	687b      	ldr	r3, [r7, #4]
200005c8:	681a      	ldr	r2, [r3, #0]
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	3304      	adds	r3, #4
200005ce:	005b      	lsls	r3, r3, #1
200005d0:	18d3      	adds	r3, r2, r3
200005d2:	3305      	adds	r3, #5
200005d4:	781b      	ldrb	r3, [r3, #0]
200005d6:	2200      	movs	r2, #0
200005d8:	0019      	movs	r1, r3
200005da:	f7ff ff0b 	bl	200003f4 <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
200005de:	68fb      	ldr	r3, [r7, #12]
200005e0:	3301      	adds	r3, #1
200005e2:	60fb      	str	r3, [r7, #12]
200005e4:	687b      	ldr	r3, [r7, #4]
200005e6:	681b      	ldr	r3, [r3, #0]
200005e8:	681b      	ldr	r3, [r3, #0]
200005ea:	68fa      	ldr	r2, [r7, #12]
200005ec:	429a      	cmp	r2, r3
200005ee:	dbe1      	blt.n	200005b4 <clear_object+0xe>
	}
}
200005f0:	46c0      	nop			; (mov r8, r8)
200005f2:	46bd      	mov	sp, r7
200005f4:	b004      	add	sp, #16
200005f6:	bd80      	pop	{r7, pc}

200005f8 <move_object>:

void move_object(POBJECT o) {
200005f8:	b580      	push	{r7, lr}
200005fa:	b084      	sub	sp, #16
200005fc:	af00      	add	r7, sp, #0
200005fe:	6078      	str	r0, [r7, #4]
	clear_object(o);
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	0018      	movs	r0, r3
20000604:	f7ff ffcf 	bl	200005a6 <clear_object>
	
	for(int i = 0; i < o->geo->numpoints; i++) {
20000608:	2300      	movs	r3, #0
2000060a:	60fb      	str	r3, [r7, #12]
2000060c:	e02e      	b.n	2000066c <move_object+0x74>
		o->geo->px[i].x += o->dirx;
2000060e:	687b      	ldr	r3, [r7, #4]
20000610:	681a      	ldr	r2, [r3, #0]
20000612:	68fb      	ldr	r3, [r7, #12]
20000614:	3304      	adds	r3, #4
20000616:	005b      	lsls	r3, r3, #1
20000618:	18d3      	adds	r3, r2, r3
2000061a:	3304      	adds	r3, #4
2000061c:	7818      	ldrb	r0, [r3, #0]
2000061e:	687b      	ldr	r3, [r7, #4]
20000620:	685b      	ldr	r3, [r3, #4]
20000622:	b2d9      	uxtb	r1, r3
20000624:	687b      	ldr	r3, [r7, #4]
20000626:	681a      	ldr	r2, [r3, #0]
20000628:	1843      	adds	r3, r0, r1
2000062a:	b2d9      	uxtb	r1, r3
2000062c:	68fb      	ldr	r3, [r7, #12]
2000062e:	3304      	adds	r3, #4
20000630:	005b      	lsls	r3, r3, #1
20000632:	18d3      	adds	r3, r2, r3
20000634:	3304      	adds	r3, #4
20000636:	1c0a      	adds	r2, r1, #0
20000638:	701a      	strb	r2, [r3, #0]
		o->geo->px[i].y += o->diry;
2000063a:	687b      	ldr	r3, [r7, #4]
2000063c:	681a      	ldr	r2, [r3, #0]
2000063e:	68fb      	ldr	r3, [r7, #12]
20000640:	3304      	adds	r3, #4
20000642:	005b      	lsls	r3, r3, #1
20000644:	18d3      	adds	r3, r2, r3
20000646:	3305      	adds	r3, #5
20000648:	7818      	ldrb	r0, [r3, #0]
2000064a:	687b      	ldr	r3, [r7, #4]
2000064c:	689b      	ldr	r3, [r3, #8]
2000064e:	b2d9      	uxtb	r1, r3
20000650:	687b      	ldr	r3, [r7, #4]
20000652:	681a      	ldr	r2, [r3, #0]
20000654:	1843      	adds	r3, r0, r1
20000656:	b2d9      	uxtb	r1, r3
20000658:	68fb      	ldr	r3, [r7, #12]
2000065a:	3304      	adds	r3, #4
2000065c:	005b      	lsls	r3, r3, #1
2000065e:	18d3      	adds	r3, r2, r3
20000660:	3305      	adds	r3, #5
20000662:	1c0a      	adds	r2, r1, #0
20000664:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000666:	68fb      	ldr	r3, [r7, #12]
20000668:	3301      	adds	r3, #1
2000066a:	60fb      	str	r3, [r7, #12]
2000066c:	687b      	ldr	r3, [r7, #4]
2000066e:	681b      	ldr	r3, [r3, #0]
20000670:	681b      	ldr	r3, [r3, #0]
20000672:	68fa      	ldr	r2, [r7, #12]
20000674:	429a      	cmp	r2, r3
20000676:	dbca      	blt.n	2000060e <move_object+0x16>
	}
	o->posx += o->dirx;
20000678:	687b      	ldr	r3, [r7, #4]
2000067a:	68da      	ldr	r2, [r3, #12]
2000067c:	687b      	ldr	r3, [r7, #4]
2000067e:	685b      	ldr	r3, [r3, #4]
20000680:	18d2      	adds	r2, r2, r3
20000682:	687b      	ldr	r3, [r7, #4]
20000684:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000686:	687b      	ldr	r3, [r7, #4]
20000688:	691a      	ldr	r2, [r3, #16]
2000068a:	687b      	ldr	r3, [r7, #4]
2000068c:	689b      	ldr	r3, [r3, #8]
2000068e:	18d2      	adds	r2, r2, r3
20000690:	687b      	ldr	r3, [r7, #4]
20000692:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1)
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	68db      	ldr	r3, [r3, #12]
20000698:	2b00      	cmp	r3, #0
2000069a:	dc04      	bgt.n	200006a6 <move_object+0xae>
		o->dirx *= -1;
2000069c:	687b      	ldr	r3, [r7, #4]
2000069e:	685b      	ldr	r3, [r3, #4]
200006a0:	425a      	negs	r2, r3
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	605a      	str	r2, [r3, #4]
	if((o->posx + o->geo->sizex) > 128)
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	68da      	ldr	r2, [r3, #12]
200006aa:	687b      	ldr	r3, [r7, #4]
200006ac:	681b      	ldr	r3, [r3, #0]
200006ae:	685b      	ldr	r3, [r3, #4]
200006b0:	18d3      	adds	r3, r2, r3
200006b2:	2b80      	cmp	r3, #128	; 0x80
200006b4:	dd04      	ble.n	200006c0 <move_object+0xc8>
		o->dirx *= -1;
200006b6:	687b      	ldr	r3, [r7, #4]
200006b8:	685b      	ldr	r3, [r3, #4]
200006ba:	425a      	negs	r2, r3
200006bc:	687b      	ldr	r3, [r7, #4]
200006be:	605a      	str	r2, [r3, #4]
	if(o->posy < 1)
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	691b      	ldr	r3, [r3, #16]
200006c4:	2b00      	cmp	r3, #0
200006c6:	dc04      	bgt.n	200006d2 <move_object+0xda>
		o->diry *= -1;
200006c8:	687b      	ldr	r3, [r7, #4]
200006ca:	689b      	ldr	r3, [r3, #8]
200006cc:	425a      	negs	r2, r3
200006ce:	687b      	ldr	r3, [r7, #4]
200006d0:	609a      	str	r2, [r3, #8]
	if((o->posy + o->geo->sizey) > 64)
200006d2:	687b      	ldr	r3, [r7, #4]
200006d4:	691a      	ldr	r2, [r3, #16]
200006d6:	687b      	ldr	r3, [r7, #4]
200006d8:	681b      	ldr	r3, [r3, #0]
200006da:	689b      	ldr	r3, [r3, #8]
200006dc:	18d3      	adds	r3, r2, r3
200006de:	2b40      	cmp	r3, #64	; 0x40
200006e0:	dd04      	ble.n	200006ec <move_object+0xf4>
		o->diry *= -1;
200006e2:	687b      	ldr	r3, [r7, #4]
200006e4:	689b      	ldr	r3, [r3, #8]
200006e6:	425a      	negs	r2, r3
200006e8:	687b      	ldr	r3, [r7, #4]
200006ea:	609a      	str	r2, [r3, #8]
		
	draw_object(o);
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	0018      	movs	r0, r3
200006f0:	f7ff ff30 	bl	20000554 <draw_object>
}
200006f4:	46c0      	nop			; (mov r8, r8)
200006f6:	46bd      	mov	sp, r7
200006f8:	b004      	add	sp, #16
200006fa:	bd80      	pop	{r7, pc}

200006fc <delay_250ns>:

void delay_250ns(void) {
200006fc:	b580      	push	{r7, lr}
200006fe:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;				// clear SysTik
20000700:	4b0c      	ldr	r3, [pc, #48]	; (20000734 <delay_250ns+0x38>)
20000702:	2200      	movs	r2, #0
20000704:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41;				// initialize with 42 cycles
20000706:	4b0c      	ldr	r3, [pc, #48]	; (20000738 <delay_250ns+0x3c>)
20000708:	2229      	movs	r2, #41	; 0x29
2000070a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;				// clear countregister
2000070c:	4b0b      	ldr	r3, [pc, #44]	; (2000073c <delay_250ns+0x40>)
2000070e:	2200      	movs	r2, #0
20000710:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;				// reset counter
20000712:	4b08      	ldr	r3, [pc, #32]	; (20000734 <delay_250ns+0x38>)
20000714:	2205      	movs	r2, #5
20000716:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x00010000) == 0) {}	// wait until COUNTFLAG = 1
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	4b06      	ldr	r3, [pc, #24]	; (20000734 <delay_250ns+0x38>)
2000071c:	681a      	ldr	r2, [r3, #0]
2000071e:	2380      	movs	r3, #128	; 0x80
20000720:	025b      	lsls	r3, r3, #9
20000722:	4013      	ands	r3, r2
20000724:	d0f9      	beq.n	2000071a <delay_250ns+0x1e>
	*STK_CTRL = 0;				// clear SysTik
20000726:	4b03      	ldr	r3, [pc, #12]	; (20000734 <delay_250ns+0x38>)
20000728:	2200      	movs	r2, #0
2000072a:	601a      	str	r2, [r3, #0]
}
2000072c:	46c0      	nop			; (mov r8, r8)
2000072e:	46bd      	mov	sp, r7
20000730:	bd80      	pop	{r7, pc}
20000732:	46c0      	nop			; (mov r8, r8)
20000734:	e000e010 	and	lr, r0, r0, lsl r0
20000738:	e000e014 	and	lr, r0, r4, lsl r0
2000073c:	e000e018 	and	lr, r0, r8, lsl r0

20000740 <delay_500ns>:

void delay_500ns(void) {
20000740:	b580      	push	{r7, lr}
20000742:	af00      	add	r7, sp, #0
	delay_250ns();
20000744:	f7ff ffda 	bl	200006fc <delay_250ns>
	delay_250ns();
20000748:	f7ff ffd8 	bl	200006fc <delay_250ns>
}
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	bd80      	pop	{r7, pc}

20000752 <delay_micro>:

void delay_micro(unsigned int us) {
20000752:	b580      	push	{r7, lr}
20000754:	b082      	sub	sp, #8
20000756:	af00      	add	r7, sp, #0
20000758:	6078      	str	r0, [r7, #4]
	while(us--) {
2000075a:	e007      	b.n	2000076c <delay_micro+0x1a>
		delay_250ns();
2000075c:	f7ff ffce 	bl	200006fc <delay_250ns>
		delay_250ns();
20000760:	f7ff ffcc 	bl	200006fc <delay_250ns>
		delay_250ns();
20000764:	f7ff ffca 	bl	200006fc <delay_250ns>
		delay_250ns();
20000768:	f7ff ffc8 	bl	200006fc <delay_250ns>
	while(us--) {
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	1e5a      	subs	r2, r3, #1
20000770:	607a      	str	r2, [r7, #4]
20000772:	2b00      	cmp	r3, #0
20000774:	d1f2      	bne.n	2000075c <delay_micro+0xa>
	} 
}
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46bd      	mov	sp, r7
2000077a:	b002      	add	sp, #8
2000077c:	bd80      	pop	{r7, pc}

2000077e <delay_milli>:

void delay_milli(unsigned int ms) {
2000077e:	b580      	push	{r7, lr}
20000780:	b082      	sub	sp, #8
20000782:	af00      	add	r7, sp, #0
20000784:	6078      	str	r0, [r7, #4]
//	#ifdef SIMULATOR
		while( ms-- )
20000786:	e002      	b.n	2000078e <delay_milli+0x10>
			delay_micro(1);
20000788:	2001      	movs	r0, #1
2000078a:	f7ff ffe2 	bl	20000752 <delay_micro>
		while( ms-- )
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	1e5a      	subs	r2, r3, #1
20000792:	607a      	str	r2, [r7, #4]
20000794:	2b00      	cmp	r3, #0
20000796:	d1f7      	bne.n	20000788 <delay_milli+0xa>
//	#else
//		while( ms-- )
//			delay_micro(1000);
//	#endif
}
20000798:	46c0      	nop			; (mov r8, r8)
2000079a:	46bd      	mov	sp, r7
2000079c:	b002      	add	sp, #8
2000079e:	bd80      	pop	{r7, pc}

200007a0 <kbdActivate>:

void kbdActivate(unsigned int row){
200007a0:	b580      	push	{r7, lr}
200007a2:	b082      	sub	sp, #8
200007a4:	af00      	add	r7, sp, #0
200007a6:	6078      	str	r0, [r7, #4]
	switch(row){
200007a8:	687b      	ldr	r3, [r7, #4]
200007aa:	2b04      	cmp	r3, #4
200007ac:	d819      	bhi.n	200007e2 <kbdActivate+0x42>
200007ae:	687b      	ldr	r3, [r7, #4]
200007b0:	009a      	lsls	r2, r3, #2
200007b2:	4b0e      	ldr	r3, [pc, #56]	; (200007ec <kbdActivate+0x4c>)
200007b4:	18d3      	adds	r3, r2, r3
200007b6:	681b      	ldr	r3, [r3, #0]
200007b8:	469f      	mov	pc, r3
		case 1: GPIO_D->odrHigh = 0x10; break;
200007ba:	4b0d      	ldr	r3, [pc, #52]	; (200007f0 <kbdActivate+0x50>)
200007bc:	2210      	movs	r2, #16
200007be:	755a      	strb	r2, [r3, #21]
200007c0:	e00f      	b.n	200007e2 <kbdActivate+0x42>
		case 2: GPIO_D->odrHigh = 0x20; break;
200007c2:	4b0b      	ldr	r3, [pc, #44]	; (200007f0 <kbdActivate+0x50>)
200007c4:	2220      	movs	r2, #32
200007c6:	755a      	strb	r2, [r3, #21]
200007c8:	e00b      	b.n	200007e2 <kbdActivate+0x42>
		case 3: GPIO_D->odrHigh = 0x40; break;
200007ca:	4b09      	ldr	r3, [pc, #36]	; (200007f0 <kbdActivate+0x50>)
200007cc:	2240      	movs	r2, #64	; 0x40
200007ce:	755a      	strb	r2, [r3, #21]
200007d0:	e007      	b.n	200007e2 <kbdActivate+0x42>
		case 4: GPIO_D->odrHigh = 0x80; break;
200007d2:	4b07      	ldr	r3, [pc, #28]	; (200007f0 <kbdActivate+0x50>)
200007d4:	2280      	movs	r2, #128	; 0x80
200007d6:	755a      	strb	r2, [r3, #21]
200007d8:	e003      	b.n	200007e2 <kbdActivate+0x42>
		case 0: GPIO_D->odrHigh = 0x00; break;
200007da:	4b05      	ldr	r3, [pc, #20]	; (200007f0 <kbdActivate+0x50>)
200007dc:	2200      	movs	r2, #0
200007de:	755a      	strb	r2, [r3, #21]
200007e0:	46c0      	nop			; (mov r8, r8)
	}
}
200007e2:	46c0      	nop			; (mov r8, r8)
200007e4:	46bd      	mov	sp, r7
200007e6:	b002      	add	sp, #8
200007e8:	bd80      	pop	{r7, pc}
200007ea:	46c0      	nop			; (mov r8, r8)
200007ec:	200009dc 	ldrdcs	r0, [r0], -ip
200007f0:	40020c00 	andmi	r0, r2, r0, lsl #24

200007f4 <kbdGetCol>:

int kbdGetCol(void){
200007f4:	b580      	push	{r7, lr}
200007f6:	b082      	sub	sp, #8
200007f8:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D->idrHigh;
200007fa:	4a12      	ldr	r2, [pc, #72]	; (20000844 <kbdGetCol+0x50>)
200007fc:	1dfb      	adds	r3, r7, #7
200007fe:	7c52      	ldrb	r2, [r2, #17]
20000800:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
20000802:	1dfb      	adds	r3, r7, #7
20000804:	781b      	ldrb	r3, [r3, #0]
20000806:	2208      	movs	r2, #8
20000808:	4013      	ands	r3, r2
2000080a:	d001      	beq.n	20000810 <kbdGetCol+0x1c>
2000080c:	2304      	movs	r3, #4
2000080e:	e015      	b.n	2000083c <kbdGetCol+0x48>
	if(c & 0x4) return 3;
20000810:	1dfb      	adds	r3, r7, #7
20000812:	781b      	ldrb	r3, [r3, #0]
20000814:	2204      	movs	r2, #4
20000816:	4013      	ands	r3, r2
20000818:	d001      	beq.n	2000081e <kbdGetCol+0x2a>
2000081a:	2303      	movs	r3, #3
2000081c:	e00e      	b.n	2000083c <kbdGetCol+0x48>
	if(c & 0x2) return 2;
2000081e:	1dfb      	adds	r3, r7, #7
20000820:	781b      	ldrb	r3, [r3, #0]
20000822:	2202      	movs	r2, #2
20000824:	4013      	ands	r3, r2
20000826:	d001      	beq.n	2000082c <kbdGetCol+0x38>
20000828:	2302      	movs	r3, #2
2000082a:	e007      	b.n	2000083c <kbdGetCol+0x48>
	if(c & 0x1) return 1;
2000082c:	1dfb      	adds	r3, r7, #7
2000082e:	781b      	ldrb	r3, [r3, #0]
20000830:	2201      	movs	r2, #1
20000832:	4013      	ands	r3, r2
20000834:	d001      	beq.n	2000083a <kbdGetCol+0x46>
20000836:	2301      	movs	r3, #1
20000838:	e000      	b.n	2000083c <kbdGetCol+0x48>
	return 0;
2000083a:	2300      	movs	r3, #0
}
2000083c:	0018      	movs	r0, r3
2000083e:	46bd      	mov	sp, r7
20000840:	b002      	add	sp, #8
20000842:	bd80      	pop	{r7, pc}
20000844:	40020c00 	andmi	r0, r2, r0, lsl #24

20000848 <keyb>:

unsigned char keyb(void){
20000848:	b590      	push	{r4, r7, lr}
2000084a:	b087      	sub	sp, #28
2000084c:	af00      	add	r7, sp, #0
	unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
2000084e:	003b      	movs	r3, r7
20000850:	4a16      	ldr	r2, [pc, #88]	; (200008ac <keyb+0x64>)
20000852:	ca13      	ldmia	r2!, {r0, r1, r4}
20000854:	c313      	stmia	r3!, {r0, r1, r4}
20000856:	6812      	ldr	r2, [r2, #0]
20000858:	601a      	str	r2, [r3, #0]
	int row, col;
	for(row = 1; row <= 4; row++){
2000085a:	2301      	movs	r3, #1
2000085c:	617b      	str	r3, [r7, #20]
2000085e:	e019      	b.n	20000894 <keyb+0x4c>
		kbdActivate(row);
20000860:	697b      	ldr	r3, [r7, #20]
20000862:	0018      	movs	r0, r3
20000864:	f7ff ff9c 	bl	200007a0 <kbdActivate>
		if(col = kbdGetCol()){
20000868:	f7ff ffc4 	bl	200007f4 <kbdGetCol>
2000086c:	0003      	movs	r3, r0
2000086e:	613b      	str	r3, [r7, #16]
20000870:	693b      	ldr	r3, [r7, #16]
20000872:	2b00      	cmp	r3, #0
20000874:	d00b      	beq.n	2000088e <keyb+0x46>
			kbdActivate(0);
20000876:	2000      	movs	r0, #0
20000878:	f7ff ff92 	bl	200007a0 <kbdActivate>
			return key [4*(row-1)+(col-1)];
2000087c:	697b      	ldr	r3, [r7, #20]
2000087e:	3b01      	subs	r3, #1
20000880:	009a      	lsls	r2, r3, #2
20000882:	693b      	ldr	r3, [r7, #16]
20000884:	3b01      	subs	r3, #1
20000886:	18d3      	adds	r3, r2, r3
20000888:	003a      	movs	r2, r7
2000088a:	5cd3      	ldrb	r3, [r2, r3]
2000088c:	e009      	b.n	200008a2 <keyb+0x5a>
	for(row = 1; row <= 4; row++){
2000088e:	697b      	ldr	r3, [r7, #20]
20000890:	3301      	adds	r3, #1
20000892:	617b      	str	r3, [r7, #20]
20000894:	697b      	ldr	r3, [r7, #20]
20000896:	2b04      	cmp	r3, #4
20000898:	dde2      	ble.n	20000860 <keyb+0x18>
		}
	}
	kbdActivate(0);
2000089a:	2000      	movs	r0, #0
2000089c:	f7ff ff80 	bl	200007a0 <kbdActivate>
	return 0xFF;
200008a0:	23ff      	movs	r3, #255	; 0xff
}
200008a2:	0018      	movs	r0, r3
200008a4:	46bd      	mov	sp, r7
200008a6:	b007      	add	sp, #28
200008a8:	bd90      	pop	{r4, r7, pc}
200008aa:	46c0      	nop			; (mov r8, r8)
200008ac:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

200008b0 <init_app>:

void init_app(void) {
200008b0:	b580      	push	{r7, lr}
200008b2:	af00      	add	r7, sp, #0
	// Display init
	GPIO_E->moder = 0x55555555;
200008b4:	4b0b      	ldr	r3, [pc, #44]	; (200008e4 <init_app+0x34>)
200008b6:	4a0c      	ldr	r2, [pc, #48]	; (200008e8 <init_app+0x38>)
200008b8:	601a      	str	r2, [r3, #0]
	
	// Keypad init
	GPIO_D->moder = 0x55005555;
200008ba:	4b0c      	ldr	r3, [pc, #48]	; (200008ec <init_app+0x3c>)
200008bc:	4a0c      	ldr	r2, [pc, #48]	; (200008f0 <init_app+0x40>)
200008be:	601a      	str	r2, [r3, #0]
	GPIO_D->otyper &= 0x0FFF;
200008c0:	4b0a      	ldr	r3, [pc, #40]	; (200008ec <init_app+0x3c>)
200008c2:	889b      	ldrh	r3, [r3, #4]
200008c4:	b29b      	uxth	r3, r3
200008c6:	4a09      	ldr	r2, [pc, #36]	; (200008ec <init_app+0x3c>)
200008c8:	051b      	lsls	r3, r3, #20
200008ca:	0d1b      	lsrs	r3, r3, #20
200008cc:	b29b      	uxth	r3, r3
200008ce:	8093      	strh	r3, [r2, #4]
	GPIO_D->pupdr |= 0xAAAAAAAA;
200008d0:	4b06      	ldr	r3, [pc, #24]	; (200008ec <init_app+0x3c>)
200008d2:	68da      	ldr	r2, [r3, #12]
200008d4:	4b05      	ldr	r3, [pc, #20]	; (200008ec <init_app+0x3c>)
200008d6:	4907      	ldr	r1, [pc, #28]	; (200008f4 <init_app+0x44>)
200008d8:	430a      	orrs	r2, r1
200008da:	60da      	str	r2, [r3, #12]
}
200008dc:	46c0      	nop			; (mov r8, r8)
200008de:	46bd      	mov	sp, r7
200008e0:	bd80      	pop	{r7, pc}
200008e2:	46c0      	nop			; (mov r8, r8)
200008e4:	40021000 	andmi	r1, r2, r0
200008e8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
200008ec:	40020c00 	andmi	r0, r2, r0, lsl #24
200008f0:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
200008f4:	aaaaaaaa 	bge	1eaab3a4 <startup-0x1554c5c>

200008f8 <main>:
	clear_object,
	move_object,
	set_object_speed
};

void main(void) {	
200008f8:	b580      	push	{r7, lr}
200008fa:	b082      	sub	sp, #8
200008fc:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200008fe:	4b20      	ldr	r3, [pc, #128]	; (20000980 <main+0x88>)
20000900:	607b      	str	r3, [r7, #4]
	init_app();
20000902:	f7ff ffd5 	bl	200008b0 <init_app>
	graphic_initialize();
20000906:	f7ff fd47 	bl	20000398 <graphic_initialize>
#ifndef SIMULATOR
	//graphic_clear_screen();
#endif
	int speed = 10;
2000090a:	230a      	movs	r3, #10
2000090c:	603b      	str	r3, [r7, #0]
	p->set_speed(p, 4, 1);
2000090e:	687b      	ldr	r3, [r7, #4]
20000910:	6a1b      	ldr	r3, [r3, #32]
20000912:	6878      	ldr	r0, [r7, #4]
20000914:	2201      	movs	r2, #1
20000916:	2104      	movs	r1, #4
20000918:	4798      	blx	r3
	while(1) {
		p->move(p);
2000091a:	687b      	ldr	r3, [r7, #4]
2000091c:	69db      	ldr	r3, [r3, #28]
2000091e:	687a      	ldr	r2, [r7, #4]
20000920:	0010      	movs	r0, r2
20000922:	4798      	blx	r3
		//delay_milli(40);
		
		switch (keyb()) {
20000924:	f7ff ff90 	bl	20000848 <keyb>
20000928:	0003      	movs	r3, r0
2000092a:	2b04      	cmp	r3, #4
2000092c:	d010      	beq.n	20000950 <main+0x58>
2000092e:	dc02      	bgt.n	20000936 <main+0x3e>
20000930:	2b02      	cmp	r3, #2
20000932:	d005      	beq.n	20000940 <main+0x48>
20000934:	e022      	b.n	2000097c <main+0x84>
20000936:	2b06      	cmp	r3, #6
20000938:	d012      	beq.n	20000960 <main+0x68>
2000093a:	2b08      	cmp	r3, #8
2000093c:	d017      	beq.n	2000096e <main+0x76>
2000093e:	e01d      	b.n	2000097c <main+0x84>
			case 2: p->set_speed(p, 0, -speed); break;
20000940:	687b      	ldr	r3, [r7, #4]
20000942:	6a1b      	ldr	r3, [r3, #32]
20000944:	683a      	ldr	r2, [r7, #0]
20000946:	4252      	negs	r2, r2
20000948:	6878      	ldr	r0, [r7, #4]
2000094a:	2100      	movs	r1, #0
2000094c:	4798      	blx	r3
2000094e:	e015      	b.n	2000097c <main+0x84>
			case 4: p->set_speed(p, -speed, 0); break;
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	6a1b      	ldr	r3, [r3, #32]
20000954:	683a      	ldr	r2, [r7, #0]
20000956:	4251      	negs	r1, r2
20000958:	6878      	ldr	r0, [r7, #4]
2000095a:	2200      	movs	r2, #0
2000095c:	4798      	blx	r3
2000095e:	e00d      	b.n	2000097c <main+0x84>
			case 6: p->set_speed(p, speed, 0); break;
20000960:	687b      	ldr	r3, [r7, #4]
20000962:	6a1b      	ldr	r3, [r3, #32]
20000964:	6839      	ldr	r1, [r7, #0]
20000966:	6878      	ldr	r0, [r7, #4]
20000968:	2200      	movs	r2, #0
2000096a:	4798      	blx	r3
2000096c:	e006      	b.n	2000097c <main+0x84>
			case 8: p->set_speed(p, 0, speed); break;
2000096e:	687b      	ldr	r3, [r7, #4]
20000970:	6a1b      	ldr	r3, [r3, #32]
20000972:	683a      	ldr	r2, [r7, #0]
20000974:	6878      	ldr	r0, [r7, #4]
20000976:	2100      	movs	r1, #0
20000978:	4798      	blx	r3
2000097a:	46c0      	nop			; (mov r8, r8)
		p->move(p);
2000097c:	e7cd      	b.n	2000091a <main+0x22>
2000097e:	46c0      	nop			; (mov r8, r8)
20000980:	200009b8 			; <UNDEFINED> instruction: 0x200009b8

20000984 <ball_geometry>:
20000984:	0000000c 	andeq	r0, r0, ip
20000988:	00000004 	andeq	r0, r0, r4
2000098c:	00000004 	andeq	r0, r0, r4
20000990:	02000100 	andeq	r0, r0, #0, 2
20000994:	01010001 	tsteq	r1, r1
20000998:	03010201 	movweq	r0, #4609	; 0x1201
2000099c:	01020002 	tsteq	r2, r2
200009a0:	03020202 	movweq	r0, #8706	; 0x2202
200009a4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200009b8 <ball>:
200009b8:	20000984 	andcs	r0, r0, r4, lsl #19
	...
200009c4:	00000001 	andeq	r0, r0, r1
200009c8:	00000001 	andeq	r0, r0, r1
200009cc:	20000555 	andcs	r0, r0, r5, asr r5
200009d0:	200005a7 	andcs	r0, r0, r7, lsr #11
200009d4:	200005f9 	strdcs	r0, [r0], -r9
200009d8:	20000535 	andcs	r0, r0, r5, lsr r5
200009dc:	200007da 	ldrdcs	r0, [r0], -sl
200009e0:	200007ba 			; <UNDEFINED> instruction: 0x200007ba
200009e4:	200007c2 	andcs	r0, r0, r2, asr #15
200009e8:	200007ca 	andcs	r0, r0, sl, asr #15
200009ec:	200007d2 	ldrdcs	r0, [r0], -r2
200009f0:	0a030201 	beq	200c11fc <ball+0xc0844>
200009f4:	0b060504 	bleq	20181e0c <ball+0x181454>
200009f8:	0c090807 	stceq	8, cr0, [r9], {7}
200009fc:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200009cc <ball+0x14>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000003a1 	andeq	r0, r0, r1, lsr #7
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000012d 	andeq	r0, r0, sp, lsr #2
  10:	00022f0c 	andeq	r2, r2, ip, lsl #30
  14:	00008800 	andeq	r8, r0, r0, lsl #16
  18:	00001000 	andeq	r1, r0, r0
  1c:	00052420 	andeq	r2, r5, r0, lsr #8
  20:	00000000 	andeq	r0, r0, r0
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	0000010a 	andeq	r0, r0, sl, lsl #2
  2c:	0000df03 	andeq	sp, r0, r3, lsl #30
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	01080801 	tsteq	r8, r1, lsl #16
  3c:	02020000 	andeq	r0, r2, #0
  40:	00001f05 	andeq	r1, r0, r5, lsl #30
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	000001f6 	strdeq	r0, [r0], -r6
  4c:	3a050402 	bcc	14105c <startup-0x1febefa4>
  50:	02000000 	andeq	r0, r0, #0
  54:	01d80704 	bicseq	r0, r8, r4, lsl #14
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	00003505 	andeq	r3, r0, r5, lsl #10
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	000001d3 	ldrdeq	r0, [r0], -r3
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	01dd0704 	bicseq	r0, sp, r4, lsl #14
  74:	e1030000 	mrs	r0, (UNDEF: 3)
  78:	03000000 	movweq	r0, #0
  7c:	00002c18 	andeq	r2, r0, r8, lsl ip
  80:	04180500 	ldreq	r0, [r8], #-1280	; 0xfffffb00
  84:	00010e08 	andeq	r0, r1, r8, lsl #28
  88:	02b70600 	adcseq	r0, r7, #0, 12
  8c:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
  90:	0000006f 	andeq	r0, r0, pc, rrx
  94:	00740600 	rsbseq	r0, r4, r0, lsl #12
  98:	0a040000 	beq	1000a0 <startup-0x1fefff60>
  9c:	00000045 	andeq	r0, r0, r5, asr #32
  a0:	00ba0604 	adcseq	r0, sl, r4, lsl #12
  a4:	0b040000 	bleq	1000ac <startup-0x1fefff54>
  a8:	00000045 	andeq	r0, r0, r5, asr #32
  ac:	00c50606 	sbceq	r0, r5, r6, lsl #12
  b0:	0c040000 	stceq	0, cr0, [r4], {-0}
  b4:	0000006f 	andeq	r0, r0, pc, rrx
  b8:	029e0608 	addseq	r0, lr, #8, 12	; 0x800000
  bc:	0d040000 	stceq	0, cr0, [r4, #-0]
  c0:	0000006f 	andeq	r0, r0, pc, rrx
  c4:	0000060c 	andeq	r0, r0, ip, lsl #12
  c8:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
  cc:	00000037 	andeq	r0, r0, r7, lsr r0
  d0:	026c0610 	rsbeq	r0, ip, #16, 12	; 0x1000000
  d4:	0f040000 	svceq	0x00040000
  d8:	00000037 	andeq	r0, r0, r7, lsr r0
  dc:	020e0611 	andeq	r0, lr, #17825792	; 0x1100000
  e0:	10040000 	andne	r0, r4, r0
  e4:	00000045 	andeq	r0, r0, r5, asr #32
  e8:	02c50612 	sbceq	r0, r5, #18874368	; 0x1200000
  ec:	11040000 	mrsne	r0, (UNDEF: 4)
  f0:	00000037 	andeq	r0, r0, r7, lsr r0
  f4:	02bd0614 	adcseq	r0, sp, #20, 12	; 0x1400000
  f8:	12040000 	andne	r0, r4, #0
  fc:	00000037 	andeq	r0, r0, r7, lsr r0
 100:	000d0615 	andeq	r0, sp, r5, lsl r6
 104:	13040000 	movwne	r0, #16384	; 0x4000
 108:	00000045 	andeq	r0, r0, r5, asr #32
 10c:	09030016 	stmdbeq	r3, {r1, r2, r4}
 110:	04000002 	streq	r0, [r0], #-2
 114:	00008114 	andeq	r8, r0, r4, lsl r1
 118:	00070700 	andeq	r0, r7, r0, lsl #14
 11c:	97010000 	strls	r0, [r1, -r0]
 120:	200003f4 	strdcs	r0, [r0], -r4
 124:	00000140 	andeq	r0, r0, r0, asr #2
 128:	018b9c01 	orreq	r9, fp, r1, lsl #24
 12c:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 130:	68970100 	ldmvs	r7, {r8}
 134:	02000000 	andeq	r0, r0, #0
 138:	79085c91 	stmdbvc	r8, {r0, r4, r7, sl, fp, ip, lr}
 13c:	68970100 	ldmvs	r7, {r8}
 140:	02000000 	andeq	r0, r0, #0
 144:	73085891 	movwvc	r5, #34961	; 0x8891
 148:	01007465 	tsteq	r0, r5, ror #8
 14c:	00006897 	muleq	r0, r7, r8
 150:	54910200 	ldrpl	r0, [r1], #512	; 0x200
 154:	00028709 	andeq	r8, r2, r9, lsl #14
 158:	76980100 	ldrvc	r0, [r8], r0, lsl #2
 15c:	02000000 	andeq	r0, r0, #0
 160:	630a6f91 	movwvs	r6, #44945	; 0xaf91
 164:	76980100 	ldrvc	r0, [r8], r0, lsl #2
 168:	02000000 	andeq	r0, r0, #0
 16c:	93096791 	movwls	r6, #38801	; 0x9791
 170:	01000002 	tsteq	r0, r2
 174:	00007698 	muleq	r0, r8, r6
 178:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 17c:	00001909 	andeq	r1, r0, r9, lsl #18
 180:	68990100 	ldmvs	r9, {r8}
 184:	02000000 	andeq	r0, r0, #0
 188:	07006891 			; <UNDEFINED> instruction: 0x07006891
 18c:	000002a4 	andeq	r0, r0, r4, lsr #5
 190:	03988801 	orrseq	r8, r8, #65536	; 0x10000
 194:	005c2000 	subseq	r2, ip, r0
 198:	9c010000 	stcls	0, cr0, [r1], {-0}
 19c:	000001bf 			; <UNDEFINED> instruction: 0x000001bf
 1a0:	0000290b 	andeq	r2, r0, fp, lsl #18
 1a4:	688a0100 	stmvs	sl, {r8}
 1a8:	b1000000 	mrslt	r0, (UNDEF: 0)
 1ac:	0c000001 	stceq	0, cr0, [r0], {1}
 1b0:	00fc0d00 	rscseq	r0, ip, r0, lsl #26
 1b4:	8c010000 	stchi	0, cr0, [r1], {-0}
 1b8:	00000068 	andeq	r0, r0, r8, rrx
 1bc:	0700000c 	streq	r0, [r0, -ip]
 1c0:	0000005f 	andeq	r0, r0, pc, asr r0
 1c4:	03327c01 	teqeq	r2, #256	; 0x100
 1c8:	00662000 	rsbeq	r2, r6, r0
 1cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 1d0:	000001ed 	andeq	r0, r0, sp, ror #3
 1d4:	0100690a 	tsteq	r0, sl, lsl #18
 1d8:	0000767d 	andeq	r7, r0, sp, ror r6
 1dc:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 1e0:	01006a0a 	tsteq	r0, sl, lsl #20
 1e4:	0000767d 	andeq	r7, r0, sp, ror r6
 1e8:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 1ec:	00e90e00 	rsceq	r0, r9, r0, lsl #28
 1f0:	74010000 	strvc	r0, [r1], #-0
 1f4:	200002ec 	andcs	r0, r0, ip, ror #5
 1f8:	00000046 	andeq	r0, r0, r6, asr #32
 1fc:	021f9c01 	andseq	r9, pc, #256	; 0x100
 200:	da0f0000 	ble	3c0208 <startup-0x1fc3fdf8>
 204:	01000000 	mrseq	r0, (UNDEF: 0)
 208:	00007674 	andeq	r7, r0, r4, ror r6
 20c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 210:	0002930f 	andeq	r9, r2, pc, lsl #6
 214:	76740100 	ldrbtvc	r0, [r4], -r0, lsl #2
 218:	02000000 	andeq	r0, r0, #0
 21c:	0e007691 	mcreq	6, 0, r7, cr0, cr1, {4}
 220:	00000043 	andeq	r0, r0, r3, asr #32
 224:	02ac6d01 	adceq	r6, ip, #1, 26	; 0x40
 228:	00402000 	subeq	r2, r0, r0
 22c:	9c010000 	stcls	0, cr0, [r1], {-0}
 230:	00000251 	andeq	r0, r0, r1, asr r2
 234:	0000510f 	andeq	r5, r0, pc, lsl #2
 238:	766d0100 	strbtvc	r0, [sp], -r0, lsl #2
 23c:	02000000 	andeq	r0, r0, #0
 240:	930f7791 	movwls	r7, #63377	; 0xf791
 244:	01000002 	tsteq	r0, r2
 248:	0000766d 	andeq	r7, r0, sp, ror #12
 24c:	76910200 	ldrvc	r0, [r1], r0, lsl #4
 250:	01c50e00 	biceq	r0, r5, r0, lsl #28
 254:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 258:	2000022e 	andcs	r0, r0, lr, lsr #4
 25c:	0000007e 	andeq	r0, r0, lr, ror r0
 260:	02909c01 	addseq	r9, r0, #256	; 0x100
 264:	590f0000 	stmdbpl	pc, {}	; <UNPREDICTABLE>
 268:	01000000 	mrseq	r0, (UNDEF: 0)
 26c:	00007658 	andeq	r7, r0, r8, asr r6
 270:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 274:	0002930f 	andeq	r9, r2, pc, lsl #6
 278:	76580100 	ldrbvc	r0, [r8], -r0, lsl #2
 27c:	02000000 	andeq	r0, r0, #0
 280:	ea0d7691 	b	35dccc <startup-0x1fca2334>
 284:	01000001 	tsteq	r0, r1
 288:	0000682e 	andeq	r6, r0, lr, lsr #16
 28c:	00000c00 	andeq	r0, r0, r0, lsl #24
 290:	0000cd10 	andeq	ip, r0, r0, lsl sp
 294:	76530100 	ldrbvc	r0, [r3], -r0, lsl #2
 298:	04000000 	streq	r0, [r0], #-0
 29c:	2a200002 	bcs	8002ac <startup-0x1f7ffd54>
 2a0:	01000000 	mrseq	r0, (UNDEF: 0)
 2a4:	0002b89c 	muleq	r2, ip, r8
 2a8:	02930f00 	addseq	r0, r3, #0, 30
 2ac:	53010000 	movwpl	r0, #4096	; 0x1000
 2b0:	00000076 	andeq	r0, r0, r6, ror r0
 2b4:	00779102 	rsbseq	r9, r7, r2, lsl #2
 2b8:	00007b10 	andeq	r7, r0, r0, lsl fp
 2bc:	763b0100 	ldrtvc	r0, [fp], -r0, lsl #2
 2c0:	74000000 	strvc	r0, [r0], #-0
 2c4:	90200001 	eorls	r0, r0, r1
 2c8:	01000000 	mrseq	r0, (UNDEF: 0)
 2cc:	0002f99c 	muleq	r2, ip, r9
 2d0:	02930f00 	addseq	r0, r3, #0, 30
 2d4:	3b010000 	blcc	402dc <startup-0x1ffbfd24>
 2d8:	00000076 	andeq	r0, r0, r6, ror r0
 2dc:	0a6f9102 	beq	1be46ec <startup-0x1e41b914>
 2e0:	3c010063 	stccc	0, cr0, [r1], {99}	; 0x63
 2e4:	00000076 	andeq	r0, r0, r6, ror r0
 2e8:	0d779102 	ldfeqp	f1, [r7, #-8]!
 2ec:	000001ea 	andeq	r0, r0, sl, ror #3
 2f0:	00682e01 	rsbeq	r2, r8, r1, lsl #28
 2f4:	000c0000 	andeq	r0, ip, r0
 2f8:	02740e00 	rsbseq	r0, r4, #0, 28
 2fc:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
 300:	2000010a 	andcs	r0, r0, sl, lsl #2
 304:	0000006a 	andeq	r0, r0, sl, rrx
 308:	03289c01 			; <UNDEFINED> instruction: 0x03289c01
 30c:	630a0000 	movwvs	r0, #40960	; 0xa000
 310:	76290100 	strtvc	r0, [r9], -r0, lsl #2
 314:	02000000 	andeq	r0, r0, #0
 318:	ea0d7791 	b	35e164 <startup-0x1fca1e9c>
 31c:	01000001 	tsteq	r0, r1
 320:	0000682e 	andeq	r6, r0, lr, lsr #16
 324:	00000c00 	andeq	r0, r0, r0, lsl #24
 328:	00028c0e 	andeq	r8, r2, lr, lsl #24
 32c:	b0150100 	andslt	r0, r5, r0, lsl #2
 330:	5a200000 	bpl	800338 <startup-0x1f7ffcc8>
 334:	01000000 	mrseq	r0, (UNDEF: 0)
 338:	00034c9c 	muleq	r3, ip, ip
 33c:	02930f00 	addseq	r0, r3, #0, 30
 340:	15010000 	strne	r0, [r1, #-0]
 344:	00000076 	andeq	r0, r0, r6, ror r0
 348:	00779102 	rsbseq	r9, r7, r2, lsl #2
 34c:	00011611 	andeq	r1, r1, r1, lsl r6
 350:	600d0100 	andvs	r0, sp, r0, lsl #2
 354:	50200000 	eorpl	r0, r0, r0
 358:	01000000 	mrseq	r0, (UNDEF: 0)
 35c:	00037a9c 	muleq	r3, ip, sl
 360:	00780800 	rsbseq	r0, r8, r0, lsl #16
 364:	00760d01 	rsbseq	r0, r6, r1, lsl #26
 368:	91020000 	mrsls	r0, (UNDEF: 2)
 36c:	00630a6f 	rsbeq	r0, r3, pc, ror #20
 370:	00760e01 	rsbseq	r0, r6, r1, lsl #28
 374:	91020000 	mrsls	r0, (UNDEF: 2)
 378:	1a120077 	bne	48055c <startup-0x1fb7faa4>
 37c:	01000002 	tsteq	r0, r2
 380:	00001005 	andeq	r1, r0, r5
 384:	00005020 	andeq	r5, r0, r0, lsr #32
 388:	089c0100 	ldmeq	ip, {r8}
 38c:	05010078 	streq	r0, [r1, #-120]	; 0xffffff88
 390:	00000076 	andeq	r0, r0, r6, ror r0
 394:	0a6f9102 	beq	1be47a4 <startup-0x1e41b85c>
 398:	06010063 	streq	r0, [r1], -r3, rrx
 39c:	00000076 	andeq	r0, r0, r6, ror r0
 3a0:	00779102 	rsbseq	r9, r7, r2, lsl #2
 3a4:	0004cb00 	andeq	ip, r4, r0, lsl #22
 3a8:	32000400 	andcc	r0, r0, #0, 8
 3ac:	04000001 	streq	r0, [r0], #-1
 3b0:	00012d01 	andeq	r2, r1, r1, lsl #26
 3b4:	03120c00 	tsteq	r2, #0, 24
 3b8:	00880000 	addeq	r0, r8, r0
	...
 3c4:	01d60000 	bicseq	r0, r6, r0
 3c8:	01020000 	mrseq	r0, (UNDEF: 2)
 3cc:	00010a06 	andeq	r0, r1, r6, lsl #20
 3d0:	00df0300 	sbcseq	r0, pc, r0, lsl #6
 3d4:	2b020000 	blcs	803dc <startup-0x1ff7fc24>
 3d8:	00000037 	andeq	r0, r0, r7, lsr r0
 3dc:	08080102 	stmdaeq	r8, {r1, r8}
 3e0:	02000001 	andeq	r0, r0, #1
 3e4:	001f0502 	andseq	r0, pc, r2, lsl #10
 3e8:	02020000 	andeq	r0, r2, #0
 3ec:	0001f607 	andeq	pc, r1, r7, lsl #12
 3f0:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 3f4:	0000003a 	andeq	r0, r0, sl, lsr r0
 3f8:	d8070402 	stmdale	r7, {r1, sl}
 3fc:	02000001 	andeq	r0, r0, #1
 400:	00350508 	eorseq	r0, r5, r8, lsl #10
 404:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 408:	0001d307 	andeq	sp, r1, r7, lsl #6
 40c:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
 410:	00746e69 	rsbseq	r6, r4, r9, ror #28
 414:	dd070402 	cfstrsle	mvf0, [r7, #-8]
 418:	03000001 	movweq	r0, #1
 41c:	000000e1 	andeq	r0, r0, r1, ror #1
 420:	002c1803 	eoreq	r1, ip, r3, lsl #16
 424:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 428:	010e0804 	tsteq	lr, r4, lsl #16
 42c:	b7060000 	strlt	r0, [r6, -r0]
 430:	04000002 	streq	r0, [r0], #-2
 434:	00006f09 	andeq	r6, r0, r9, lsl #30
 438:	74060000 	strvc	r0, [r6], #-0
 43c:	04000000 	streq	r0, [r0], #-0
 440:	0000450a 	andeq	r4, r0, sl, lsl #10
 444:	ba060400 	blt	18144c <startup-0x1fe7ebb4>
 448:	04000000 	streq	r0, [r0], #-0
 44c:	0000450b 	andeq	r4, r0, fp, lsl #10
 450:	c5060600 	strgt	r0, [r6, #-1536]	; 0xfffffa00
 454:	04000000 	streq	r0, [r0], #-0
 458:	00006f0c 	andeq	r6, r0, ip, lsl #30
 45c:	9e060800 	cdpls	8, 0, cr0, cr6, cr0, {0}
 460:	04000002 	streq	r0, [r0], #-2
 464:	00006f0d 	andeq	r6, r0, sp, lsl #30
 468:	00060c00 	andeq	r0, r6, r0, lsl #24
 46c:	04000000 	streq	r0, [r0], #-0
 470:	0000370e 	andeq	r3, r0, lr, lsl #14
 474:	6c061000 	stcvs	0, cr1, [r6], {-0}
 478:	04000002 	streq	r0, [r0], #-2
 47c:	0000370f 	andeq	r3, r0, pc, lsl #14
 480:	0e061100 	adfeqs	f1, f6, f0
 484:	04000002 	streq	r0, [r0], #-2
 488:	00004510 	andeq	r4, r0, r0, lsl r5
 48c:	c5061200 	strgt	r1, [r6, #-512]	; 0xfffffe00
 490:	04000002 	streq	r0, [r0], #-2
 494:	00003711 	andeq	r3, r0, r1, lsl r7
 498:	bd061400 	cfstrslt	mvf1, [r6, #-0]
 49c:	04000002 	streq	r0, [r0], #-2
 4a0:	00003712 	andeq	r3, r0, r2, lsl r7
 4a4:	0d061500 	cfstr32eq	mvfx1, [r6, #-0]
 4a8:	04000000 	streq	r0, [r0], #-0
 4ac:	00004513 	andeq	r4, r0, r3, lsl r5
 4b0:	03001600 	movweq	r1, #1536	; 0x600
 4b4:	00000209 	andeq	r0, r0, r9, lsl #4
 4b8:	00811404 	addeq	r1, r1, r4, lsl #8
 4bc:	86070000 	strhi	r0, [r7], -r0
 4c0:	02000003 	andeq	r0, r0, #3
 4c4:	013a1101 	teqeq	sl, r1, lsl #2
 4c8:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 4cc:	76120100 	ldrvc	r0, [r2], -r0, lsl #2
 4d0:	00000000 	andeq	r0, r0, r0
 4d4:	01007908 	tsteq	r0, r8, lsl #18
 4d8:	00007613 	andeq	r7, r0, r3, lsl r6
 4dc:	03000100 	movweq	r0, #256	; 0x100
 4e0:	0000030c 	andeq	r0, r0, ip, lsl #6
 4e4:	01191401 	tsteq	r9, r1, lsl #8
 4e8:	e2070000 	and	r0, r7, #0
 4ec:	34000002 	strcc	r0, [r0], #-2
 4f0:	01811601 	orreq	r1, r1, r1, lsl #12
 4f4:	7c060000 	stcvc	0, cr0, [r6], {-0}
 4f8:	01000003 	tsteq	r0, r3
 4fc:	00006817 	andeq	r6, r0, r7, lsl r8
 500:	62060000 	andvs	r0, r6, #0
 504:	01000003 	tsteq	r0, r3
 508:	00006818 	andeq	r6, r0, r8, lsl r8
 50c:	68060400 	stmdavs	r6, {sl}
 510:	01000003 	tsteq	r0, r3
 514:	00006819 	andeq	r6, r0, r9, lsl r8
 518:	70080800 	andvc	r0, r8, r0, lsl #16
 51c:	1a010078 	bne	40704 <startup-0x1ffbf8fc>
 520:	00000181 	andeq	r0, r0, r1, lsl #3
 524:	3a09000c 	bcc	24055c <startup-0x1fdbfaa4>
 528:	91000001 	tstls	r0, r1
 52c:	0a000001 	beq	538 <startup-0x1ffffac8>
 530:	0000006f 	andeq	r0, r0, pc, rrx
 534:	03030013 	movweq	r0, #12307	; 0x3013
 538:	01000003 	tsteq	r0, r3
 53c:	0001451b 	andeq	r4, r1, fp, lsl r5
 540:	03020300 	movweq	r0, #8960	; 0x2300
 544:	1b010000 	blne	4054c <startup-0x1ffbfab4>
 548:	000001a7 	andeq	r0, r0, r7, lsr #3
 54c:	0145040b 	cmpeq	r5, fp, lsl #8
 550:	ac070000 	stcge	0, cr0, [r7], {-0}
 554:	24000003 	strcs	r0, [r0], #-3
 558:	02261d01 	eoreq	r1, r6, #1, 26	; 0x40
 55c:	67080000 	strvs	r0, [r8, -r0]
 560:	01006f65 	tsteq	r0, r5, ror #30
 564:	00019c1e 	andeq	r9, r1, lr, lsl ip
 568:	53060000 	movwpl	r0, #24576	; 0x6000
 56c:	01000003 	tsteq	r0, r3
 570:	0000681f 	andeq	r6, r0, pc, lsl r8
 574:	58060400 	stmdapl	r6, {sl}
 578:	01000003 	tsteq	r0, r3
 57c:	0000681f 	andeq	r6, r0, pc, lsl r8
 580:	cc060800 	stcgt	8, cr0, [r6], {-0}
 584:	01000002 	tsteq	r0, r2
 588:	00006820 	andeq	r6, r0, r0, lsr #16
 58c:	4e060c00 	cdpmi	12, 0, cr0, cr6, cr0, {0}
 590:	01000003 	tsteq	r0, r3
 594:	00006820 	andeq	r6, r0, r0, lsr #16
 598:	b1061000 	mrslt	r1, (UNDEF: 6)
 59c:	01000003 	tsteq	r0, r3
 5a0:	00023721 	andeq	r3, r2, r1, lsr #14
 5a4:	27061400 	strcs	r1, [r6, -r0, lsl #8]
 5a8:	01000001 	tsteq	r0, r1
 5ac:	00023722 	andeq	r3, r2, r2, lsr #14
 5b0:	03061800 	movweq	r1, #26624	; 0x6800
 5b4:	01000004 	tsteq	r0, r4
 5b8:	00023723 	andeq	r3, r2, r3, lsr #14
 5bc:	b6061c00 	strlt	r1, [r6], -r0, lsl #24
 5c0:	01000003 	tsteq	r0, r3
 5c4:	00025224 	andeq	r5, r2, r4, lsr #4
 5c8:	0c002000 	stceq	0, cr2, [r0], {-0}
 5cc:	00000231 	andeq	r0, r0, r1, lsr r2
 5d0:	0002310d 	andeq	r3, r2, sp, lsl #2
 5d4:	040b0000 	streq	r0, [fp], #-0
 5d8:	000001ad 	andeq	r0, r0, sp, lsr #3
 5dc:	0226040b 	eoreq	r0, r6, #184549376	; 0xb000000
 5e0:	520c0000 	andpl	r0, ip, #0
 5e4:	0d000002 	stceq	0, cr0, [r0, #-8]
 5e8:	00000231 	andeq	r0, r0, r1, lsr r2
 5ec:	0000680d 	andeq	r6, r0, sp, lsl #16
 5f0:	00680d00 	rsbeq	r0, r8, r0, lsl #26
 5f4:	0b000000 	bleq	5fc <startup-0x1ffffa04>
 5f8:	00023d04 	andeq	r3, r2, r4, lsl #26
 5fc:	03f00300 	mvnseq	r0, #0, 6
 600:	25010000 	strcs	r0, [r1, #-0]
 604:	000001ad 	andeq	r0, r0, sp, lsr #3
 608:	0003ef03 	andeq	lr, r3, r3, lsl #30
 60c:	31250100 			; <UNDEFINED> instruction: 0x31250100
 610:	0e000002 	cdpeq	0, 0, cr0, cr0, cr2, {0}
 614:	000003cd 	andeq	r0, r0, sp, asr #7
 618:	01919b01 	orrseq	r9, r1, r1, lsl #22
 61c:	03050000 	movweq	r0, #20480	; 0x5000
 620:	20000984 	andcs	r0, r0, r4, lsl #19
 624:	0002dd0e 	andeq	sp, r2, lr, lsl #26
 628:	58a60100 	stmiapl	r6!, {r8}
 62c:	05000002 	streq	r0, [r0, #-2]
 630:	0009b803 	andeq	fp, r9, r3, lsl #16
 634:	03a70f20 			; <UNDEFINED> instruction: 0x03a70f20
 638:	b1010000 	mrslt	r0, (UNDEF: 1)
 63c:	200008f8 	strdcs	r0, [r0], -r8
 640:	0000008c 	andeq	r0, r0, ip, lsl #1
 644:	02c09c01 	sbceq	r9, r0, #256	; 0x100
 648:	70100000 	andsvc	r0, r0, r0
 64c:	63b20100 			; <UNDEFINED> instruction: 0x63b20100
 650:	02000002 	andeq	r0, r0, #2
 654:	98117491 	ldmdals	r1, {r0, r4, r7, sl, ip, sp, lr}
 658:	01000003 	tsteq	r0, r3
 65c:	000068b8 			; <UNDEFINED> instruction: 0x000068b8
 660:	70910200 	addsvc	r0, r1, r0, lsl #4
 664:	039e1200 	orrseq	r1, lr, #0, 4
 668:	91010000 	mrsls	r0, (UNDEF: 1)
 66c:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 670:	00000048 	andeq	r0, r0, r8, asr #32
 674:	5d139c01 	ldcpl	12, cr9, [r3, #-4]
 678:	01000003 	tsteq	r0, r3
 67c:	00003783 	andeq	r3, r0, r3, lsl #15
 680:	00084800 	andeq	r4, r8, r0, lsl #16
 684:	00006820 	andeq	r6, r0, r0, lsr #16
 688:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
 68c:	10000003 	andne	r0, r0, r3
 690:	0079656b 	rsbseq	r6, r9, fp, ror #10
 694:	03158401 	tsteq	r5, #16777216	; 0x1000000
 698:	91020000 	mrsls	r0, (UNDEF: 2)
 69c:	6f721058 	svcvs	0x00721058
 6a0:	85010077 	strhi	r0, [r1, #-119]	; 0xffffff89
 6a4:	00000068 	andeq	r0, r0, r8, rrx
 6a8:	106c9102 	rsbne	r9, ip, r2, lsl #2
 6ac:	006c6f63 	rsbeq	r6, ip, r3, ror #30
 6b0:	00688501 	rsbeq	r8, r8, r1, lsl #10
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	37090068 	strcc	r0, [r9, -r8, rrx]
 6bc:	25000000 	strcs	r0, [r0, #-0]
 6c0:	0a000003 	beq	6d4 <startup-0x1ffff92c>
 6c4:	0000006f 	andeq	r0, r0, pc, rrx
 6c8:	f814000f 			; <UNDEFINED> instruction: 0xf814000f
 6cc:	01000002 	tsteq	r0, r2
 6d0:	00006879 	andeq	r6, r0, r9, ror r8
 6d4:	0007f400 	andeq	pc, r7, r0, lsl #8
 6d8:	00005420 	andeq	r5, r0, r0, lsr #8
 6dc:	4b9c0100 	blmi	fe700ae4 <ball+0xde70012c>
 6e0:	10000003 	andne	r0, r0, r3
 6e4:	7a010063 	bvc	40878 <startup-0x1ffbf788>
 6e8:	00000037 	andeq	r0, r0, r7, lsr r0
 6ec:	00779102 	rsbseq	r9, r7, r2, lsl #2
 6f0:	0002d115 	andeq	sp, r2, r5, lsl r1
 6f4:	a06f0100 	rsbge	r0, pc, r0, lsl #2
 6f8:	54200007 	strtpl	r0, [r0], #-7
 6fc:	01000000 	mrseq	r0, (UNDEF: 0)
 700:	00036f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
 704:	6f721600 	svcvs	0x00721600
 708:	6f010077 	svcvs	0x00010077
 70c:	0000006f 	andeq	r0, r0, pc, rrx
 710:	00749102 	rsbseq	r9, r4, r2, lsl #2
 714:	0000fc0f 	andeq	pc, r0, pc, lsl #24
 718:	7e650100 	powvcs	f0, f5, f0
 71c:	22200007 	eorcs	r0, r0, #7
 720:	01000000 	mrseq	r0, (UNDEF: 0)
 724:	0003929c 	muleq	r3, ip, r2
 728:	736d1600 	cmnvc	sp, #0, 12
 72c:	6f650100 	svcvs	0x00650100
 730:	02000000 	andeq	r0, r0, #0
 734:	0f007491 	svceq	0x00007491
 738:	00000029 	andeq	r0, r0, r9, lsr #32
 73c:	07525c01 	ldrbeq	r5, [r2, -r1, lsl #24]
 740:	002c2000 	eoreq	r2, ip, r0
 744:	9c010000 	stcls	0, cr0, [r1], {-0}
 748:	000003b5 			; <UNDEFINED> instruction: 0x000003b5
 74c:	00737516 	rsbseq	r7, r3, r6, lsl r5
 750:	006f5c01 	rsbeq	r5, pc, r1, lsl #24
 754:	91020000 	mrsls	r0, (UNDEF: 2)
 758:	ea170074 	b	5c0930 <startup-0x1fa3f6d0>
 75c:	01000001 	tsteq	r0, r1
 760:	00074057 	andeq	r4, r7, r7, asr r0
 764:	00001220 	andeq	r1, r0, r0, lsr #4
 768:	129c0100 	addsne	r0, ip, #0, 2
 76c:	000003db 	ldrdeq	r0, [r0], -fp
 770:	06fc4e01 	ldrbteq	r4, [ip], r1, lsl #28
 774:	00442000 	subeq	r2, r4, r0
 778:	9c010000 	stcls	0, cr0, [r1], {-0}
 77c:	0003f70f 	andeq	pc, r3, pc, lsl #14
 780:	f8380100 			; <UNDEFINED> instruction: 0xf8380100
 784:	04200005 	strteq	r0, [r0], #-5
 788:	01000001 	tsteq	r0, r1
 78c:	00040f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 790:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 794:	02633801 	rsbeq	r3, r3, #65536	; 0x10000
 798:	91020000 	mrsls	r0, (UNDEF: 2)
 79c:	0608186c 	streq	r1, [r8], -ip, ror #16
 7a0:	00702000 	rsbseq	r2, r0, r0
 7a4:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 7a8:	683b0100 	ldmdavs	fp!, {r8}
 7ac:	02000000 	andeq	r0, r0, #0
 7b0:	00007491 	muleq	r0, r1, r4
 7b4:	0003c00f 	andeq	ip, r3, pc
 7b8:	a6320100 	ldrtge	r0, [r2], -r0, lsl #2
 7bc:	52200005 	eorpl	r0, r0, #5
 7c0:	01000000 	mrseq	r0, (UNDEF: 0)
 7c4:	0004479c 	muleq	r4, ip, r7
 7c8:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 7cc:	02633201 	rsbeq	r3, r3, #268435456	; 0x10000000
 7d0:	91020000 	mrsls	r0, (UNDEF: 2)
 7d4:	05ae186c 	streq	r1, [lr, #2156]!	; 0x86c
 7d8:	00422000 	subeq	r2, r2, r0
 7dc:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 7e0:	68330100 	ldmdavs	r3!, {r8}
 7e4:	02000000 	andeq	r0, r0, #0
 7e8:	00007491 	muleq	r0, r1, r4
 7ec:	0002ec0f 	andeq	lr, r2, pc, lsl #24
 7f0:	542c0100 	strtpl	r0, [ip], #-256	; 0xffffff00
 7f4:	52200005 	eorpl	r0, r0, #5
 7f8:	01000000 	mrseq	r0, (UNDEF: 0)
 7fc:	00047f9c 	muleq	r4, ip, pc	; <UNPREDICTABLE>
 800:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 804:	02632c01 	rsbeq	r2, r3, #256	; 0x100
 808:	91020000 	mrsls	r0, (UNDEF: 2)
 80c:	055c186c 	ldrbeq	r1, [ip, #-2156]	; 0xfffff794
 810:	00422000 	subeq	r2, r2, r0
 814:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 818:	682d0100 	stmdavs	sp!, {r8}
 81c:	02000000 	andeq	r0, r0, #0
 820:	00007491 	muleq	r0, r1, r4
 824:	00038d15 	andeq	r8, r3, r5, lsl sp
 828:	34270100 	strtcc	r0, [r7], #-256	; 0xffffff00
 82c:	20200005 	eorcs	r0, r0, r5
 830:	01000000 	mrseq	r0, (UNDEF: 0)
 834:	0004bd9c 	muleq	r4, ip, sp
 838:	006f1600 	rsbeq	r1, pc, r0, lsl #12
 83c:	02632701 	rsbeq	r2, r3, #262144	; 0x40000
 840:	91020000 	mrsls	r0, (UNDEF: 2)
 844:	036e1974 	cmneq	lr, #116, 18	; 0x1d0000
 848:	27010000 	strcs	r0, [r1, -r0]
 84c:	00000068 	andeq	r0, r0, r8, rrx
 850:	19709102 	ldmdbne	r0!, {r1, r8, ip, pc}^
 854:	00000375 	andeq	r0, r0, r5, ror r3
 858:	00682701 	rsbeq	r2, r8, r1, lsl #14
 85c:	91020000 	mrsls	r0, (UNDEF: 2)
 860:	e712006c 	ldr	r0, [r2, -ip, rrx]
 864:	01000003 	tsteq	r0, r3
 868:	00000003 	andeq	r0, r0, r3
 86c:	00000c20 	andeq	r0, r0, r0, lsr #24
 870:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	13050000 	movwne	r0, #20480	; 0x5000
  38:	3a0b0b01 	bcc	2c2c44 <startup-0x1fd3d3bc>
  3c:	010b3b0b 	tsteq	fp, fp, lsl #22
  40:	06000013 			; <UNDEFINED> instruction: 0x06000013
  44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	0b381349 	bleq	e04d78 <startup-0x1f1fb288>
  50:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
  54:	03193f01 	tsteq	r9, #1, 30
  58:	3b0b3a0e 	blcc	2ce898 <startup-0x1fd31768>
  5c:	1119270b 	tstne	r9, fp, lsl #14
  60:	40061201 	andmi	r1, r6, r1, lsl #4
  64:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	03000508 	movweq	r0, #1288	; 0x508
  70:	3b0b3a08 	blcc	2ce898 <startup-0x1fd31768>
  74:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  78:	09000018 	stmdbeq	r0, {r3, r4}
  7c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  80:	0b3b0b3a 	bleq	ec2d70 <startup-0x1f13d290>
  84:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  88:	340a0000 	strcc	r0, [sl], #-0
  8c:	3a080300 	bcc	200c94 <startup-0x1fdff36c>
  90:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  94:	00180213 	andseq	r0, r8, r3, lsl r2
  98:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
  9c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  a0:	0b3b0b3a 	bleq	ec2d90 <startup-0x1f13d270>
  a4:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  a8:	00001301 	andeq	r1, r0, r1, lsl #6
  ac:	0000180c 	andeq	r1, r0, ip, lsl #16
  b0:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
  b4:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  b8:	0b3b0b3a 	bleq	ec2da8 <startup-0x1f13d258>
  bc:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
  c0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
  c4:	3a0e0301 	bcc	380cd0 <startup-0x1fc7f330>
  c8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
  cc:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  d0:	96184006 	ldrls	r4, [r8], -r6
  d4:	13011942 	movwne	r1, #6466	; 0x1942
  d8:	050f0000 	streq	r0, [pc, #-0]	; e0 <startup-0x1fffff20>
  dc:	3a0e0300 	bcc	380ce4 <startup-0x1fc7f31c>
  e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  e4:	00180213 	andseq	r0, r8, r3, lsl r2
  e8:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
  ec:	0b3a0e03 	bleq	e83900 <startup-0x1f17c700>
  f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
  f4:	01111349 	tsteq	r1, r9, asr #6
  f8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  fc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 100:	11000013 	tstne	r0, r3, lsl r0
 104:	0e03012e 	adfeqsp	f0, f3, #0.5
 108:	0b3b0b3a 	bleq	ec2df8 <startup-0x1f13d208>
 10c:	01111927 	tsteq	r1, r7, lsr #18
 110:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 114:	01194297 			; <UNDEFINED> instruction: 0x01194297
 118:	12000013 	andne	r0, r0, #19
 11c:	0e03012e 	adfeqsp	f0, f3, #0.5
 120:	0b3b0b3a 	bleq	ec2e10 <startup-0x1f13d1f0>
 124:	01111927 	tsteq	r1, r7, lsr #18
 128:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 12c:	00194297 	mulseq	r9, r7, r2
 130:	11010000 	mrsne	r0, (UNDEF: 1)
 134:	130e2501 	movwne	r2, #58625	; 0xe501
 138:	1b0e030b 	blne	380d6c <startup-0x1fc7f294>
 13c:	1117550e 	tstne	r7, lr, lsl #10
 140:	00171001 	andseq	r1, r7, r1
 144:	00240200 	eoreq	r0, r4, r0, lsl #4
 148:	0b3e0b0b 	bleq	f82d7c <startup-0x1f07d284>
 14c:	00000e03 	andeq	r0, r0, r3, lsl #28
 150:	03001603 	movweq	r1, #1539	; 0x603
 154:	3b0b3a0e 	blcc	2ce994 <startup-0x1fd3166c>
 158:	0013490b 	andseq	r4, r3, fp, lsl #18
 15c:	00240400 	eoreq	r0, r4, r0, lsl #8
 160:	0b3e0b0b 	bleq	f82d94 <startup-0x1f07d26c>
 164:	00000803 	andeq	r0, r0, r3, lsl #16
 168:	0b011305 	bleq	44d84 <startup-0x1ffbb27c>
 16c:	3b0b3a0b 	blcc	2ce9a0 <startup-0x1fd31660>
 170:	0013010b 	andseq	r0, r3, fp, lsl #2
 174:	000d0600 	andeq	r0, sp, r0, lsl #12
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 180:	00000b38 	andeq	r0, r0, r8, lsr fp
 184:	03011307 	movweq	r1, #4871	; 0x1307
 188:	3a0b0b0e 	bcc	2c2dc8 <startup-0x1fd3d238>
 18c:	010b3b0b 	tsteq	fp, fp, lsl #22
 190:	08000013 	stmdaeq	r0, {r0, r1, r4}
 194:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 198:	0b3b0b3a 	bleq	ec2e88 <startup-0x1f13d178>
 19c:	0b381349 	bleq	e04ec8 <startup-0x1f1fb138>
 1a0:	01090000 	mrseq	r0, (UNDEF: 9)
 1a4:	01134901 	tsteq	r3, r1, lsl #18
 1a8:	0a000013 	beq	1fc <startup-0x1ffffe04>
 1ac:	13490021 	movtne	r0, #36897	; 0x9021
 1b0:	00000b2f 	andeq	r0, r0, pc, lsr #22
 1b4:	0b000f0b 	bleq	3de8 <startup-0x1fffc218>
 1b8:	0013490b 	andseq	r4, r3, fp, lsl #18
 1bc:	01150c00 	tsteq	r5, r0, lsl #24
 1c0:	13011927 	movwne	r1, #6439	; 0x1927
 1c4:	050d0000 	streq	r0, [sp, #-0]
 1c8:	00134900 	andseq	r4, r3, r0, lsl #18
 1cc:	00340e00 	eorseq	r0, r4, r0, lsl #28
 1d0:	0b3a0e03 	bleq	e839e4 <startup-0x1f17c61c>
 1d4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 1d8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 1dc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 1e0:	03193f01 	tsteq	r9, #1, 30
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	1119270b 	tstne	r9, fp, lsl #14
 1ec:	40061201 	andmi	r1, r6, r1, lsl #4
 1f0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 1f4:	00001301 	andeq	r1, r0, r1, lsl #6
 1f8:	03003410 	movweq	r3, #1040	; 0x410
 1fc:	3b0b3a08 	blcc	2cea24 <startup-0x1fd315dc>
 200:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 204:	11000018 	tstne	r0, r8, lsl r0
 208:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 20c:	0b3b0b3a 	bleq	ec2efc <startup-0x1f13d104>
 210:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 214:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 218:	03193f00 	tsteq	r9, #0, 30
 21c:	3b0b3a0e 	blcc	2cea5c <startup-0x1fd315a4>
 220:	1119270b 	tstne	r9, fp, lsl #14
 224:	40061201 	andmi	r1, r6, r1, lsl #4
 228:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 22c:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
 230:	03193f01 	tsteq	r9, #1, 30
 234:	3b0b3a0e 	blcc	2cea74 <startup-0x1fd3158c>
 238:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 23c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 240:	96184006 	ldrls	r4, [r8], -r6
 244:	13011942 	movwne	r1, #6466	; 0x1942
 248:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
 24c:	03193f01 	tsteq	r9, #1, 30
 250:	3b0b3a0e 	blcc	2cea90 <startup-0x1fd31570>
 254:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 258:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 25c:	97184006 	ldrls	r4, [r8, -r6]
 260:	13011942 	movwne	r1, #6466	; 0x1942
 264:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 268:	03193f01 	tsteq	r9, #1, 30
 26c:	3b0b3a0e 	blcc	2ceaac <startup-0x1fd31554>
 270:	1119270b 	tstne	r9, fp, lsl #14
 274:	40061201 	andmi	r1, r6, r1, lsl #4
 278:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 27c:	00001301 	andeq	r1, r0, r1, lsl #6
 280:	03000516 	movweq	r0, #1302	; 0x516
 284:	3b0b3a08 	blcc	2ceaac <startup-0x1fd31554>
 288:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 28c:	17000018 	smladne	r0, r8, r0, r0
 290:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 294:	0b3a0e03 	bleq	e83aa8 <startup-0x1f17c558>
 298:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 29c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2a0:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 2a4:	18000019 	stmdane	r0, {r0, r3, r4}
 2a8:	0111010b 	tsteq	r1, fp, lsl #2
 2ac:	00000612 	andeq	r0, r0, r2, lsl r6
 2b0:	03000519 	movweq	r0, #1305	; 0x519
 2b4:	3b0b3a0e 	blcc	2ceaf4 <startup-0x1fd3150c>
 2b8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 2bc:	00000018 	andeq	r0, r0, r8, lsl r0

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  20:	00000024 	andeq	r0, r0, r4, lsr #32
  24:	03a50002 			; <UNDEFINED> instruction: 0x03a50002
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	20000534 	andcs	r0, r0, r4, lsr r5
  34:	00000450 	andeq	r0, r0, r0, asr r4
  38:	20000000 	andcs	r0, r0, r0
  3c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001d2 	ldrdeq	r0, [r0], -r2
   4:	00fb0002 	rscseq	r0, fp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	61686f6a 	cmnvs	r8, sl, ror #30
  28:	6f672f6e 	svcvs	0x00672f6e
  2c:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
  30:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
  34:	502f6576 	eorpl	r6, pc, r6, ror r5	; <UNPREDICTABLE>
  38:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  3c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  44:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
  48:	6d724f2f 	ldclvs	15, cr4, [r2, #-188]!	; 0xffffff44
  4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  50:	61657363 	cmnvs	r5, r3, ror #6
  54:	635c7070 	cmpvs	ip, #112	; 0x70
  58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe98 <ball+0xdffff4e0>
  64:	63675c73 	cmnvs	r7, #29440	; 0x7300
  68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  70:	6f6e2d6d 	svcvs	0x006e2d6d
  74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  88:	00656e69 	rsbeq	r6, r5, r9, ror #28
  8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  90:	70616573 	rsbvc	r6, r1, r3, ror r5
  94:	6f635c70 	svcvs	0x00635c70
  98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  a0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  b4:	61652d65 	cmnvs	r5, r5, ror #26
  b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  c0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  c4:	00007379 	andeq	r7, r0, r9, ror r3
  c8:	70617267 	rsbvc	r7, r1, r7, ror #4
  cc:	73636968 	cmnvc	r3, #104, 18	; 0x1a0000
  d0:	0100632e 	tsteq	r0, lr, lsr #6
  d4:	645f0000 	ldrbvs	r0, [pc], #-0	; dc <startup-0x1fffff24>
  d8:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  dc:	745f746c 	ldrbvc	r7, [pc], #-1132	; e4 <startup-0x1fffff1c>
  e0:	73657079 	cmnvc	r5, #121	; 0x79
  e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e8:	735f0000 	cmpvc	pc, #0
  ec:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  f0:	00682e74 	rsbeq	r2, r8, r4, ror lr
  f4:	64000003 	strvs	r0, [r0], #-3
  f8:	6e696665 	cdpvs	6, 6, cr6, cr9, cr5, {3}
  fc:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 100:	00000100 	andeq	r0, r0, r0, lsl #2
 104:	02050000 	andeq	r0, r5, #0
 108:	20000010 	andcs	r0, r0, r0, lsl r0
 10c:	67596816 	smmlavs	r9, r6, r8, r6
 110:	68684bc9 	stmdavs	r8!, {r0, r3, r6, r7, r8, r9, fp, lr}^
 114:	4bbb6759 	blmi	feed9e80 <ball+0xdeed94c8>
 118:	10036776 	andne	r6, r3, r6, ror r7
 11c:	20700374 	rsbscs	r0, r0, r4, ror r3
 120:	034a1003 	movteq	r1, #40963	; 0xa003
 124:	223d2072 	eorscs	r2, sp, #114	; 0x72
 128:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 12c:	223d223d 	eorscs	r2, sp, #-805306365	; 0xd0000003
 130:	3d3d3e4c 	ldccc	14, cr3, [sp, #-304]!	; 0xfffffed0
 134:	3d313d3d 	ldccc	13, cr3, [r1, #-244]!	; 0xffffff0c
 138:	2f3d752f 	svccs	0x003d752f
 13c:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
 140:	3d3d68a0 	ldccc	8, cr6, [sp, #-640]!	; 0xfffffd80
 144:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
 148:	3e3d592f 	vaddcc.f16	s10, s26, s31	; <UNPREDICTABLE>
 14c:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 150:	ae3d303d 	mrcge	0, 1, r3, cr13, cr13, {1}
 154:	4c675967 			; <UNDEFINED> instruction: 0x4c675967
 158:	2f594b91 	svccs	0x00594b91
 15c:	593e2f3d 	ldmdbpl	lr!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
 160:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 164:	3d3d3d30 	ldccc	13, cr3, [sp, #-192]!	; 0xffffff40
 168:	593d9168 	ldmdbpl	sp!, {r3, r5, r6, r8, ip, pc}
 16c:	914c833d 	cmpls	ip, sp, lsr r3
 170:	3d3d593d 			; <UNDEFINED> instruction: 0x3d3d593d
 174:	4b3f4c83 	blmi	fd3388 <startup-0x1f02cc78>
 178:	02004b9f 	andeq	r4, r0, #162816	; 0x27c00
 17c:	004b0304 	subeq	r0, fp, r4, lsl #6
 180:	49030402 	stmdbmi	r3, {r1, sl}
 184:	01040200 	mrseq	r0, R12_usr
 188:	02005806 	andeq	r5, r0, #393216	; 0x60000
 18c:	47060204 	strmi	r0, [r6, -r4, lsl #4]
 190:	01040200 	mrseq	r0, R12_usr
 194:	51065806 	tstpl	r6, r6, lsl #16
 198:	3d3d2f4c 	ldccc	15, cr2, [sp, #-304]!	; 0xfffffed0
 19c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1a0:	4b4b4b4b 	blmi	12d2ed4 <startup-0x1ed2d12c>
 1a4:	6a3e3d4b 	bvs	f8f6d8 <startup-0x1f070928>
 1a8:	01040200 	mrseq	r0, R12_usr
 1ac:	02004a06 	andeq	r4, r0, #24576	; 0x6000
 1b0:	004a0204 	subeq	r0, sl, r4, lsl #4
 1b4:	4a030402 	bmi	c11c4 <startup-0x1ff3ee3c>
 1b8:	08754c06 	ldmdaeq	r5!, {r1, r2, sl, fp, lr}^
 1bc:	3d683d14 	stclcc	13, cr3, [r8, #-80]!	; 0xffffffb0
 1c0:	3f4b4c4b 	svccc	0x004b4c4b
 1c4:	bc91c9c9 			; <UNDEFINED> instruction: 0xbc91c9c9
 1c8:	0392a03d 	orrseq	sl, r2, #61	; 0x3d
 1cc:	1b03ac66 	blne	eb36c <startup-0x1ff14c94>
 1d0:	00060220 	andeq	r0, r6, r0, lsr #4
 1d4:	01ef0101 	mvneq	r0, r1, lsl #2
 1d8:	00020000 	andeq	r0, r2, r0
 1dc:	000000fa 	strdeq	r0, [r0], -sl
 1e0:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 1e4:	0101000d 	tsteq	r1, sp
 1e8:	00000101 	andeq	r0, r0, r1, lsl #2
 1ec:	00000100 	andeq	r0, r0, r0, lsl #2
 1f0:	2f3a4301 	svccs	0x003a4301
 1f4:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 1f8:	6f6a2f73 	svcvs	0x006a2f73
 1fc:	2f6e6168 	svccs	0x006e6168
 200:	676f6f67 	strbvs	r6, [pc, -r7, ror #30]!
 204:	645f656c 	ldrbvs	r6, [pc], #-1388	; 20c <startup-0x1ffffdf4>
 208:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 20c:	6f72502f 	svcvs	0x0072502f
 210:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 214:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 218:	472f676e 	strmi	r6, [pc, -lr, ror #14]!
 21c:	4f2f7469 	svcmi	0x002f7469
 220:	63006d72 	movwvs	r6, #3442	; 0xd72
 224:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 228:	70706165 	rsbsvc	r6, r0, r5, ror #2
 22c:	646f635c 	strbtvs	r6, [pc], #-860	; 234 <startup-0x1ffffdcc>
 230:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 234:	6f745c65 	svcvs	0x00745c65
 238:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 23c:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 240:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 244:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 248:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 24c:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 250:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 254:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 258:	616d5c65 	cmnvs	sp, r5, ror #24
 25c:	6e696863 	cdpvs	8, 6, cr6, cr9, cr3, {3}
 260:	3a630065 	bcc	18c03fc <startup-0x1e73fc04>
 264:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 268:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 26c:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 270:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 274:	6f6f745c 	svcvs	0x006f745c
 278:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 27c:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 280:	615c6d72 	cmpvs	ip, r2, ror sp
 284:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 288:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 28c:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 290:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 294:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 298:	7379735c 	cmnvc	r9, #92, 6	; 0x70000001
 29c:	74730000 	ldrbtvc	r0, [r3], #-0
 2a0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 2a4:	00632e70 	rsbeq	r2, r3, r0, ror lr
 2a8:	5f000001 	svcpl	0x00000001
 2ac:	61666564 	cmnvs	r6, r4, ror #10
 2b0:	5f746c75 	svcpl	0x00746c75
 2b4:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 2b8:	00682e73 	rsbeq	r2, r8, r3, ror lr
 2bc:	5f000002 	svcpl	0x00000002
 2c0:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 2c4:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 2c8:	00000300 	andeq	r0, r0, r0, lsl #6
 2cc:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 2d0:	2e73656e 	cdpcs	5, 7, cr6, cr3, cr14, {3}
 2d4:	00010068 	andeq	r0, r1, r8, rrx
 2d8:	05000000 	streq	r0, [r0, #-0]
 2dc:	00000002 	andeq	r0, r0, r2
 2e0:	5e131520 	cfmul64pl	mvdx1, mvdx3, mvdx0
 2e4:	01000302 	tsteq	r0, r2, lsl #6
 2e8:	02050001 	andeq	r0, r5, #1
 2ec:	20000534 	andcs	r0, r0, r4, lsr r5
 2f0:	67012603 	strvs	r2, [r1, -r3, lsl #12]
 2f4:	4b4c3d3d 	blmi	130f7f0 <startup-0x1ecf0810>
 2f8:	03040200 	movweq	r0, #16896	; 0x4200
 2fc:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 300:	00490803 	subeq	r0, r9, r3, lsl #16
 304:	06010402 	streq	r0, [r1], -r2, lsl #8
 308:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 30c:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 310:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 314:	49080304 	stmdbmi	r8, {r2, r8, r9}
 318:	01040200 	mrseq	r0, R12_usr
 31c:	69063c06 	stmdbvs	r6, {r1, r2, sl, fp, ip, sp}
 320:	004c4b4c 	subeq	r4, ip, ip, asr #22
 324:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 328:	03040200 	movweq	r0, #16896	; 0x4200
 32c:	02005908 	andeq	r5, r0, #8, 18	; 0x20000
 330:	56080304 	strpl	r0, [r8], -r4, lsl #6
 334:	01040200 	mrseq	r0, R12_usr
 338:	6a063c06 	bvs	18f358 <startup-0x1fe70ca8>
 33c:	594b7675 	stmdbpl	fp, {r0, r2, r4, r5, r6, r9, sl, ip, sp, lr}^
 340:	594b5983 	stmdbpl	fp, {r0, r1, r7, r8, fp, ip, lr}^
 344:	4c4b5a83 	mcrrmi	10, 8, r5, fp, cr3
 348:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 34c:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 350:	06200601 	strteq	r0, [r0], -r1, lsl #12
 354:	2fa03d67 	svccs	0x00a03d67
 358:	4b3e2f2f 	blmi	f8c01c <startup-0x1f073fe4>
 35c:	2f2f2f21 	svccs	0x002f2f21
 360:	4c4c5e2a 	mcrrmi	14, 2, r5, ip, cr10
 364:	4c5e3b21 	mrrcmi	11, 2, r3, lr, cr1
 368:	4b4b914b 	blmi	12e489c <startup-0x1ed1b764>
 36c:	924c4b4b 	subls	r4, ip, #76800	; 0x12c00
 370:	02004b3e 	andeq	r4, r0, #63488	; 0xf800
 374:	58060104 	stmdapl	r6, {r2, r8}
 378:	02002f06 	andeq	r2, r0, #6, 30
 37c:	58060104 	stmdapl	r6, {r2, r8}
 380:	02002f06 	andeq	r2, r0, #6, 30
 384:	58060104 	stmdapl	r6, {r2, r8}
 388:	02002f06 	andeq	r2, r0, #6, 30
 38c:	58060104 	stmdapl	r6, {r2, r8}
 390:	68212f06 	stmdavs	r1!, {r1, r2, r8, r9, sl, fp, sp}
 394:	4b3d683d 	blmi	f5a490 <startup-0x1f0a5b70>
 398:	02003d75 	andeq	r3, r0, #7488	; 0x1d40
 39c:	008c0204 	addeq	r0, ip, r4, lsl #4
 3a0:	06010402 	streq	r0, [r1], -r2, lsl #8
 3a4:	3d43063c 	stclcc	6, cr0, [r3, #-240]	; 0xffffff10
 3a8:	01040200 	mrseq	r0, R12_usr
 3ac:	3f307621 	svccc	0x00307621
 3b0:	0367833d 	cmneq	r7, #-201326592	; 0xf4000000
 3b4:	2f3dd618 	svccs	0x003dd618
 3b8:	682f322f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, ip, sp}	; <UNPREDICTABLE>
 3bc:	8383d75b 	orrhi	sp, r3, #23855104	; 0x16c0000
 3c0:	74790375 	ldrbtvc	r0, [r9], #-885	; 0xfffffc8b
 3c4:	01000402 	tsteq	r0, r2, lsl #8
 3c8:	Address 0x000003c8 is out of bounds.


Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
   4:	7000776f 	andvc	r7, r0, pc, ror #14
   8:	6c657869 	stclvs	8, cr7, [r5], #-420	; 0xfffffe5c
   c:	72646f00 	rsbvc	r6, r4, #0, 30
  10:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
  14:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
  18:	646e6900 	strbtvs	r6, [lr], #-2304	; 0xfffff700
  1c:	73007865 	movwvc	r7, #2149	; 0x865
  20:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
  24:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
  28:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  2c:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffff72 <ball+0xdffff5ba>	; <UNPREDICTABLE>
  30:	6f726369 	svcvs	0x00726369
  34:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  38:	6f6c2067 	svcvs	0x006c2067
  3c:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  40:	6700746e 	strvs	r7, [r0, -lr, ror #8]
  44:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  48:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  4c:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  50:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffedc <ball+0xdffff524>
  54:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  58:	6c617600 	stclvs	6, cr7, [r1], #-0
  5c:	67006575 	smlsdxvs	r0, r5, r5, r6
  60:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  64:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
  68:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
  6c:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
  70:	006e6565 	rsbeq	r6, lr, r5, ror #10
  74:	7079746f 	rsbsvc	r7, r9, pc, ror #8
  78:	67007265 	strvs	r7, [r0, -r5, ror #4]
  7c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  80:	725f6369 	subsvc	r6, pc, #-1543503871	; 0xa4000001
  84:	00646165 	rsbeq	r6, r4, r5, ror #2
  88:	555c3a43 	ldrbpl	r3, [ip, #-2627]	; 0xfffff5bd
  8c:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  90:	686f6a5c 	stmdavs	pc!, {r2, r3, r4, r6, r9, fp, sp, lr}^	; <UNPREDICTABLE>
  94:	675c6e61 	ldrbvs	r6, [ip, -r1, ror #28]
  98:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
  9c:	72645f65 	rsbvc	r5, r4, #404	; 0x194
  a0:	5c657669 	stclpl	6, cr7, [r5], #-420	; 0xfffffe5c
  a4:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  a8:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  ac:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  b0:	69475c67 	stmdbvs	r7, {r0, r1, r2, r5, r6, sl, fp, ip, lr}^
  b4:	724f5c74 	subvc	r5, pc, #116, 24	; 0x7400
  b8:	746f006d 	strbtvc	r0, [pc], #-109	; c0 <startup-0x1fffff40>
  bc:	65736552 	ldrbvs	r6, [r3, #-1362]!	; 0xfffffaae
  c0:	64657672 	strbtvs	r7, [r5], #-1650	; 0xfffff98e
  c4:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
  c8:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
  cc:	61726700 	cmnvs	r2, r0, lsl #14
  d0:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  d4:	6165725f 	cmnvs	r5, pc, asr r2
  d8:	61645f64 	cmnvs	r4, r4, ror #30
  dc:	5f006174 	svcpl	0x00006174
  e0:	6e69755f 	mcrvs	5, 3, r7, cr9, cr15, {2}
  e4:	745f3874 	ldrbvc	r3, [pc], #-2164	; ec <startup-0x1fffff14>
  e8:	61726700 	cmnvs	r2, r0, lsl #14
  ec:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  f0:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
  f4:	645f6574 	ldrbvs	r6, [pc], #-1396	; fc <startup-0x1fffff04>
  f8:	00617461 	rsbeq	r7, r1, r1, ror #8
  fc:	616c6564 	cmnvs	ip, r4, ror #10
 100:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 104:	00696c6c 	rsbeq	r6, r9, ip, ror #24
 108:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 10c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 110:	61686320 	cmnvs	r8, r0, lsr #6
 114:	72670072 	rsbvc	r0, r7, #114	; 0x72
 118:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 11c:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 120:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 124:	635f7469 	cmpvs	pc, #1761607680	; 0x69000000
 128:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 12c:	554e4700 	strbpl	r4, [lr, #-1792]	; 0xfffff900
 130:	39394320 	ldmdbcc	r9!, {r5, r8, r9, lr}
 134:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
 138:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
 13c:	30373130 	eorscc	r3, r7, r0, lsr r1
 140:	20343039 	eorscs	r3, r4, r9, lsr r0
 144:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
 148:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
 14c:	415b2029 	cmpmi	fp, r9, lsr #32
 150:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff406 <ball+0xdfffea4e>
 154:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
 158:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
 15c:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
 160:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
 164:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
 168:	6f697369 	svcvs	0x00697369
 16c:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
 170:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
 174:	6d2d205d 	stcvs	0, cr2, [sp, #-372]!	; 0xfffffe8c
 178:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 17c:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 180:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 184:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 188:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 18c:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
 190:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
 194:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
 198:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
 19c:	6d2d2074 	stcvs	0, cr2, [sp, #-464]!	; 0xfffffe30
 1a0:	6d756874 	ldclvs	8, cr6, [r5, #-464]!	; 0xfffffe30
 1a4:	6d2d2062 	stcvs	0, cr2, [sp, #-392]!	; 0xfffffe78
 1a8:	68637261 	stmdavs	r3!, {r0, r5, r6, r9, ip, sp, lr}^
 1ac:	6d72613d 	ldfvse	f6, [r2, #-244]!	; 0xffffff0c
 1b0:	6d2d3676 	stcvs	6, cr3, [sp, #-472]!	; 0xfffffe28
 1b4:	20672d20 	rsbcs	r2, r7, r0, lsr #26
 1b8:	20304f2d 	eorscs	r4, r0, sp, lsr #30
 1bc:	6474732d 	ldrbtvs	r7, [r4], #-813	; 0xfffffcd3
 1c0:	3939633d 	ldmdbcc	r9!, {r0, r2, r3, r4, r5, r8, r9, sp, lr}
 1c4:	61726700 	cmnvs	r2, r0, lsl #14
 1c8:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1cc:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
 1d0:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
 1d4:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1d8:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 1dc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 1e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 1e4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 1e8:	65640074 	strbvs	r0, [r4, #-116]!	; 0xffffff8c
 1ec:	5f79616c 	svcpl	0x0079616c
 1f0:	6e303035 	mrcvs	0, 1, r3, cr0, cr5, {1}
 1f4:	68730073 	ldmdavs	r3!, {r0, r1, r4, r5, r6}^
 1f8:	2074726f 	rsbscs	r7, r4, pc, ror #4
 1fc:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 200:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 204:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 208:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 20c:	6469004f 	strbtvs	r0, [r9], #-79	; 0xffffffb1
 210:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 214:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 218:	72670064 	rsbvc	r0, r7, #100	; 0x64
 21c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 220:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 224:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 228:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 22c:	43007465 	movwmi	r7, #1125	; 0x465
 230:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 234:	2f737265 	svccs	0x00737265
 238:	61686f6a 	cmnvs	r8, sl, ror #30
 23c:	6f672f6e 	svcvs	0x00672f6e
 240:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
 244:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 248:	502f6576 	eorpl	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 24c:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 250:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 254:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 258:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 25c:	6d724f2f 	ldclvs	15, cr4, [r2, #-188]!	; 0xffffff44
 260:	6172672f 	cmnvs	r2, pc, lsr #14
 264:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 268:	00632e73 	rsbeq	r2, r3, r3, ror lr
 26c:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 270:	00686769 	rsbeq	r6, r8, r9, ror #14
 274:	70617267 	rsbvc	r7, r1, r7, ror #4
 278:	5f636968 	svcpl	0x00636968
 27c:	74696177 	strbtvc	r6, [r9], #-375	; 0xfffffe89
 280:	6165725f 	cmnvs	r5, pc, asr r2
 284:	6d007964 	vstrvs.16	s14, [r0, #-200]	; 0xffffff38	; <UNPREDICTABLE>
 288:	006b7361 	rsbeq	r7, fp, r1, ror #6
 28c:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 290:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 294:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 298:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 29c:	75700072 	ldrbvc	r0, [r0, #-114]!	; 0xffffff8e
 2a0:	00726470 	rsbseq	r6, r2, r0, ror r4
 2a4:	70617267 	rsbvc	r7, r1, r7, ror #4
 2a8:	5f636968 	svcpl	0x00636968
 2ac:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2b0:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 2b4:	6d00657a 	cfstr32vs	mvfx6, [r0, #-488]	; 0xfffffe18
 2b8:	7265646f 	rsbvc	r6, r5, #1862270976	; 0x6f000000
 2bc:	72646f00 	rsbvc	r6, r4, #0, 30
 2c0:	68676948 	stmdavs	r7!, {r3, r6, r8, fp, sp, lr}^
 2c4:	72646f00 	rsbvc	r6, r4, #0, 30
 2c8:	00776f4c 	rsbseq	r6, r7, ip, asr #30
 2cc:	78736f70 	ldmdavc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
 2d0:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 2d4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 2d8:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 2dc:	6c616200 	sfmvs	f6, 2, [r1], #-0
 2e0:	4774006c 	ldrbmi	r0, [r4, -ip, rrx]!
 2e4:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 2e8:	00797274 	rsbseq	r7, r9, r4, ror r2
 2ec:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2f0:	6a626f5f 	bvs	189c074 <startup-0x1e763f8c>
 2f4:	00746365 	rsbseq	r6, r4, r5, ror #6
 2f8:	4764626b 	strbmi	r6, [r4, -fp, ror #4]!
 2fc:	6f437465 	svcvs	0x00437465
 300:	4750006c 	ldrbmi	r0, [r0, -ip, rrx]
 304:	454d4f45 	strbmi	r4, [sp, #-3909]	; 0xfffff0bb
 308:	00595254 	subseq	r5, r9, r4, asr r2
 30c:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
 310:	3a430054 	bcc	10c0468 <startup-0x1ef3fb98>
 314:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 318:	6a2f7372 	bvs	bdd0e8 <startup-0x1f422f18>
 31c:	6e61686f 	cdpvs	8, 6, cr6, cr1, cr15, {3}
 320:	6f6f672f 	svcvs	0x006f672f
 324:	5f656c67 	svcpl	0x00656c67
 328:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 32c:	72502f65 	subsvc	r2, r0, #404	; 0x194
 330:	6172676f 	cmnvs	r2, pc, ror #14
 334:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 338:	2f676e69 	svccs	0x00676e69
 33c:	2f746947 	svccs	0x00746947
 340:	2f6d724f 	svccs	0x006d724f
 344:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 348:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
 34c:	6f700063 	svcvs	0x00700063
 350:	64007973 	strvs	r7, [r0], #-2419	; 0xfffff68d
 354:	00787269 	rsbseq	r7, r8, r9, ror #4
 358:	79726964 	ldmdbvc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
 35c:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 360:	69730062 	ldmdbvs	r3!, {r1, r5, r6}^
 364:	0078657a 	rsbseq	r6, r8, sl, ror r5
 368:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 36c:	70730079 	rsbsvc	r0, r3, r9, ror r0
 370:	78646565 	stmdavc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 374:	65707300 	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
 378:	00796465 	rsbseq	r6, r9, r5, ror #8
 37c:	706d756e 	rsbvc	r7, sp, lr, ror #10
 380:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 384:	50740073 	rsbspl	r0, r4, r3, ror r0
 388:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 38c:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 390:	6a626f5f 	bvs	189c114 <startup-0x1e763eec>
 394:	5f746365 	svcpl	0x00746365
 398:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 39c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
 3a0:	615f7469 	cmpvs	pc, r9, ror #8
 3a4:	6d007070 	stcvs	0, cr7, [r0, #-448]	; 0xfffffe40
 3a8:	006e6961 	rsbeq	r6, lr, r1, ror #18
 3ac:	6a624f74 	bvs	1894184 <startup-0x1e76be7c>
 3b0:	61726400 	cmnvs	r2, r0, lsl #8
 3b4:	65730077 	ldrbvs	r0, [r3, #-119]!	; 0xffffff89
 3b8:	70735f74 	rsbsvc	r5, r3, r4, ror pc
 3bc:	00646565 	rsbeq	r6, r4, r5, ror #10
 3c0:	61656c63 	cmnvs	r5, r3, ror #24
 3c4:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 3c8:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 3cc:	6c616200 	sfmvs	f6, 2, [r1], #-0
 3d0:	65675f6c 	strbvs	r5, [r7, #-3948]!	; 0xfffff094
 3d4:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 3d8:	64007972 	strvs	r7, [r0], #-2418	; 0xfffff68e
 3dc:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 3e0:	3035325f 	eorscc	r3, r5, pc, asr r2
 3e4:	7300736e 	movwvc	r7, #878	; 0x36e
 3e8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 3ec:	50007075 	andpl	r7, r0, r5, ror r0
 3f0:	454a424f 	strbmi	r4, [sl, #-591]	; 0xfffffdb1
 3f4:	6d005443 	cfstrsvs	mvf5, [r0, #-268]	; 0xfffffef4
 3f8:	5f65766f 	svcpl	0x0065766f
 3fc:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 400:	6d007463 	cfstrsvs	mvf7, [r0, #-396]	; 0xfffffe74
 404:	0065766f 	rsbeq	r7, r5, pc, ror #12

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffe956>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000060 	andcs	r0, r0, r0, rrx
  3c:	00000050 	andeq	r0, r0, r0, asr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	200000b0 	strhcs	r0, [r0], -r0	; <UNPREDICTABLE>
  5c:	0000005a 	andeq	r0, r0, sl, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	100e4101 	andne	r4, lr, r1, lsl #2
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	2000010a 	andcs	r0, r0, sl, lsl #2
  7c:	0000006a 	andeq	r0, r0, sl, rrx
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	100e4101 	andne	r4, lr, r1, lsl #2
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000001c 	andeq	r0, r0, ip, lsl r0
  94:	00000000 	andeq	r0, r0, r0
  98:	20000174 	andcs	r0, r0, r4, ror r1
  9c:	00000090 	muleq	r0, r0, r0
  a0:	40080e41 	andmi	r0, r8, r1, asr #28
  a4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  a8:	180e4101 	stmdane	lr, {r0, r8, lr}
  ac:	00070d41 	andeq	r0, r7, r1, asr #26
  b0:	0000001c 	andeq	r0, r0, ip, lsl r0
  b4:	00000000 	andeq	r0, r0, r0
  b8:	20000204 	andcs	r0, r0, r4, lsl #4
  bc:	0000002a 	andeq	r0, r0, sl, lsr #32
  c0:	40080e41 	andmi	r0, r8, r1, asr #28
  c4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  c8:	100e4101 	andne	r4, lr, r1, lsl #2
  cc:	00070d41 	andeq	r0, r7, r1, asr #26
  d0:	0000001c 	andeq	r0, r0, ip, lsl r0
  d4:	00000000 	andeq	r0, r0, r0
  d8:	2000022e 	andcs	r0, r0, lr, lsr #4
  dc:	0000007e 	andeq	r0, r0, lr, ror r0
  e0:	40080e41 	andmi	r0, r8, r1, asr #28
  e4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  e8:	100e4101 	andne	r4, lr, r1, lsl #2
  ec:	00070d41 	andeq	r0, r7, r1, asr #26
  f0:	0000001c 	andeq	r0, r0, ip, lsl r0
  f4:	00000000 	andeq	r0, r0, r0
  f8:	200002ac 	andcs	r0, r0, ip, lsr #5
  fc:	00000040 	andeq	r0, r0, r0, asr #32
 100:	40080e41 	andmi	r0, r8, r1, asr #28
 104:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 108:	100e4101 	andne	r4, lr, r1, lsl #2
 10c:	00070d41 	andeq	r0, r7, r1, asr #26
 110:	0000001c 	andeq	r0, r0, ip, lsl r0
 114:	00000000 	andeq	r0, r0, r0
 118:	200002ec 	andcs	r0, r0, ip, ror #5
 11c:	00000046 	andeq	r0, r0, r6, asr #32
 120:	40080e41 	andmi	r0, r8, r1, asr #28
 124:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 128:	100e4101 	andne	r4, lr, r1, lsl #2
 12c:	00070d41 	andeq	r0, r7, r1, asr #26
 130:	0000001c 	andeq	r0, r0, ip, lsl r0
 134:	00000000 	andeq	r0, r0, r0
 138:	20000332 	andcs	r0, r0, r2, lsr r3
 13c:	00000066 	andeq	r0, r0, r6, rrx
 140:	40080e41 	andmi	r0, r8, r1, asr #28
 144:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 148:	100e4101 	andne	r4, lr, r1, lsl #2
 14c:	00070d41 	andeq	r0, r7, r1, asr #26
 150:	00000018 	andeq	r0, r0, r8, lsl r0
 154:	00000000 	andeq	r0, r0, r0
 158:	20000398 	mulcs	r0, r8, r3
 15c:	0000005c 	andeq	r0, r0, ip, asr r0
 160:	40080e41 	andmi	r0, r8, r1, asr #28
 164:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 168:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 16c:	00000024 	andeq	r0, r0, r4, lsr #32
 170:	00000000 	andeq	r0, r0, r0
 174:	200003f4 	strdcs	r0, [r0], -r4
 178:	00000140 	andeq	r0, r0, r0, asr #2
 17c:	40100e41 	andsmi	r0, r0, r1, asr #28
 180:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 184:	02874003 	addeq	r4, r7, #3
 188:	41018e40 	tstmi	r1, r0, asr #28
 18c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 190:	00000007 	andeq	r0, r0, r7
 194:	0000000c 	andeq	r0, r0, ip
 198:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 19c:	7c020001 	stcvc	0, cr0, [r2], {1}
 1a0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 1a4:	0000000c 	andeq	r0, r0, ip
 1a8:	00000194 	muleq	r0, r4, r1
 1ac:	20000000 	andcs	r0, r0, r0
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000194 	muleq	r0, r4, r1
 1bc:	20000534 	andcs	r0, r0, r4, lsr r5
 1c0:	00000020 	andeq	r0, r0, r0, lsr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000194 	muleq	r0, r4, r1
 1dc:	20000554 	andcs	r0, r0, r4, asr r5
 1e0:	00000052 	andeq	r0, r0, r2, asr r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000194 	muleq	r0, r4, r1
 1fc:	200005a6 	andcs	r0, r0, r6, lsr #11
 200:	00000052 	andeq	r0, r0, r2, asr r0
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	180e4101 	stmdane	lr, {r0, r8, lr}
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	00000194 	muleq	r0, r4, r1
 21c:	200005f8 	strdcs	r0, [r0], -r8
 220:	00000104 	andeq	r0, r0, r4, lsl #2
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	180e4101 	stmdane	lr, {r0, r8, lr}
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	00000194 	muleq	r0, r4, r1
 23c:	200006fc 	strdcs	r0, [r0], -ip
 240:	00000044 	andeq	r0, r0, r4, asr #32
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 250:	00000018 	andeq	r0, r0, r8, lsl r0
 254:	00000194 	muleq	r0, r4, r1
 258:	20000740 	andcs	r0, r0, r0, asr #14
 25c:	00000012 	andeq	r0, r0, r2, lsl r0
 260:	40080e41 	andmi	r0, r8, r1, asr #28
 264:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 268:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 26c:	0000001c 	andeq	r0, r0, ip, lsl r0
 270:	00000194 	muleq	r0, r4, r1
 274:	20000752 	andcs	r0, r0, r2, asr r7
 278:	0000002c 	andeq	r0, r0, ip, lsr #32
 27c:	40080e41 	andmi	r0, r8, r1, asr #28
 280:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 284:	100e4101 	andne	r4, lr, r1, lsl #2
 288:	00070d41 	andeq	r0, r7, r1, asr #26
 28c:	0000001c 	andeq	r0, r0, ip, lsl r0
 290:	00000194 	muleq	r0, r4, r1
 294:	2000077e 	andcs	r0, r0, lr, ror r7
 298:	00000022 	andeq	r0, r0, r2, lsr #32
 29c:	40080e41 	andmi	r0, r8, r1, asr #28
 2a0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2a4:	100e4101 	andne	r4, lr, r1, lsl #2
 2a8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ac:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b0:	00000194 	muleq	r0, r4, r1
 2b4:	200007a0 	andcs	r0, r0, r0, lsr #15
 2b8:	00000054 	andeq	r0, r0, r4, asr r0
 2bc:	40080e41 	andmi	r0, r8, r1, asr #28
 2c0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2c4:	100e4101 	andne	r4, lr, r1, lsl #2
 2c8:	00070d41 	andeq	r0, r7, r1, asr #26
 2cc:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d0:	00000194 	muleq	r0, r4, r1
 2d4:	200007f4 	strdcs	r0, [r0], -r4
 2d8:	00000054 	andeq	r0, r0, r4, asr r0
 2dc:	40080e41 	andmi	r0, r8, r1, asr #28
 2e0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2e4:	100e4101 	andne	r4, lr, r1, lsl #2
 2e8:	00070d41 	andeq	r0, r7, r1, asr #26
 2ec:	00000020 	andeq	r0, r0, r0, lsr #32
 2f0:	00000194 	muleq	r0, r4, r1
 2f4:	20000848 	andcs	r0, r0, r8, asr #16
 2f8:	00000068 	andeq	r0, r0, r8, rrx
 2fc:	400c0e41 	andmi	r0, ip, r1, asr #28
 300:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 304:	018e4002 	orreq	r4, lr, r2
 308:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 30c:	0000070d 	andeq	r0, r0, sp, lsl #14
 310:	00000018 	andeq	r0, r0, r8, lsl r0
 314:	00000194 	muleq	r0, r4, r1
 318:	200008b0 			; <UNDEFINED> instruction: 0x200008b0
 31c:	00000048 	andeq	r0, r0, r8, asr #32
 320:	40080e41 	andmi	r0, r8, r1, asr #28
 324:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 328:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 32c:	0000001c 	andeq	r0, r0, ip, lsl r0
 330:	00000194 	muleq	r0, r4, r1
 334:	200008f8 	strdcs	r0, [r0], -r8
 338:	0000008c 	andeq	r0, r0, ip, lsl #1
 33c:	40080e41 	andmi	r0, r8, r1, asr #28
 340:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 344:	100e4101 	andne	r4, lr, r1, lsl #2
 348:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000534 	andcs	r0, r0, r4, lsr r5
   4:	20000984 	andcs	r0, r0, r4, lsl #19
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
