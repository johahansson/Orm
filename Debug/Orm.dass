
./Debug/Orm.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbd8 	bl	200007b8 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
	void (*clear)(struct tObj*);
	void (*move)(struct tObj*);
	void (*set_speed)(struct tObj*, int, int);
} OBJECT, *POBJECT;

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o) {
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e017      	b.n	2000006e <draw_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 1);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	0018      	movs	r0, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	681a      	ldr	r2, [r3, #0]
20000054:	68fb      	ldr	r3, [r7, #12]
20000056:	3304      	adds	r3, #4
20000058:	005b      	lsls	r3, r3, #1
2000005a:	18d3      	adds	r3, r2, r3
2000005c:	3305      	adds	r3, #5
2000005e:	781b      	ldrb	r3, [r3, #0]
20000060:	2201      	movs	r2, #1
20000062:	0019      	movs	r1, r3
20000064:	f000 faaa 	bl	200005bc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
20000068:	68fb      	ldr	r3, [r7, #12]
2000006a:	3301      	adds	r3, #1
2000006c:	60fb      	str	r3, [r7, #12]
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	681b      	ldr	r3, [r3, #0]
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	68fa      	ldr	r2, [r7, #12]
20000076:	429a      	cmp	r2, r3
20000078:	dbe1      	blt.n	2000003e <draw_object+0xe>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46bd      	mov	sp, r7
2000007e:	b004      	add	sp, #16
20000080:	bd80      	pop	{r7, pc}

20000082 <clear_object>:

void clear_object(POBJECT o) {
20000082:	b580      	push	{r7, lr}
20000084:	b084      	sub	sp, #16
20000086:	af00      	add	r7, sp, #0
20000088:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
2000008a:	2300      	movs	r3, #0
2000008c:	60fb      	str	r3, [r7, #12]
2000008e:	e017      	b.n	200000c0 <clear_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 0);
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	681a      	ldr	r2, [r3, #0]
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	3304      	adds	r3, #4
20000098:	005b      	lsls	r3, r3, #1
2000009a:	18d3      	adds	r3, r2, r3
2000009c:	3304      	adds	r3, #4
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	0018      	movs	r0, r3
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	681a      	ldr	r2, [r3, #0]
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	3304      	adds	r3, #4
200000aa:	005b      	lsls	r3, r3, #1
200000ac:	18d3      	adds	r3, r2, r3
200000ae:	3305      	adds	r3, #5
200000b0:	781b      	ldrb	r3, [r3, #0]
200000b2:	2200      	movs	r2, #0
200000b4:	0019      	movs	r1, r3
200000b6:	f000 fa81 	bl	200005bc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
200000ba:	68fb      	ldr	r3, [r7, #12]
200000bc:	3301      	adds	r3, #1
200000be:	60fb      	str	r3, [r7, #12]
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	681b      	ldr	r3, [r3, #0]
200000c4:	681b      	ldr	r3, [r3, #0]
200000c6:	68fa      	ldr	r2, [r7, #12]
200000c8:	429a      	cmp	r2, r3
200000ca:	dbe1      	blt.n	20000090 <clear_object+0xe>
	}
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	b004      	add	sp, #16
200000d2:	bd80      	pop	{r7, pc}

200000d4 <move_object>:

void move_object(POBJECT o) {
200000d4:	b580      	push	{r7, lr}
200000d6:	b084      	sub	sp, #16
200000d8:	af00      	add	r7, sp, #0
200000da:	6078      	str	r0, [r7, #4]
	clear_object(o);
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	0018      	movs	r0, r3
200000e0:	f7ff ffcf 	bl	20000082 <clear_object>
	
	for(int i = 0; i < o->geo->numpoints; i++) {
200000e4:	2300      	movs	r3, #0
200000e6:	60fb      	str	r3, [r7, #12]
200000e8:	e02e      	b.n	20000148 <move_object+0x74>
		o->geo->px[i].x += o->dirx;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	681a      	ldr	r2, [r3, #0]
200000ee:	68fb      	ldr	r3, [r7, #12]
200000f0:	3304      	adds	r3, #4
200000f2:	005b      	lsls	r3, r3, #1
200000f4:	18d3      	adds	r3, r2, r3
200000f6:	3304      	adds	r3, #4
200000f8:	7818      	ldrb	r0, [r3, #0]
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	685b      	ldr	r3, [r3, #4]
200000fe:	b2d9      	uxtb	r1, r3
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	681a      	ldr	r2, [r3, #0]
20000104:	1843      	adds	r3, r0, r1
20000106:	b2d9      	uxtb	r1, r3
20000108:	68fb      	ldr	r3, [r7, #12]
2000010a:	3304      	adds	r3, #4
2000010c:	005b      	lsls	r3, r3, #1
2000010e:	18d3      	adds	r3, r2, r3
20000110:	3304      	adds	r3, #4
20000112:	1c0a      	adds	r2, r1, #0
20000114:	701a      	strb	r2, [r3, #0]
		o->geo->px[i].y += o->diry;
20000116:	687b      	ldr	r3, [r7, #4]
20000118:	681a      	ldr	r2, [r3, #0]
2000011a:	68fb      	ldr	r3, [r7, #12]
2000011c:	3304      	adds	r3, #4
2000011e:	005b      	lsls	r3, r3, #1
20000120:	18d3      	adds	r3, r2, r3
20000122:	3305      	adds	r3, #5
20000124:	7818      	ldrb	r0, [r3, #0]
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	689b      	ldr	r3, [r3, #8]
2000012a:	b2d9      	uxtb	r1, r3
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	681a      	ldr	r2, [r3, #0]
20000130:	1843      	adds	r3, r0, r1
20000132:	b2d9      	uxtb	r1, r3
20000134:	68fb      	ldr	r3, [r7, #12]
20000136:	3304      	adds	r3, #4
20000138:	005b      	lsls	r3, r3, #1
2000013a:	18d3      	adds	r3, r2, r3
2000013c:	3305      	adds	r3, #5
2000013e:	1c0a      	adds	r2, r1, #0
20000140:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000142:	68fb      	ldr	r3, [r7, #12]
20000144:	3301      	adds	r3, #1
20000146:	60fb      	str	r3, [r7, #12]
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	681b      	ldr	r3, [r3, #0]
2000014c:	681b      	ldr	r3, [r3, #0]
2000014e:	68fa      	ldr	r2, [r7, #12]
20000150:	429a      	cmp	r2, r3
20000152:	dbca      	blt.n	200000ea <move_object+0x16>
	}
	o->posx += o->dirx;
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	68da      	ldr	r2, [r3, #12]
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	685b      	ldr	r3, [r3, #4]
2000015c:	18d2      	adds	r2, r2, r3
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	691a      	ldr	r2, [r3, #16]
20000166:	687b      	ldr	r3, [r7, #4]
20000168:	689b      	ldr	r3, [r3, #8]
2000016a:	18d2      	adds	r2, r2, r3
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1)
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	68db      	ldr	r3, [r3, #12]
20000174:	2b00      	cmp	r3, #0
20000176:	dc04      	bgt.n	20000182 <move_object+0xae>
		o->dirx *= -1;
20000178:	687b      	ldr	r3, [r7, #4]
2000017a:	685b      	ldr	r3, [r3, #4]
2000017c:	425a      	negs	r2, r3
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	605a      	str	r2, [r3, #4]
	if((o->posx + o->geo->sizex) > 128)
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	68da      	ldr	r2, [r3, #12]
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	681b      	ldr	r3, [r3, #0]
2000018a:	685b      	ldr	r3, [r3, #4]
2000018c:	18d3      	adds	r3, r2, r3
2000018e:	2b80      	cmp	r3, #128	; 0x80
20000190:	dd04      	ble.n	2000019c <move_object+0xc8>
		o->dirx *= -1;
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	685b      	ldr	r3, [r3, #4]
20000196:	425a      	negs	r2, r3
20000198:	687b      	ldr	r3, [r7, #4]
2000019a:	605a      	str	r2, [r3, #4]
	if(o->posy < 1)
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	691b      	ldr	r3, [r3, #16]
200001a0:	2b00      	cmp	r3, #0
200001a2:	dc04      	bgt.n	200001ae <move_object+0xda>
		o->diry *= -1;
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	689b      	ldr	r3, [r3, #8]
200001a8:	425a      	negs	r2, r3
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	609a      	str	r2, [r3, #8]
	if((o->posy + o->geo->sizey) > 64)
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	691a      	ldr	r2, [r3, #16]
200001b2:	687b      	ldr	r3, [r7, #4]
200001b4:	681b      	ldr	r3, [r3, #0]
200001b6:	689b      	ldr	r3, [r3, #8]
200001b8:	18d3      	adds	r3, r2, r3
200001ba:	2b40      	cmp	r3, #64	; 0x40
200001bc:	dd04      	ble.n	200001c8 <move_object+0xf4>
		o->diry *= -1;
200001be:	687b      	ldr	r3, [r7, #4]
200001c0:	689b      	ldr	r3, [r3, #8]
200001c2:	425a      	negs	r2, r3
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	609a      	str	r2, [r3, #8]
		
	draw_object(o);
200001c8:	687b      	ldr	r3, [r7, #4]
200001ca:	0018      	movs	r0, r3
200001cc:	f7ff ff30 	bl	20000030 <draw_object>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b004      	add	sp, #16
200001d6:	bd80      	pop	{r7, pc}

200001d8 <graphic_ctrl_bit_set>:

static void graphic_ctrl_bit_set(uint8_t x) {
200001d8:	b580      	push	{r7, lr}
200001da:	b084      	sub	sp, #16
200001dc:	af00      	add	r7, sp, #0
200001de:	0002      	movs	r2, r0
200001e0:	1dfb      	adds	r3, r7, #7
200001e2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
200001e4:	4a0f      	ldr	r2, [pc, #60]	; (20000224 <graphic_ctrl_bit_set+0x4c>)
200001e6:	200f      	movs	r0, #15
200001e8:	183b      	adds	r3, r7, r0
200001ea:	7d12      	ldrb	r2, [r2, #20]
200001ec:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200001ee:	183b      	adds	r3, r7, r0
200001f0:	183a      	adds	r2, r7, r0
200001f2:	7812      	ldrb	r2, [r2, #0]
200001f4:	2104      	movs	r1, #4
200001f6:	438a      	bics	r2, r1
200001f8:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
200001fa:	1dfb      	adds	r3, r7, #7
200001fc:	781b      	ldrb	r3, [r3, #0]
200001fe:	b25b      	sxtb	r3, r3
20000200:	2204      	movs	r2, #4
20000202:	4393      	bics	r3, r2
20000204:	b25a      	sxtb	r2, r3
20000206:	183b      	adds	r3, r7, r0
20000208:	781b      	ldrb	r3, [r3, #0]
2000020a:	b25b      	sxtb	r3, r3
2000020c:	4313      	orrs	r3, r2
2000020e:	b25a      	sxtb	r2, r3
20000210:	183b      	adds	r3, r7, r0
20000212:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000214:	4a03      	ldr	r2, [pc, #12]	; (20000224 <graphic_ctrl_bit_set+0x4c>)
20000216:	183b      	adds	r3, r7, r0
20000218:	781b      	ldrb	r3, [r3, #0]
2000021a:	7513      	strb	r3, [r2, #20]
}
2000021c:	46c0      	nop			; (mov r8, r8)
2000021e:	46bd      	mov	sp, r7
20000220:	b004      	add	sp, #16
20000222:	bd80      	pop	{r7, pc}
20000224:	40021000 	andmi	r1, r2, r0

20000228 <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
20000228:	b580      	push	{r7, lr}
2000022a:	b084      	sub	sp, #16
2000022c:	af00      	add	r7, sp, #0
2000022e:	0002      	movs	r2, r0
20000230:	1dfb      	adds	r3, r7, #7
20000232:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
20000234:	4a0f      	ldr	r2, [pc, #60]	; (20000274 <graphic_ctrl_bit_clear+0x4c>)
20000236:	200f      	movs	r0, #15
20000238:	183b      	adds	r3, r7, r0
2000023a:	7d12      	ldrb	r2, [r2, #20]
2000023c:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
2000023e:	183b      	adds	r3, r7, r0
20000240:	183a      	adds	r2, r7, r0
20000242:	7812      	ldrb	r2, [r2, #0]
20000244:	2104      	movs	r1, #4
20000246:	438a      	bics	r2, r1
20000248:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000024a:	1dfb      	adds	r3, r7, #7
2000024c:	781b      	ldrb	r3, [r3, #0]
2000024e:	b25b      	sxtb	r3, r3
20000250:	43db      	mvns	r3, r3
20000252:	b25b      	sxtb	r3, r3
20000254:	183a      	adds	r2, r7, r0
20000256:	7812      	ldrb	r2, [r2, #0]
20000258:	b252      	sxtb	r2, r2
2000025a:	4013      	ands	r3, r2
2000025c:	b25a      	sxtb	r2, r3
2000025e:	183b      	adds	r3, r7, r0
20000260:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000262:	4a04      	ldr	r2, [pc, #16]	; (20000274 <graphic_ctrl_bit_clear+0x4c>)
20000264:	183b      	adds	r3, r7, r0
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	7513      	strb	r3, [r2, #20]
}
2000026a:	46c0      	nop			; (mov r8, r8)
2000026c:	46bd      	mov	sp, r7
2000026e:	b004      	add	sp, #16
20000270:	bd80      	pop	{r7, pc}
20000272:	46c0      	nop			; (mov r8, r8)
20000274:	40021000 	andmi	r1, r2, r0

20000278 <select_controller>:

static void select_controller(uint8_t controller) {
20000278:	b580      	push	{r7, lr}
2000027a:	b082      	sub	sp, #8
2000027c:	af00      	add	r7, sp, #0
2000027e:	0002      	movs	r2, r0
20000280:	1dfb      	adds	r3, r7, #7
20000282:	701a      	strb	r2, [r3, #0]
	switch(controller) {
20000284:	1dfb      	adds	r3, r7, #7
20000286:	781b      	ldrb	r3, [r3, #0]
20000288:	2b08      	cmp	r3, #8
2000028a:	d00c      	beq.n	200002a6 <select_controller+0x2e>
2000028c:	dc02      	bgt.n	20000294 <select_controller+0x1c>
2000028e:	2b00      	cmp	r3, #0
20000290:	d005      	beq.n	2000029e <select_controller+0x26>
			break;
		case B_CS1|B_CS2:
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
20000292:	e01a      	b.n	200002ca <select_controller+0x52>
	switch(controller) {
20000294:	2b10      	cmp	r3, #16
20000296:	d00d      	beq.n	200002b4 <select_controller+0x3c>
20000298:	2b18      	cmp	r3, #24
2000029a:	d012      	beq.n	200002c2 <select_controller+0x4a>
}
2000029c:	e015      	b.n	200002ca <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
2000029e:	2018      	movs	r0, #24
200002a0:	f7ff ffc2 	bl	20000228 <graphic_ctrl_bit_clear>
			break;
200002a4:	e011      	b.n	200002ca <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200002a6:	2008      	movs	r0, #8
200002a8:	f7ff ff96 	bl	200001d8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200002ac:	2010      	movs	r0, #16
200002ae:	f7ff ffbb 	bl	20000228 <graphic_ctrl_bit_clear>
			break;
200002b2:	e00a      	b.n	200002ca <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200002b4:	2010      	movs	r0, #16
200002b6:	f7ff ff8f 	bl	200001d8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200002ba:	2008      	movs	r0, #8
200002bc:	f7ff ffb4 	bl	20000228 <graphic_ctrl_bit_clear>
			break;
200002c0:	e003      	b.n	200002ca <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200002c2:	2018      	movs	r0, #24
200002c4:	f7ff ff88 	bl	200001d8 <graphic_ctrl_bit_set>
			break;
200002c8:	46c0      	nop			; (mov r8, r8)
}
200002ca:	46c0      	nop			; (mov r8, r8)
200002cc:	46bd      	mov	sp, r7
200002ce:	b002      	add	sp, #8
200002d0:	bd80      	pop	{r7, pc}

200002d2 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
200002d2:	b580      	push	{r7, lr}
200002d4:	b082      	sub	sp, #8
200002d6:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200002d8:	2040      	movs	r0, #64	; 0x40
200002da:	f7ff ffa5 	bl	20000228 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;		// 15-8 inputs, 7-0 outputs
200002de:	4b14      	ldr	r3, [pc, #80]	; (20000330 <graphic_wait_ready+0x5e>)
200002e0:	4a14      	ldr	r2, [pc, #80]	; (20000334 <graphic_wait_ready+0x62>)
200002e2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200002e4:	2001      	movs	r0, #1
200002e6:	f7ff ff9f 	bl	20000228 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200002ea:	2002      	movs	r0, #2
200002ec:	f7ff ff74 	bl	200001d8 <graphic_ctrl_bit_set>
	delay_500ns();
200002f0:	f000 fa26 	bl	20000740 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
200002f4:	2040      	movs	r0, #64	; 0x40
200002f6:	f7ff ff6f 	bl	200001d8 <graphic_ctrl_bit_set>
		delay_500ns();
200002fa:	f000 fa21 	bl	20000740 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
200002fe:	4b0c      	ldr	r3, [pc, #48]	; (20000330 <graphic_wait_ready+0x5e>)
20000300:	7c5b      	ldrb	r3, [r3, #17]
20000302:	b2da      	uxtb	r2, r3
20000304:	1dfb      	adds	r3, r7, #7
20000306:	217f      	movs	r1, #127	; 0x7f
20000308:	438a      	bics	r2, r1
2000030a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000030c:	2040      	movs	r0, #64	; 0x40
2000030e:	f7ff ff8b 	bl	20000228 <graphic_ctrl_bit_clear>
		delay_500ns();
20000312:	f000 fa15 	bl	20000740 <delay_500ns>
		if(c == 0) break;
20000316:	1dfb      	adds	r3, r7, #7
20000318:	781b      	ldrb	r3, [r3, #0]
2000031a:	2b00      	cmp	r3, #0
2000031c:	d000      	beq.n	20000320 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000031e:	e7e9      	b.n	200002f4 <graphic_wait_ready+0x22>
		if(c == 0) break;
20000320:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
20000322:	4b03      	ldr	r3, [pc, #12]	; (20000330 <graphic_wait_ready+0x5e>)
20000324:	4a04      	ldr	r2, [pc, #16]	; (20000338 <graphic_wait_ready+0x66>)
20000326:	601a      	str	r2, [r3, #0]
}
20000328:	46c0      	nop			; (mov r8, r8)
2000032a:	46bd      	mov	sp, r7
2000032c:	b002      	add	sp, #8
2000032e:	bd80      	pop	{r7, pc}
20000330:	40021000 	andmi	r1, r2, r0
20000334:	00005555 	andeq	r5, r0, r5, asr r5
20000338:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000033c <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
2000033c:	b580      	push	{r7, lr}
2000033e:	b084      	sub	sp, #16
20000340:	af00      	add	r7, sp, #0
20000342:	0002      	movs	r2, r0
20000344:	1dfb      	adds	r3, r7, #7
20000346:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000348:	2040      	movs	r0, #64	; 0x40
2000034a:	f7ff ff6d 	bl	20000228 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;	// 15-8 inputs, 7-0 outputs
2000034e:	4b1c      	ldr	r3, [pc, #112]	; (200003c0 <graphic_read+0x84>)
20000350:	4a1c      	ldr	r2, [pc, #112]	; (200003c4 <graphic_read+0x88>)
20000352:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000354:	2003      	movs	r0, #3
20000356:	f7ff ff3f 	bl	200001d8 <graphic_ctrl_bit_set>
	select_controller(controller);
2000035a:	1dfb      	adds	r3, r7, #7
2000035c:	781b      	ldrb	r3, [r3, #0]
2000035e:	0018      	movs	r0, r3
20000360:	f7ff ff8a 	bl	20000278 <select_controller>
	delay_500ns();
20000364:	f000 f9ec 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000368:	2040      	movs	r0, #64	; 0x40
2000036a:	f7ff ff35 	bl	200001d8 <graphic_ctrl_bit_set>
	delay_500ns();
2000036e:	f000 f9e7 	bl	20000740 <delay_500ns>
	c = GPIO_E->idrHigh;
20000372:	4a13      	ldr	r2, [pc, #76]	; (200003c0 <graphic_read+0x84>)
20000374:	230f      	movs	r3, #15
20000376:	18fb      	adds	r3, r7, r3
20000378:	7c52      	ldrb	r2, [r2, #17]
2000037a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000037c:	2040      	movs	r0, #64	; 0x40
2000037e:	f7ff ff53 	bl	20000228 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
20000382:	4b0f      	ldr	r3, [pc, #60]	; (200003c0 <graphic_read+0x84>)
20000384:	4a10      	ldr	r2, [pc, #64]	; (200003c8 <graphic_read+0x8c>)
20000386:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1) {
20000388:	1dfb      	adds	r3, r7, #7
2000038a:	781b      	ldrb	r3, [r3, #0]
2000038c:	2208      	movs	r2, #8
2000038e:	4013      	ands	r3, r2
20000390:	d004      	beq.n	2000039c <graphic_read+0x60>
		select_controller(B_CS1);
20000392:	2008      	movs	r0, #8
20000394:	f7ff ff70 	bl	20000278 <select_controller>
		graphic_wait_ready();
20000398:	f7ff ff9b 	bl	200002d2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000039c:	1dfb      	adds	r3, r7, #7
2000039e:	781b      	ldrb	r3, [r3, #0]
200003a0:	2210      	movs	r2, #16
200003a2:	4013      	ands	r3, r2
200003a4:	d004      	beq.n	200003b0 <graphic_read+0x74>
		select_controller(B_CS2);
200003a6:	2010      	movs	r0, #16
200003a8:	f7ff ff66 	bl	20000278 <select_controller>
		graphic_wait_ready();
200003ac:	f7ff ff91 	bl	200002d2 <graphic_wait_ready>
	}
	return c;
200003b0:	230f      	movs	r3, #15
200003b2:	18fb      	adds	r3, r7, r3
200003b4:	781b      	ldrb	r3, [r3, #0]
}
200003b6:	0018      	movs	r0, r3
200003b8:	46bd      	mov	sp, r7
200003ba:	b004      	add	sp, #16
200003bc:	bd80      	pop	{r7, pc}
200003be:	46c0      	nop			; (mov r8, r8)
200003c0:	40021000 	andmi	r1, r2, r0
200003c4:	00005555 	andeq	r5, r0, r5, asr r5
200003c8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200003cc <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
200003cc:	b580      	push	{r7, lr}
200003ce:	b082      	sub	sp, #8
200003d0:	af00      	add	r7, sp, #0
200003d2:	0002      	movs	r2, r0
200003d4:	1dfb      	adds	r3, r7, #7
200003d6:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200003d8:	1dfb      	adds	r3, r7, #7
200003da:	781b      	ldrb	r3, [r3, #0]
200003dc:	0018      	movs	r0, r3
200003de:	f7ff ffad 	bl	2000033c <graphic_read>
	return graphic_read(controller);
200003e2:	1dfb      	adds	r3, r7, #7
200003e4:	781b      	ldrb	r3, [r3, #0]
200003e6:	0018      	movs	r0, r3
200003e8:	f7ff ffa8 	bl	2000033c <graphic_read>
200003ec:	0003      	movs	r3, r0
}
200003ee:	0018      	movs	r0, r3
200003f0:	46bd      	mov	sp, r7
200003f2:	b002      	add	sp, #8
200003f4:	bd80      	pop	{r7, pc}

200003f6 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
200003f6:	b580      	push	{r7, lr}
200003f8:	b082      	sub	sp, #8
200003fa:	af00      	add	r7, sp, #0
200003fc:	0002      	movs	r2, r0
200003fe:	1dfb      	adds	r3, r7, #7
20000400:	701a      	strb	r2, [r3, #0]
20000402:	1dbb      	adds	r3, r7, #6
20000404:	1c0a      	adds	r2, r1, #0
20000406:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
20000408:	4a19      	ldr	r2, [pc, #100]	; (20000470 <graphic_write+0x7a>)
2000040a:	1dfb      	adds	r3, r7, #7
2000040c:	781b      	ldrb	r3, [r3, #0]
2000040e:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000410:	1dbb      	adds	r3, r7, #6
20000412:	781b      	ldrb	r3, [r3, #0]
20000414:	0018      	movs	r0, r3
20000416:	f7ff ff2f 	bl	20000278 <select_controller>
	delay_500ns();
2000041a:	f000 f991 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000041e:	2040      	movs	r0, #64	; 0x40
20000420:	f7ff feda 	bl	200001d8 <graphic_ctrl_bit_set>
	delay_500ns();
20000424:	f000 f98c 	bl	20000740 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000428:	2040      	movs	r0, #64	; 0x40
2000042a:	f7ff fefd 	bl	20000228 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
2000042e:	1dbb      	adds	r3, r7, #6
20000430:	781b      	ldrb	r3, [r3, #0]
20000432:	2208      	movs	r2, #8
20000434:	4013      	ands	r3, r2
20000436:	d004      	beq.n	20000442 <graphic_write+0x4c>
		select_controller(B_CS1);
20000438:	2008      	movs	r0, #8
2000043a:	f7ff ff1d 	bl	20000278 <select_controller>
		graphic_wait_ready();
2000043e:	f7ff ff48 	bl	200002d2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000442:	1dbb      	adds	r3, r7, #6
20000444:	781b      	ldrb	r3, [r3, #0]
20000446:	2210      	movs	r2, #16
20000448:	4013      	ands	r3, r2
2000044a:	d004      	beq.n	20000456 <graphic_write+0x60>
		select_controller(B_CS2);
2000044c:	2010      	movs	r0, #16
2000044e:	f7ff ff13 	bl	20000278 <select_controller>
		graphic_wait_ready();
20000452:	f7ff ff3e 	bl	200002d2 <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
20000456:	4b06      	ldr	r3, [pc, #24]	; (20000470 <graphic_write+0x7a>)
20000458:	2200      	movs	r2, #0
2000045a:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000045c:	2040      	movs	r0, #64	; 0x40
2000045e:	f7ff febb 	bl	200001d8 <graphic_ctrl_bit_set>
	select_controller(0);
20000462:	2000      	movs	r0, #0
20000464:	f7ff ff08 	bl	20000278 <select_controller>
}
20000468:	46c0      	nop			; (mov r8, r8)
2000046a:	46bd      	mov	sp, r7
2000046c:	b002      	add	sp, #8
2000046e:	bd80      	pop	{r7, pc}
20000470:	40021000 	andmi	r1, r2, r0

20000474 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
20000474:	b580      	push	{r7, lr}
20000476:	b082      	sub	sp, #8
20000478:	af00      	add	r7, sp, #0
2000047a:	0002      	movs	r2, r0
2000047c:	1dfb      	adds	r3, r7, #7
2000047e:	701a      	strb	r2, [r3, #0]
20000480:	1dbb      	adds	r3, r7, #6
20000482:	1c0a      	adds	r2, r1, #0
20000484:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000486:	2040      	movs	r0, #64	; 0x40
20000488:	f7ff fece 	bl	20000228 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000048c:	1dbb      	adds	r3, r7, #6
2000048e:	781b      	ldrb	r3, [r3, #0]
20000490:	0018      	movs	r0, r3
20000492:	f7ff fef1 	bl	20000278 <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
20000496:	2003      	movs	r0, #3
20000498:	f7ff fec6 	bl	20000228 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
2000049c:	1dbb      	adds	r3, r7, #6
2000049e:	781a      	ldrb	r2, [r3, #0]
200004a0:	1dfb      	adds	r3, r7, #7
200004a2:	781b      	ldrb	r3, [r3, #0]
200004a4:	0011      	movs	r1, r2
200004a6:	0018      	movs	r0, r3
200004a8:	f7ff ffa5 	bl	200003f6 <graphic_write>
}
200004ac:	46c0      	nop			; (mov r8, r8)
200004ae:	46bd      	mov	sp, r7
200004b0:	b002      	add	sp, #8
200004b2:	bd80      	pop	{r7, pc}

200004b4 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
200004b4:	b580      	push	{r7, lr}
200004b6:	b082      	sub	sp, #8
200004b8:	af00      	add	r7, sp, #0
200004ba:	0002      	movs	r2, r0
200004bc:	1dfb      	adds	r3, r7, #7
200004be:	701a      	strb	r2, [r3, #0]
200004c0:	1dbb      	adds	r3, r7, #6
200004c2:	1c0a      	adds	r2, r1, #0
200004c4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200004c6:	2040      	movs	r0, #64	; 0x40
200004c8:	f7ff feae 	bl	20000228 <graphic_ctrl_bit_clear>
	select_controller(controller);
200004cc:	1dbb      	adds	r3, r7, #6
200004ce:	781b      	ldrb	r3, [r3, #0]
200004d0:	0018      	movs	r0, r3
200004d2:	f7ff fed1 	bl	20000278 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200004d6:	2001      	movs	r0, #1
200004d8:	f7ff fe7e 	bl	200001d8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200004dc:	2002      	movs	r0, #2
200004de:	f7ff fea3 	bl	20000228 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200004e2:	1dbb      	adds	r3, r7, #6
200004e4:	781a      	ldrb	r2, [r3, #0]
200004e6:	1dfb      	adds	r3, r7, #7
200004e8:	781b      	ldrb	r3, [r3, #0]
200004ea:	0011      	movs	r1, r2
200004ec:	0018      	movs	r0, r3
200004ee:	f7ff ff82 	bl	200003f6 <graphic_write>
}
200004f2:	46c0      	nop			; (mov r8, r8)
200004f4:	46bd      	mov	sp, r7
200004f6:	b002      	add	sp, #8
200004f8:	bd80      	pop	{r7, pc}

200004fa <graphic_clear_screen>:

void graphic_clear_screen(void) {
200004fa:	b580      	push	{r7, lr}
200004fc:	b082      	sub	sp, #8
200004fe:	af00      	add	r7, sp, #0
	uint8_t i, j;
	
	for(j = 0; j < 8; j++) {
20000500:	1dbb      	adds	r3, r7, #6
20000502:	2200      	movs	r2, #0
20000504:	701a      	strb	r2, [r3, #0]
20000506:	e023      	b.n	20000550 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
20000508:	1dbb      	adds	r3, r7, #6
2000050a:	781b      	ldrb	r3, [r3, #0]
2000050c:	2248      	movs	r2, #72	; 0x48
2000050e:	4252      	negs	r2, r2
20000510:	4313      	orrs	r3, r2
20000512:	b2db      	uxtb	r3, r3
20000514:	2118      	movs	r1, #24
20000516:	0018      	movs	r0, r3
20000518:	f7ff ffac 	bl	20000474 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000051c:	2118      	movs	r1, #24
2000051e:	2040      	movs	r0, #64	; 0x40
20000520:	f7ff ffa8 	bl	20000474 <graphic_write_command>
		for(i = 0; i <= 63; i++) {
20000524:	1dfb      	adds	r3, r7, #7
20000526:	2200      	movs	r2, #0
20000528:	701a      	strb	r2, [r3, #0]
2000052a:	e008      	b.n	2000053e <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
2000052c:	2118      	movs	r1, #24
2000052e:	2000      	movs	r0, #0
20000530:	f7ff ffc0 	bl	200004b4 <graphic_write_data>
		for(i = 0; i <= 63; i++) {
20000534:	1dfb      	adds	r3, r7, #7
20000536:	781a      	ldrb	r2, [r3, #0]
20000538:	1dfb      	adds	r3, r7, #7
2000053a:	3201      	adds	r2, #1
2000053c:	701a      	strb	r2, [r3, #0]
2000053e:	1dfb      	adds	r3, r7, #7
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	2b3f      	cmp	r3, #63	; 0x3f
20000544:	d9f2      	bls.n	2000052c <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
20000546:	1dbb      	adds	r3, r7, #6
20000548:	781a      	ldrb	r2, [r3, #0]
2000054a:	1dbb      	adds	r3, r7, #6
2000054c:	3201      	adds	r2, #1
2000054e:	701a      	strb	r2, [r3, #0]
20000550:	1dbb      	adds	r3, r7, #6
20000552:	781b      	ldrb	r3, [r3, #0]
20000554:	2b07      	cmp	r3, #7
20000556:	d9d7      	bls.n	20000508 <graphic_clear_screen+0xe>
		}
	}
}
20000558:	46c0      	nop			; (mov r8, r8)
2000055a:	46bd      	mov	sp, r7
2000055c:	b002      	add	sp, #8
2000055e:	bd80      	pop	{r7, pc}

20000560 <graphic_initialize>:

void graphic_initialize(void) {
20000560:	b580      	push	{r7, lr}
20000562:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000564:	2040      	movs	r0, #64	; 0x40
20000566:	f7ff fe37 	bl	200001d8 <graphic_ctrl_bit_set>
	delay_micro(10);
2000056a:	200a      	movs	r0, #10
2000056c:	f000 f8f1 	bl	20000752 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000570:	2078      	movs	r0, #120	; 0x78
20000572:	f7ff fe59 	bl	20000228 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000576:	201e      	movs	r0, #30
20000578:	f000 f901 	bl	2000077e <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000057c:	2020      	movs	r0, #32
2000057e:	f7ff fe2b 	bl	200001d8 <graphic_ctrl_bit_set>
	delay_milli(100);
20000582:	2064      	movs	r0, #100	; 0x64
20000584:	f000 f8fb 	bl	2000077e <delay_milli>
	graphic_write_command(LCD_OFF,			B_CS1|B_CS2);
20000588:	2118      	movs	r1, #24
2000058a:	203e      	movs	r0, #62	; 0x3e
2000058c:	f7ff ff72 	bl	20000474 <graphic_write_command>
	graphic_write_command(LCD_ON,			B_CS1|B_CS2);
20000590:	2118      	movs	r1, #24
20000592:	203f      	movs	r0, #63	; 0x3f
20000594:	f7ff ff6e 	bl	20000474 <graphic_write_command>
	graphic_write_command(LCD_DISP_START,	B_CS1|B_CS2);
20000598:	2118      	movs	r1, #24
2000059a:	20c0      	movs	r0, #192	; 0xc0
2000059c:	f7ff ff6a 	bl	20000474 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,		B_CS1|B_CS2);
200005a0:	2118      	movs	r1, #24
200005a2:	2040      	movs	r0, #64	; 0x40
200005a4:	f7ff ff66 	bl	20000474 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,		B_CS1|B_CS2);
200005a8:	2118      	movs	r1, #24
200005aa:	20b8      	movs	r0, #184	; 0xb8
200005ac:	f7ff ff62 	bl	20000474 <graphic_write_command>
	select_controller(0);
200005b0:	2000      	movs	r0, #0
200005b2:	f7ff fe61 	bl	20000278 <select_controller>
}
200005b6:	46c0      	nop			; (mov r8, r8)
200005b8:	46bd      	mov	sp, r7
200005ba:	bd80      	pop	{r7, pc}

200005bc <pixel>:

void pixel(int x, int y, int set) {
200005bc:	b5b0      	push	{r4, r5, r7, lr}
200005be:	b088      	sub	sp, #32
200005c0:	af00      	add	r7, sp, #0
200005c2:	60f8      	str	r0, [r7, #12]
200005c4:	60b9      	str	r1, [r7, #8]
200005c6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200005c8:	68fb      	ldr	r3, [r7, #12]
200005ca:	2b00      	cmp	r3, #0
200005cc:	dc00      	bgt.n	200005d0 <pixel+0x14>
200005ce:	e08e      	b.n	200006ee <pixel+0x132>
200005d0:	68bb      	ldr	r3, [r7, #8]
200005d2:	2b00      	cmp	r3, #0
200005d4:	dc00      	bgt.n	200005d8 <pixel+0x1c>
200005d6:	e08a      	b.n	200006ee <pixel+0x132>
200005d8:	68fb      	ldr	r3, [r7, #12]
200005da:	2b80      	cmp	r3, #128	; 0x80
200005dc:	dd00      	ble.n	200005e0 <pixel+0x24>
200005de:	e086      	b.n	200006ee <pixel+0x132>
200005e0:	68bb      	ldr	r3, [r7, #8]
200005e2:	2b40      	cmp	r3, #64	; 0x40
200005e4:	dd00      	ble.n	200005e8 <pixel+0x2c>
200005e6:	e082      	b.n	200006ee <pixel+0x132>
	
	index = (y-1)/8;
200005e8:	68bb      	ldr	r3, [r7, #8]
200005ea:	3b01      	subs	r3, #1
200005ec:	2b00      	cmp	r3, #0
200005ee:	da00      	bge.n	200005f2 <pixel+0x36>
200005f0:	3307      	adds	r3, #7
200005f2:	10db      	asrs	r3, r3, #3
200005f4:	61bb      	str	r3, [r7, #24]
	mask = 1 << ((y - 1) % 8);
200005f6:	68bb      	ldr	r3, [r7, #8]
200005f8:	3b01      	subs	r3, #1
200005fa:	4a3f      	ldr	r2, [pc, #252]	; (200006f8 <pixel+0x13c>)
200005fc:	4013      	ands	r3, r2
200005fe:	d504      	bpl.n	2000060a <pixel+0x4e>
20000600:	3b01      	subs	r3, #1
20000602:	2208      	movs	r2, #8
20000604:	4252      	negs	r2, r2
20000606:	4313      	orrs	r3, r2
20000608:	3301      	adds	r3, #1
2000060a:	001a      	movs	r2, r3
2000060c:	2301      	movs	r3, #1
2000060e:	4093      	lsls	r3, r2
20000610:	001a      	movs	r2, r3
20000612:	231f      	movs	r3, #31
20000614:	18fb      	adds	r3, r7, r3
20000616:	701a      	strb	r2, [r3, #0]
	
	if(set == 0)
20000618:	687b      	ldr	r3, [r7, #4]
2000061a:	2b00      	cmp	r3, #0
2000061c:	d105      	bne.n	2000062a <pixel+0x6e>
		mask = ~mask;
2000061e:	221f      	movs	r2, #31
20000620:	18bb      	adds	r3, r7, r2
20000622:	18ba      	adds	r2, r7, r2
20000624:	7812      	ldrb	r2, [r2, #0]
20000626:	43d2      	mvns	r2, r2
20000628:	701a      	strb	r2, [r3, #0]
		
	if(x > 64) {
2000062a:	68fb      	ldr	r3, [r7, #12]
2000062c:	2b40      	cmp	r3, #64	; 0x40
2000062e:	dd07      	ble.n	20000640 <pixel+0x84>
		controller = B_CS2;
20000630:	231e      	movs	r3, #30
20000632:	18fb      	adds	r3, r7, r3
20000634:	2210      	movs	r2, #16
20000636:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000638:	68fb      	ldr	r3, [r7, #12]
2000063a:	3b41      	subs	r3, #65	; 0x41
2000063c:	60fb      	str	r3, [r7, #12]
2000063e:	e006      	b.n	2000064e <pixel+0x92>
	} else {
		controller = B_CS1;
20000640:	231e      	movs	r3, #30
20000642:	18fb      	adds	r3, r7, r3
20000644:	2208      	movs	r2, #8
20000646:	701a      	strb	r2, [r3, #0]
		x = x - 1;
20000648:	68fb      	ldr	r3, [r7, #12]
2000064a:	3b01      	subs	r3, #1
2000064c:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD	| x, controller);
2000064e:	68fb      	ldr	r3, [r7, #12]
20000650:	b25b      	sxtb	r3, r3
20000652:	2240      	movs	r2, #64	; 0x40
20000654:	4313      	orrs	r3, r2
20000656:	b25b      	sxtb	r3, r3
20000658:	b2da      	uxtb	r2, r3
2000065a:	251e      	movs	r5, #30
2000065c:	197b      	adds	r3, r7, r5
2000065e:	781b      	ldrb	r3, [r3, #0]
20000660:	0019      	movs	r1, r3
20000662:	0010      	movs	r0, r2
20000664:	f7ff ff06 	bl	20000474 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE	| index, controller);
20000668:	69bb      	ldr	r3, [r7, #24]
2000066a:	b25b      	sxtb	r3, r3
2000066c:	2248      	movs	r2, #72	; 0x48
2000066e:	4252      	negs	r2, r2
20000670:	4313      	orrs	r3, r2
20000672:	b25b      	sxtb	r3, r3
20000674:	b2da      	uxtb	r2, r3
20000676:	197b      	adds	r3, r7, r5
20000678:	781b      	ldrb	r3, [r3, #0]
2000067a:	0019      	movs	r1, r3
2000067c:	0010      	movs	r0, r2
2000067e:	f7ff fef9 	bl	20000474 <graphic_write_command>
	c = graphic_read_data(controller);
20000682:	2317      	movs	r3, #23
20000684:	18fc      	adds	r4, r7, r3
20000686:	197b      	adds	r3, r7, r5
20000688:	781b      	ldrb	r3, [r3, #0]
2000068a:	0018      	movs	r0, r3
2000068c:	f7ff fe9e 	bl	200003cc <graphic_read_data>
20000690:	0003      	movs	r3, r0
20000692:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD	| x, controller);
20000694:	68fb      	ldr	r3, [r7, #12]
20000696:	b25b      	sxtb	r3, r3
20000698:	2240      	movs	r2, #64	; 0x40
2000069a:	4313      	orrs	r3, r2
2000069c:	b25b      	sxtb	r3, r3
2000069e:	b2da      	uxtb	r2, r3
200006a0:	197b      	adds	r3, r7, r5
200006a2:	781b      	ldrb	r3, [r3, #0]
200006a4:	0019      	movs	r1, r3
200006a6:	0010      	movs	r0, r2
200006a8:	f7ff fee4 	bl	20000474 <graphic_write_command>
	
	if(set)
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	2b00      	cmp	r3, #0
200006b0:	d009      	beq.n	200006c6 <pixel+0x10a>
		mask = mask | c;
200006b2:	221f      	movs	r2, #31
200006b4:	18bb      	adds	r3, r7, r2
200006b6:	18b9      	adds	r1, r7, r2
200006b8:	2217      	movs	r2, #23
200006ba:	18ba      	adds	r2, r7, r2
200006bc:	7809      	ldrb	r1, [r1, #0]
200006be:	7812      	ldrb	r2, [r2, #0]
200006c0:	430a      	orrs	r2, r1
200006c2:	701a      	strb	r2, [r3, #0]
200006c4:	e008      	b.n	200006d8 <pixel+0x11c>
	else
		mask = mask & c;
200006c6:	221f      	movs	r2, #31
200006c8:	18bb      	adds	r3, r7, r2
200006ca:	18ba      	adds	r2, r7, r2
200006cc:	2117      	movs	r1, #23
200006ce:	1879      	adds	r1, r7, r1
200006d0:	7812      	ldrb	r2, [r2, #0]
200006d2:	7809      	ldrb	r1, [r1, #0]
200006d4:	400a      	ands	r2, r1
200006d6:	701a      	strb	r2, [r3, #0]
		
	graphic_write_data(mask, controller);
200006d8:	231e      	movs	r3, #30
200006da:	18fb      	adds	r3, r7, r3
200006dc:	781a      	ldrb	r2, [r3, #0]
200006de:	231f      	movs	r3, #31
200006e0:	18fb      	adds	r3, r7, r3
200006e2:	781b      	ldrb	r3, [r3, #0]
200006e4:	0011      	movs	r1, r2
200006e6:	0018      	movs	r0, r3
200006e8:	f7ff fee4 	bl	200004b4 <graphic_write_data>
200006ec:	e000      	b.n	200006f0 <pixel+0x134>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200006ee:	46c0      	nop			; (mov r8, r8)
}
200006f0:	46bd      	mov	sp, r7
200006f2:	b008      	add	sp, #32
200006f4:	bdb0      	pop	{r4, r5, r7, pc}
200006f6:	46c0      	nop			; (mov r8, r8)
200006f8:	80000007 	andhi	r0, r0, r7

200006fc <delay_250ns>:

void delay_250ns(void) {
200006fc:	b580      	push	{r7, lr}
200006fe:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;				// clear SysTik
20000700:	4b0c      	ldr	r3, [pc, #48]	; (20000734 <delay_250ns+0x38>)
20000702:	2200      	movs	r2, #0
20000704:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41;				// initialize with 42 cycles
20000706:	4b0c      	ldr	r3, [pc, #48]	; (20000738 <delay_250ns+0x3c>)
20000708:	2229      	movs	r2, #41	; 0x29
2000070a:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;				// clear countregister
2000070c:	4b0b      	ldr	r3, [pc, #44]	; (2000073c <delay_250ns+0x40>)
2000070e:	2200      	movs	r2, #0
20000710:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;				// reset counter
20000712:	4b08      	ldr	r3, [pc, #32]	; (20000734 <delay_250ns+0x38>)
20000714:	2205      	movs	r2, #5
20000716:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x00010000) == 0) {}	// wait until COUNTFLAG = 1
20000718:	46c0      	nop			; (mov r8, r8)
2000071a:	4b06      	ldr	r3, [pc, #24]	; (20000734 <delay_250ns+0x38>)
2000071c:	681a      	ldr	r2, [r3, #0]
2000071e:	2380      	movs	r3, #128	; 0x80
20000720:	025b      	lsls	r3, r3, #9
20000722:	4013      	ands	r3, r2
20000724:	d0f9      	beq.n	2000071a <delay_250ns+0x1e>
	*STK_CTRL = 0;				// clear SysTik
20000726:	4b03      	ldr	r3, [pc, #12]	; (20000734 <delay_250ns+0x38>)
20000728:	2200      	movs	r2, #0
2000072a:	601a      	str	r2, [r3, #0]
}
2000072c:	46c0      	nop			; (mov r8, r8)
2000072e:	46bd      	mov	sp, r7
20000730:	bd80      	pop	{r7, pc}
20000732:	46c0      	nop			; (mov r8, r8)
20000734:	e000e010 	and	lr, r0, r0, lsl r0
20000738:	e000e014 	and	lr, r0, r4, lsl r0
2000073c:	e000e018 	and	lr, r0, r8, lsl r0

20000740 <delay_500ns>:

void delay_500ns(void) {
20000740:	b580      	push	{r7, lr}
20000742:	af00      	add	r7, sp, #0
	delay_250ns();
20000744:	f7ff ffda 	bl	200006fc <delay_250ns>
	delay_250ns();
20000748:	f7ff ffd8 	bl	200006fc <delay_250ns>
}
2000074c:	46c0      	nop			; (mov r8, r8)
2000074e:	46bd      	mov	sp, r7
20000750:	bd80      	pop	{r7, pc}

20000752 <delay_micro>:

void delay_micro(unsigned int us) {
20000752:	b580      	push	{r7, lr}
20000754:	b082      	sub	sp, #8
20000756:	af00      	add	r7, sp, #0
20000758:	6078      	str	r0, [r7, #4]
	while(us--) {
2000075a:	e007      	b.n	2000076c <delay_micro+0x1a>
		delay_250ns();
2000075c:	f7ff ffce 	bl	200006fc <delay_250ns>
		delay_250ns();
20000760:	f7ff ffcc 	bl	200006fc <delay_250ns>
		delay_250ns();
20000764:	f7ff ffca 	bl	200006fc <delay_250ns>
		delay_250ns();
20000768:	f7ff ffc8 	bl	200006fc <delay_250ns>
	while(us--) {
2000076c:	687b      	ldr	r3, [r7, #4]
2000076e:	1e5a      	subs	r2, r3, #1
20000770:	607a      	str	r2, [r7, #4]
20000772:	2b00      	cmp	r3, #0
20000774:	d1f2      	bne.n	2000075c <delay_micro+0xa>
	} 
}
20000776:	46c0      	nop			; (mov r8, r8)
20000778:	46bd      	mov	sp, r7
2000077a:	b002      	add	sp, #8
2000077c:	bd80      	pop	{r7, pc}

2000077e <delay_milli>:

void delay_milli(unsigned int ms) {
2000077e:	b580      	push	{r7, lr}
20000780:	b082      	sub	sp, #8
20000782:	af00      	add	r7, sp, #0
20000784:	6078      	str	r0, [r7, #4]
//	#ifdef SIMULATOR
		while( ms-- )
20000786:	e002      	b.n	2000078e <delay_milli+0x10>
			delay_micro(1);
20000788:	2001      	movs	r0, #1
2000078a:	f7ff ffe2 	bl	20000752 <delay_micro>
		while( ms-- )
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	1e5a      	subs	r2, r3, #1
20000792:	607a      	str	r2, [r7, #4]
20000794:	2b00      	cmp	r3, #0
20000796:	d1f7      	bne.n	20000788 <delay_milli+0xa>
//	#else
//		while( ms-- )
//			delay_micro(1000);
//	#endif
}
20000798:	46c0      	nop			; (mov r8, r8)
2000079a:	46bd      	mov	sp, r7
2000079c:	b002      	add	sp, #8
2000079e:	bd80      	pop	{r7, pc}

200007a0 <init_app>:

void init_app(void) {
200007a0:	b580      	push	{r7, lr}
200007a2:	af00      	add	r7, sp, #0
	GPIO_E->moder = 0x55555555;		// 15-0 outport
200007a4:	4b02      	ldr	r3, [pc, #8]	; (200007b0 <init_app+0x10>)
200007a6:	4a03      	ldr	r2, [pc, #12]	; (200007b4 <init_app+0x14>)
200007a8:	601a      	str	r2, [r3, #0]
}
200007aa:	46c0      	nop			; (mov r8, r8)
200007ac:	46bd      	mov	sp, r7
200007ae:	bd80      	pop	{r7, pc}
200007b0:	40021000 	andmi	r1, r2, r0
200007b4:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200007b8 <main>:
	clear_object,
	move_object,
	set_object_speed
};

void main(void) {	
200007b8:	b580      	push	{r7, lr}
200007ba:	b082      	sub	sp, #8
200007bc:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200007be:	4b0a      	ldr	r3, [pc, #40]	; (200007e8 <main+0x30>)
200007c0:	607b      	str	r3, [r7, #4]
	init_app();
200007c2:	f7ff ffed 	bl	200007a0 <init_app>
	graphic_initialize();
200007c6:	f7ff fecb 	bl	20000560 <graphic_initialize>
#ifndef SIMULATOR
	//graphic_clear_screen();
#endif
	p->set_speed(p, 4, 1);
200007ca:	687b      	ldr	r3, [r7, #4]
200007cc:	6a1b      	ldr	r3, [r3, #32]
200007ce:	6878      	ldr	r0, [r7, #4]
200007d0:	2201      	movs	r2, #1
200007d2:	2104      	movs	r1, #4
200007d4:	4798      	blx	r3
	while(1) {
		p->move(p);
200007d6:	687b      	ldr	r3, [r7, #4]
200007d8:	69db      	ldr	r3, [r3, #28]
200007da:	687a      	ldr	r2, [r7, #4]
200007dc:	0010      	movs	r0, r2
200007de:	4798      	blx	r3
		delay_milli(40);
200007e0:	2028      	movs	r0, #40	; 0x28
200007e2:	f7ff ffcc 	bl	2000077e <delay_milli>
		p->move(p);
200007e6:	e7f6      	b.n	200007d6 <main+0x1e>
200007e8:	20000820 	andcs	r0, r0, r0, lsr #16

200007ec <ball_geometry>:
200007ec:	0000000c 	andeq	r0, r0, ip
200007f0:	00000004 	andeq	r0, r0, r4
200007f4:	00000004 	andeq	r0, r0, r4
200007f8:	02000100 	andeq	r0, r0, #0, 2
200007fc:	01010001 	tsteq	r1, r1
20000800:	03010201 	movweq	r0, #4609	; 0x1201
20000804:	01020002 	tsteq	r2, r2
20000808:	03020202 	movweq	r0, #8706	; 0x2202
2000080c:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

20000820 <ball>:
20000820:	200007ec 	andcs	r0, r0, ip, ror #15
	...
2000082c:	00000001 	andeq	r0, r0, r1
20000830:	00000001 	andeq	r0, r0, r1
20000834:	20000031 	andcs	r0, r0, r1, lsr r0
20000838:	20000083 	andcs	r0, r0, r3, lsl #1
2000083c:	200000d5 	ldrdcs	r0, [r0], -r5
20000840:	20000011 	andcs	r0, r0, r1, lsl r0

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000006ef 	andeq	r0, r0, pc, ror #13
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	000001c0 	andeq	r0, r0, r0, asr #3
  10:	0000ac0c 	andeq	sl, r0, ip, lsl #24
  14:	0000ed00 	andeq	lr, r0, r0, lsl #26
	...
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	0000019d 	muleq	r0, sp, r1
  2c:	00014e03 	andeq	r4, r1, r3, lsl #28
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	019b0801 	orrseq	r0, fp, r1, lsl #16
  3c:	02020000 	andeq	r0, r2, #0
  40:	00002405 	andeq	r2, r0, r5, lsl #8
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	000002c0 	andeq	r0, r0, r0, asr #5
  4c:	4e050402 	cdpmi	4, 0, cr0, cr5, cr2, {0}
  50:	02000000 	andeq	r0, r0, #0
  54:	02720704 	rsbseq	r0, r2, #4, 14	; 0x100000
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	00004905 	andeq	r4, r0, r5, lsl #18
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	0000026d 	andeq	r0, r0, sp, ror #4
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	02770704 	rsbseq	r0, r7, #4, 14	; 0x100000
  74:	50030000 	andpl	r0, r3, r0
  78:	03000001 	movweq	r0, #1
  7c:	00002c18 	andeq	r2, r0, r8, lsl ip
  80:	01180500 	tsteq	r8, r0, lsl #10
  84:	00010e15 	andeq	r0, r1, r5, lsl lr
  88:	037a0600 	cmneq	sl, #0, 12
  8c:	16010000 	strne	r0, [r1], -r0
  90:	0000006f 	andeq	r0, r0, pc, rrx
  94:	00920600 	addseq	r0, r2, r0, lsl #12
  98:	17010000 	strne	r0, [r1, -r0]
  9c:	00000045 	andeq	r0, r0, r5, asr #32
  a0:	011f0604 	tsteq	pc, r4, lsl #12
  a4:	18010000 	stmdane	r1, {}	; <UNPREDICTABLE>
  a8:	00000045 	andeq	r0, r0, r5, asr #32
  ac:	01340606 	teqeq	r4, r6, lsl #12
  b0:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
  b4:	0000006f 	andeq	r0, r0, pc, rrx
  b8:	03740608 	cmneq	r4, #8, 12	; 0x800000
  bc:	1a010000 	bne	400c4 <startup-0x1ffbff3c>
  c0:	0000006f 	andeq	r0, r0, pc, rrx
  c4:	0000060c 	andeq	r0, r0, ip, lsl #12
  c8:	1b010000 	blne	400d0 <startup-0x1ffbff30>
  cc:	00000037 	andeq	r0, r0, r7, lsr r0
  d0:	030c0610 	movweq	r0, #50704	; 0xc610
  d4:	1c010000 	stcne	0, cr0, [r1], {-0}
  d8:	00000037 	andeq	r0, r0, r7, lsr r0
  dc:	02d80611 	sbcseq	r0, r8, #17825792	; 0x1100000
  e0:	1d010000 	stcne	0, cr0, [r1, #-0]
  e4:	00000045 	andeq	r0, r0, r5, asr #32
  e8:	03a90612 			; <UNDEFINED> instruction: 0x03a90612
  ec:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
  f0:	00000037 	andeq	r0, r0, r7, lsr r0
  f4:	03900614 	orrseq	r0, r0, #20, 12	; 0x1400000
  f8:	1f010000 	svcne	0x00010000
  fc:	00000037 	andeq	r0, r0, r7, lsr r0
 100:	00120615 	andseq	r0, r2, r5, lsl r6
 104:	20010000 	andcs	r0, r1, r0
 108:	00000045 	andeq	r0, r0, r5, asr #32
 10c:	d3030016 	movwle	r0, #12310	; 0x3016
 110:	01000002 	tsteq	r0, r2
 114:	00008121 	andeq	r8, r0, r1, lsr #2
 118:	02660700 	rsbeq	r0, r6, #0, 14
 11c:	01020000 	mrseq	r0, (UNDEF: 2)
 120:	00013a39 	andeq	r3, r1, r9, lsr sl
 124:	00780800 	rsbseq	r0, r8, r0, lsl #16
 128:	00763a01 	rsbseq	r3, r6, r1, lsl #20
 12c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
 130:	3b010079 	blcc	4031c <startup-0x1ffbfce4>
 134:	00000076 	andeq	r0, r0, r6, ror r0
 138:	a6030001 	strge	r0, [r3], -r1
 13c:	01000000 	mrseq	r0, (UNDEF: 0)
 140:	0001193c 	andeq	r1, r1, ip, lsr r9
 144:	00330700 	eorseq	r0, r3, r0, lsl #14
 148:	01340000 	teqeq	r4, r0
 14c:	0001813e 	andeq	r8, r1, lr, lsr r1
 150:	01910600 	orrseq	r0, r1, r0, lsl #12
 154:	3f010000 	svccc	0x00010000
 158:	00000068 	andeq	r0, r0, r8, rrx
 15c:	01580600 	cmpeq	r8, r0, lsl #12
 160:	40010000 	andmi	r0, r1, r0
 164:	00000068 	andeq	r0, r0, r8, rrx
 168:	015e0604 	cmpeq	lr, r4, lsl #12
 16c:	41010000 	mrsmi	r0, (UNDEF: 1)
 170:	00000068 	andeq	r0, r0, r8, rrx
 174:	78700808 	ldmdavc	r0!, {r3, fp}^
 178:	81420100 	mrshi	r0, (UNDEF: 82)
 17c:	0c000001 	stceq	0, cr0, [r0], {1}
 180:	013a0900 	teqeq	sl, r0, lsl #18
 184:	01910000 	orrseq	r0, r1, r0
 188:	6f0a0000 	svcvs	0x000a0000
 18c:	13000000 	movwne	r0, #0
 190:	006e0300 	rsbeq	r0, lr, r0, lsl #6
 194:	43010000 	movwmi	r0, #4096	; 0x1000
 198:	00000145 	andeq	r0, r0, r5, asr #2
 19c:	00006d03 	andeq	r6, r0, r3, lsl #26
 1a0:	a7430100 	strbge	r0, [r3, -r0, lsl #2]
 1a4:	0b000001 	bleq	1b0 <startup-0x1ffffe50>
 1a8:	00014504 	andeq	r4, r1, r4, lsl #10
 1ac:	03070700 	movweq	r0, #30464	; 0x7700
 1b0:	01240000 			; <UNDEFINED> instruction: 0x01240000
 1b4:	00022645 	andeq	r2, r2, r5, asr #12
 1b8:	65670800 	strbvs	r0, [r7, #-2048]!	; 0xfffff800
 1bc:	4601006f 	strmi	r0, [r1], -pc, rrx
 1c0:	0000019c 	muleq	r0, ip, r1
 1c4:	012a0600 			; <UNDEFINED> instruction: 0x012a0600
 1c8:	47010000 	strmi	r0, [r1, -r0]
 1cc:	00000068 	andeq	r0, r0, r8, rrx
 1d0:	012f0604 			; <UNDEFINED> instruction: 0x012f0604
 1d4:	47010000 	strmi	r0, [r1, -r0]
 1d8:	00000068 	andeq	r0, r0, r8, rrx
 1dc:	00070608 	andeq	r0, r7, r8, lsl #12
 1e0:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 1e4:	00000068 	andeq	r0, r0, r8, rrx
 1e8:	00e8060c 	rsceq	r0, r8, ip, lsl #12
 1ec:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
 1f0:	00000068 	andeq	r0, r0, r8, rrx
 1f4:	03140610 	tsteq	r4, #16, 12	; 0x1000000
 1f8:	49010000 	stmdbmi	r1, {}	; <UNPREDICTABLE>
 1fc:	00000237 	andeq	r0, r0, r7, lsr r2
 200:	01ba0614 			; <UNDEFINED> instruction: 0x01ba0614
 204:	4a010000 	bmi	4020c <startup-0x1ffbfdf4>
 208:	00000237 	andeq	r0, r0, r7, lsr r2
 20c:	03a40618 			; <UNDEFINED> instruction: 0x03a40618
 210:	4b010000 	blmi	40218 <startup-0x1ffbfde8>
 214:	00000237 	andeq	r0, r0, r7, lsr r2
 218:	0319061c 	tsteq	r9, #28, 12	; 0x1c00000
 21c:	4c010000 	stcmi	0, cr0, [r1], {-0}
 220:	00000252 	andeq	r0, r0, r2, asr r2
 224:	310c0020 	tstcc	ip, r0, lsr #32
 228:	0d000002 	stceq	0, cr0, [r0, #-8]
 22c:	00000231 	andeq	r0, r0, r1, lsr r2
 230:	ad040b00 	vstrge	d0, [r4, #-0]
 234:	0b000001 	bleq	240 <startup-0x1ffffdc0>
 238:	00022604 	andeq	r2, r2, r4, lsl #12
 23c:	02520c00 	subseq	r0, r2, #0, 24
 240:	310d0000 	mrscc	r0, (UNDEF: 13)
 244:	0d000002 	stceq	0, cr0, [r0, #-8]
 248:	00000068 	andeq	r0, r0, r8, rrx
 24c:	0000680d 	andeq	r6, r0, sp, lsl #16
 250:	040b0000 	streq	r0, [fp], #-0
 254:	0000023d 	andeq	r0, r0, sp, lsr r2
 258:	00038903 	andeq	r8, r3, r3, lsl #18
 25c:	ad4d0100 	stfgee	f0, [sp, #-0]
 260:	03000001 	movweq	r0, #1
 264:	00000388 	andeq	r0, r0, r8, lsl #7
 268:	02314d01 	eorseq	r4, r1, #1, 26	; 0x40
 26c:	430e0000 	movwmi	r0, #57344	; 0xe000
 270:	01000003 	tsteq	r0, r3
 274:	0191014e 	orrseq	r0, r1, lr, asr #2
 278:	03050000 	movweq	r0, #20480	; 0x5000
 27c:	200007ec 	andcs	r0, r0, ip, ror #15
 280:	00002e0e 	andeq	r2, r0, lr, lsl #28
 284:	01590100 	cmpeq	r9, r0, lsl #2
 288:	00000258 	andeq	r0, r0, r8, asr r2
 28c:	08200305 	stmdaeq	r0!, {r0, r2, r8, r9}
 290:	ed0f2000 	stc	0, cr2, [pc, #-0]	; 298 <startup-0x1ffffd68>
 294:	01000002 	tsteq	r0, r2
 298:	07b80164 	ldreq	r0, [r8, r4, ror #2]!
 29c:	00342000 	eorseq	r2, r4, r0
 2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a4:	000002b6 			; <UNDEFINED> instruction: 0x000002b6
 2a8:	01007010 	tsteq	r0, r0, lsl r0
 2ac:	02630165 	rsbeq	r0, r3, #1073741849	; 0x40000019
 2b0:	91020000 	mrsls	r0, (UNDEF: 2)
 2b4:	e4110074 	ldr	r0, [r1], #-116	; 0xffffff8c
 2b8:	01000002 	tsteq	r0, r2
 2bc:	07a0014a 	streq	r0, [r0, sl, asr #2]!
 2c0:	00182000 	andseq	r2, r8, r0
 2c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2c8:	0001770f 	andeq	r7, r1, pc, lsl #14
 2cc:	01400100 	mrseq	r0, (UNDEF: 80)
 2d0:	2000077e 	andcs	r0, r0, lr, ror r7
 2d4:	00000022 	andeq	r0, r0, r2, lsr #32
 2d8:	02ed9c01 	rsceq	r9, sp, #256	; 0x100
 2dc:	6d120000 	ldcvs	0, cr0, [r2, #-0]
 2e0:	40010073 	andmi	r0, r1, r3, ror r0
 2e4:	00006f01 	andeq	r6, r0, r1, lsl #30
 2e8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 2ec:	003d0f00 	eorseq	r0, sp, r0, lsl #30
 2f0:	37010000 	strcc	r0, [r1, -r0]
 2f4:	00075201 	andeq	r5, r7, r1, lsl #4
 2f8:	00002c20 	andeq	r2, r0, r0, lsr #24
 2fc:	129c0100 	addsne	r0, ip, #0, 2
 300:	12000003 	andne	r0, r0, #3
 304:	01007375 	tsteq	r0, r5, ror r3
 308:	006f0137 	rsbeq	r0, pc, r7, lsr r1	; <UNPREDICTABLE>
 30c:	91020000 	mrsls	r0, (UNDEF: 2)
 310:	b4130074 	ldrlt	r0, [r3], #-116	; 0xffffff8c
 314:	01000002 	tsteq	r0, r2
 318:	07400132 	smlaldxeq	r0, r0, r2, r1	; <UNPREDICTABLE>
 31c:	00122000 	andseq	r2, r2, r0
 320:	9c010000 	stcls	0, cr0, [r1], {-0}
 324:	00035111 	andeq	r5, r3, r1, lsl r1
 328:	01290100 			; <UNDEFINED> instruction: 0x01290100
 32c:	200006fc 	strdcs	r0, [r0], -ip
 330:	00000044 	andeq	r0, r0, r4, asr #32
 334:	0c0f9c01 	stceq	12, cr9, [pc], {1}
 338:	01000000 	mrseq	r0, (UNDEF: 0)
 33c:	05bc0108 	ldreq	r0, [ip, #264]!	; 0x108
 340:	01402000 	mrseq	r2, (UNDEF: 64)
 344:	9c010000 	stcls	0, cr0, [r1], {-0}
 348:	000003b0 			; <UNDEFINED> instruction: 0x000003b0
 34c:	01007812 	tsteq	r0, r2, lsl r8
 350:	00680108 	rsbeq	r0, r8, r8, lsl #2
 354:	91020000 	mrsls	r0, (UNDEF: 2)
 358:	0079125c 	rsbseq	r1, r9, ip, asr r2
 35c:	68010801 	stmdavs	r1, {r0, fp}
 360:	02000000 	andeq	r0, r0, #0
 364:	73125891 	tstvc	r2, #9502720	; 0x910000
 368:	01007465 	tsteq	r0, r5, ror #8
 36c:	00680108 	rsbeq	r0, r8, r8, lsl #2
 370:	91020000 	mrsls	r0, (UNDEF: 2)
 374:	035d1454 	cmpeq	sp, #84, 8	; 0x54000000
 378:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 37c:	00007601 	andeq	r7, r0, r1, lsl #12
 380:	6f910200 	svcvs	0x00910200
 384:	01006310 	tsteq	r0, r0, lsl r3
 388:	00760109 	rsbseq	r0, r6, r9, lsl #2
 38c:	91020000 	mrsls	r0, (UNDEF: 2)
 390:	03691467 	cmneq	r9, #1728053248	; 0x67000000
 394:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
 398:	00007601 	andeq	r7, r0, r1, lsl #12
 39c:	6e910200 	cdpvs	2, 9, cr0, cr1, cr0, {0}
 3a0:	00001e14 	andeq	r1, r0, r4, lsl lr
 3a4:	010a0100 	mrseq	r0, (UNDEF: 26)
 3a8:	00000068 	andeq	r0, r0, r8, rrx
 3ac:	00689102 	rsbeq	r9, r8, r2, lsl #2
 3b0:	00029515 	andeq	r9, r2, r5, lsl r5
 3b4:	60f90100 	rscsvs	r0, r9, r0, lsl #2
 3b8:	5c200005 	stcpl	0, cr0, [r0], #-20	; 0xffffffec
 3bc:	01000000 	mrseq	r0, (UNDEF: 0)
 3c0:	0003e49c 	muleq	r3, ip, r4
 3c4:	003d1600 	eorseq	r1, sp, r0, lsl #12
 3c8:	fb010000 	blx	403d2 <startup-0x1ffbfc2e>
 3cc:	00000068 	andeq	r0, r0, r8, rrx
 3d0:	000003d6 	ldrdeq	r0, [r0], -r6
 3d4:	77180017 			; <UNDEFINED> instruction: 0x77180017
 3d8:	01000001 	tsteq	r0, r1
 3dc:	000068fd 	strdeq	r6, [r0], -sp
 3e0:	00001700 	andeq	r1, r0, r0, lsl #14
 3e4:	00007d15 	andeq	r7, r0, r5, lsl sp
 3e8:	faed0100 	blx	ffb407f0 <ball+0xdfb3ffd0>
 3ec:	66200004 	strtvs	r0, [r0], -r4
 3f0:	01000000 	mrseq	r0, (UNDEF: 0)
 3f4:	0004129c 	muleq	r4, ip, r2
 3f8:	00691900 	rsbeq	r1, r9, r0, lsl #18
 3fc:	0076ee01 	rsbseq	lr, r6, r1, lsl #28
 400:	91020000 	mrsls	r0, (UNDEF: 2)
 404:	006a1977 	rsbeq	r1, sl, r7, ror r9
 408:	0076ee01 	rsbseq	lr, r6, r1, lsl #28
 40c:	91020000 	mrsls	r0, (UNDEF: 2)
 410:	641a0076 	ldrvs	r0, [sl], #-118	; 0xffffff8a
 414:	01000001 	tsteq	r0, r1
 418:	0004b4e5 	andeq	fp, r4, r5, ror #9
 41c:	00004620 	andeq	r4, r0, r0, lsr #12
 420:	449c0100 	ldrmi	r0, [ip], #256	; 0x100
 424:	1b000004 	blne	43c <startup-0x1ffffbc4>
 428:	00000149 	andeq	r0, r0, r9, asr #2
 42c:	0076e501 	rsbseq	lr, r6, r1, lsl #10
 430:	91020000 	mrsls	r0, (UNDEF: 2)
 434:	03691b77 	cmneq	r9, #121856	; 0x1dc00
 438:	e5010000 	str	r0, [r1, #-0]
 43c:	00000076 	andeq	r0, r0, r6, ror r0
 440:	00769102 	rsbseq	r9, r6, r2, lsl #2
 444:	0000571a 	andeq	r5, r0, sl, lsl r7
 448:	74de0100 	ldrbvc	r0, [lr], #256	; 0x100
 44c:	40200004 	eormi	r0, r0, r4
 450:	01000000 	mrseq	r0, (UNDEF: 0)
 454:	0004769c 	muleq	r4, ip, r6
 458:	00651b00 	rsbeq	r1, r5, r0, lsl #22
 45c:	de010000 	cdple	0, 0, cr0, cr1, cr0, {0}
 460:	00000076 	andeq	r0, r0, r6, ror r0
 464:	1b779102 	blne	1de4874 <startup-0x1e21b78c>
 468:	00000369 	andeq	r0, r0, r9, ror #6
 46c:	0076de01 	rsbseq	sp, r6, r1, lsl #28
 470:	91020000 	mrsls	r0, (UNDEF: 2)
 474:	581a0076 	ldmdapl	sl, {r1, r2, r4, r5, r6}
 478:	01000002 	tsteq	r0, r2
 47c:	0003f6c9 	andeq	pc, r3, r9, asr #13
 480:	00007e20 	andeq	r7, r0, r0, lsr #28
 484:	b59c0100 	ldrlt	r0, [ip, #256]	; 0x100
 488:	1b000004 	blne	4a0 <startup-0x1ffffb60>
 48c:	00000077 	andeq	r0, r0, r7, ror r0
 490:	0076c901 	rsbseq	ip, r6, r1, lsl #18
 494:	91020000 	mrsls	r0, (UNDEF: 2)
 498:	03691b77 	cmneq	r9, #121856	; 0x1dc00
 49c:	c9010000 	stmdbgt	r1, {}	; <UNPREDICTABLE>
 4a0:	00000076 	andeq	r0, r0, r6, ror r0
 4a4:	18769102 	ldmdane	r6!, {r1, r8, ip, pc}^
 4a8:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 4ac:	00689f01 	rsbeq	r9, r8, r1, lsl #30
 4b0:	00170000 	andseq	r0, r7, r0
 4b4:	013c1c00 	teqeq	ip, r0, lsl #24
 4b8:	c4010000 	strgt	r0, [r1], #-0
 4bc:	00000076 	andeq	r0, r0, r6, ror r0
 4c0:	200003cc 	andcs	r0, r0, ip, asr #7
 4c4:	0000002a 	andeq	r0, r0, sl, lsr #32
 4c8:	04dd9c01 	ldrbeq	r9, [sp], #3073	; 0xc01
 4cc:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 4d0:	01000003 	tsteq	r0, r3
 4d4:	000076c4 	andeq	r7, r0, r4, asr #13
 4d8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4dc:	00991c00 	addseq	r1, r9, r0, lsl #24
 4e0:	ac010000 	stcge	0, cr0, [r1], {-0}
 4e4:	00000076 	andeq	r0, r0, r6, ror r0
 4e8:	2000033c 	andcs	r0, r0, ip, lsr r3
 4ec:	00000090 	muleq	r0, r0, r0
 4f0:	051e9c01 	ldreq	r9, [lr, #-3073]	; 0xfffff3ff
 4f4:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 4f8:	01000003 	tsteq	r0, r3
 4fc:	000076ac 	andeq	r7, r0, ip, lsr #13
 500:	6f910200 	svcvs	0x00910200
 504:	01006319 	tsteq	r0, r9, lsl r3
 508:	000076ad 	andeq	r7, r0, sp, lsr #13
 50c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 510:	0002b418 	andeq	fp, r2, r8, lsl r4
 514:	689f0100 	ldmvs	pc, {r8}	; <UNPREDICTABLE>
 518:	17000000 	strne	r0, [r0, -r0]
 51c:	231a0000 	tstcs	sl, #0
 520:	01000003 	tsteq	r0, r3
 524:	0002d299 	muleq	r2, r9, r2
 528:	00006a20 	andeq	r6, r0, r0, lsr #20
 52c:	4d9c0100 	ldfmis	f0, [ip]
 530:	19000005 	stmdbne	r0, {r0, r2}
 534:	9a010063 	bls	406c8 <startup-0x1ffbf938>
 538:	00000076 	andeq	r0, r0, r6, ror r0
 53c:	18779102 	ldmdane	r7!, {r1, r8, ip, pc}^
 540:	000002b4 			; <UNDEFINED> instruction: 0x000002b4
 544:	00689f01 	rsbeq	r9, r8, r1, lsl #30
 548:	00170000 	andseq	r0, r7, r0
 54c:	03621a00 	cmneq	r2, #0, 20
 550:	86010000 	strhi	r0, [r1], -r0
 554:	20000278 	andcs	r0, r0, r8, ror r2
 558:	0000005a 	andeq	r0, r0, sl, asr r0
 55c:	05719c01 	ldrbeq	r9, [r1, #-3073]!	; 0xfffff3ff
 560:	691b0000 	ldmdbvs	fp, {}	; <UNPREDICTABLE>
 564:	01000003 	tsteq	r0, r3
 568:	00007686 	andeq	r7, r0, r6, lsl #13
 56c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 570:	01a91d00 			; <UNDEFINED> instruction: 0x01a91d00
 574:	7e010000 	cdpvc	0, 0, cr0, cr1, cr0, {0}
 578:	20000228 	andcs	r0, r0, r8, lsr #4
 57c:	00000050 	andeq	r0, r0, r0, asr r0
 580:	059f9c01 	ldreq	r9, [pc, #3073]	; 1189 <startup-0x1fffee77>
 584:	781e0000 	ldmdavc	lr, {}	; <UNPREDICTABLE>
 588:	767e0100 	ldrbtvc	r0, [lr], -r0, lsl #2
 58c:	02000000 	andeq	r0, r0, #0
 590:	63196f91 	tstvs	r9, #580	; 0x244
 594:	767f0100 	ldrbtvc	r0, [pc], -r0, lsl #2
 598:	02000000 	andeq	r0, r0, #0
 59c:	1d007791 	stcne	7, cr7, [r0, #-580]	; 0xfffffdbc
 5a0:	000002f2 	strdeq	r0, [r0], -r2
 5a4:	01d87601 	bicseq	r7, r8, r1, lsl #12
 5a8:	00502000 	subseq	r2, r0, r0
 5ac:	9c010000 	stcls	0, cr0, [r1], {-0}
 5b0:	000005cd 	andeq	r0, r0, sp, asr #11
 5b4:	0100781e 	tsteq	r0, lr, lsl r8
 5b8:	00007676 	andeq	r7, r0, r6, ror r6
 5bc:	6f910200 	svcvs	0x00910200
 5c0:	01006319 	tsteq	r0, r9, lsl r3
 5c4:	00007677 	andeq	r7, r0, r7, ror r6
 5c8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5cc:	03981500 	orrseq	r1, r8, #0, 10
 5d0:	60010000 	andvs	r0, r1, r0
 5d4:	200000d4 	ldrdcs	r0, [r0], -r4
 5d8:	00000104 	andeq	r0, r0, r4, lsl #2
 5dc:	06059c01 	streq	r9, [r5], -r1, lsl #24
 5e0:	6f1e0000 	svcvs	0x001e0000
 5e4:	63600100 	cmnvs	r0, #0, 2
 5e8:	02000002 	andeq	r0, r0, #2
 5ec:	e41f6c91 	ldr	r6, [pc], #-3217	; 5f4 <startup-0x1ffffa0c>
 5f0:	70200000 	eorvc	r0, r0, r0
 5f4:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 5f8:	63010069 	movwvs	r0, #4201	; 0x1069
 5fc:	00000068 	andeq	r0, r0, r8, rrx
 600:	00749102 	rsbseq	r9, r4, r2, lsl #2
 604:	03361500 	teqeq	r6, #0, 10
 608:	5a010000 	bpl	40610 <startup-0x1ffbf9f0>
 60c:	20000082 	andcs	r0, r0, r2, lsl #1
 610:	00000052 	andeq	r0, r0, r2, asr r0
 614:	06549c01 	ldrbeq	r9, [r4], -r1, lsl #24
 618:	6f1e0000 	svcvs	0x001e0000
 61c:	635a0100 	cmpvs	sl, #0, 2
 620:	02000002 	andeq	r0, r0, #2
 624:	8a1f6c91 	bhi	7db870 <startup-0x1f824790>
 628:	42200000 	eormi	r0, r0, #0
 62c:	19000000 	stmdbne	r0, {}	; <UNPREDICTABLE>
 630:	5b010069 	blpl	407dc <startup-0x1ffbf824>
 634:	00000068 	andeq	r0, r0, r8, rrx
 638:	1f749102 	svcne	0x00749102
 63c:	20000090 	mulcs	r0, r0, r0
 640:	0000002a 	andeq	r0, r0, sl, lsr #32
 644:	00000c18 	andeq	r0, r0, r8, lsl ip
 648:	68560100 	ldmdavs	r6, {r8}^
 64c:	17000000 	strne	r0, [r0, -r0]
 650:	00000000 	andeq	r0, r0, r0
 654:	0002a815 	andeq	sl, r2, r5, lsl r8
 658:	30540100 	subscc	r0, r4, r0, lsl #2
 65c:	52200000 	eorpl	r0, r0, #0
 660:	01000000 	mrseq	r0, (UNDEF: 0)
 664:	0006a39c 	muleq	r6, ip, r3
 668:	006f1e00 	rsbeq	r1, pc, r0, lsl #28
 66c:	02635401 	rsbeq	r5, r3, #16777216	; 0x1000000
 670:	91020000 	mrsls	r0, (UNDEF: 2)
 674:	00381f6c 	eorseq	r1, r8, ip, ror #30
 678:	00422000 	subeq	r2, r2, r0
 67c:	69190000 	ldmdbvs	r9, {}	; <UNPREDICTABLE>
 680:	68550100 	ldmdavs	r5, {r8}^
 684:	02000000 	andeq	r0, r0, #0
 688:	3e1f7491 	cfcmpscc	r7, mvf15, mvf1
 68c:	2a200000 	bcs	800694 <startup-0x1f7ff96c>
 690:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
 694:	0000000c 	andeq	r0, r0, ip
 698:	00685601 	rsbeq	r5, r8, r1, lsl #12
 69c:	00170000 	andseq	r0, r7, r0
 6a0:	20000000 	andcs	r0, r0, r0
 6a4:	00000284 	andeq	r0, r0, r4, lsl #5
 6a8:	00104f01 	andseq	r4, r0, r1, lsl #30
 6ac:	00202000 	eoreq	r2, r0, r0
 6b0:	9c010000 	stcls	0, cr0, [r1], {-0}
 6b4:	000006e1 	andeq	r0, r0, r1, ror #13
 6b8:	01006f1e 	tsteq	r0, lr, lsl pc
 6bc:	0002634f 	andeq	r6, r2, pc, asr #6
 6c0:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 6c4:	0001831b 	andeq	r8, r1, fp, lsl r3
 6c8:	684f0100 	stmdavs	pc, {r8}^	; <UNPREDICTABLE>
 6cc:	02000000 	andeq	r0, r0, #0
 6d0:	8a1b7091 	bhi	6dc91c <startup-0x1f9236e4>
 6d4:	01000001 	tsteq	r0, r1
 6d8:	0000684f 	andeq	r6, r0, pc, asr #16
 6dc:	6c910200 	lfmvs	f0, 4, [r1], {0}
 6e0:	03802100 	orreq	r2, r0, #0, 2
 6e4:	03010000 	movweq	r0, #4096	; 0x1000
 6e8:	20000000 	andcs	r0, r0, r0
 6ec:	0000000c 	andeq	r0, r0, ip
 6f0:	Address 0x000006f0 is out of bounds.


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xfffff4f2
   c:	10011117 	andne	r1, r1, r7, lsl r1
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	13050000 	movwne	r0, #20480	; 0x5000
  38:	3a0b0b01 	bcc	2c2c44 <startup-0x1fd3d3bc>
  3c:	010b3b0b 	tsteq	fp, fp, lsl #22
  40:	06000013 			; <UNDEFINED> instruction: 0x06000013
  44:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  48:	0b3b0b3a 	bleq	ec2d38 <startup-0x1f13d2c8>
  4c:	0b381349 	bleq	e04d78 <startup-0x1f1fb288>
  50:	13070000 	movwne	r0, #28672	; 0x7000
  54:	0b0e0301 	bleq	380c60 <startup-0x1fc7f3a0>
  58:	3b0b3a0b 	blcc	2ce88c <startup-0x1fd31774>
  5c:	0013010b 	andseq	r0, r3, fp, lsl #2
  60:	000d0800 	andeq	r0, sp, r0, lsl #16
  64:	0b3a0803 	bleq	e82078 <startup-0x1f17df88>
  68:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  6c:	00000b38 	andeq	r0, r0, r8, lsr fp
  70:	49010109 	stmdbmi	r1, {r0, r3, r8}
  74:	00130113 	andseq	r0, r3, r3, lsl r1
  78:	00210a00 	eoreq	r0, r1, r0, lsl #20
  7c:	0b2f1349 	bleq	bc4da8 <startup-0x1f43b258>
  80:	0f0b0000 	svceq	0x000b0000
  84:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
  88:	0c000013 	stceq	0, cr0, [r0], {19}
  8c:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
  90:	00001301 	andeq	r1, r0, r1, lsl #6
  94:	4900050d 	stmdbmi	r0, {r0, r2, r3, r8, sl}
  98:	0e000013 	mcreq	0, 0, r0, cr0, cr3, {0}
  9c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
  a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  a4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
  a8:	00001802 	andeq	r1, r0, r2, lsl #16
  ac:	3f012e0f 	svccc	0x00012e0f
  b0:	3a0e0319 	bcc	380d1c <startup-0x1fc7f2e4>
  b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
  bc:	96184006 	ldrls	r4, [r8], -r6
  c0:	13011942 	movwne	r1, #6466	; 0x1942
  c4:	34100000 	ldrcc	r0, [r0], #-0
  c8:	3a080300 	bcc	200cd0 <startup-0x1fdff330>
  cc:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  d0:	00180213 	andseq	r0, r8, r3, lsl r2
  d4:	002e1100 	eoreq	r1, lr, r0, lsl #2
  d8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  dc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  e0:	01111927 	tsteq	r1, r7, lsr #18
  e4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  e8:	00194297 	mulseq	r9, r7, r2
  ec:	00051200 	andeq	r1, r5, r0, lsl #4
  f0:	0b3a0803 	bleq	e82104 <startup-0x1f17defc>
  f4:	1349053b 	movtne	r0, #38203	; 0x953b
  f8:	00001802 	andeq	r1, r0, r2, lsl #16
  fc:	3f002e13 	svccc	0x00002e13
 100:	3a0e0319 	bcc	380d6c <startup-0x1fc7f294>
 104:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
 108:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 10c:	96184006 	ldrls	r4, [r8], -r6
 110:	00001942 	andeq	r1, r0, r2, asr #18
 114:	03003414 	movweq	r3, #1044	; 0x414
 118:	3b0b3a0e 	blcc	2ce958 <startup-0x1fd316a8>
 11c:	02134905 	andseq	r4, r3, #81920	; 0x14000
 120:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 124:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 128:	0b3a0e03 	bleq	e8393c <startup-0x1f17c6c4>
 12c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 130:	06120111 			; <UNDEFINED> instruction: 0x06120111
 134:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 138:	00130119 	andseq	r0, r3, r9, lsl r1
 13c:	012e1600 			; <UNDEFINED> instruction: 0x012e1600
 140:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 144:	0b3b0b3a 	bleq	ec2e34 <startup-0x1f13d1cc>
 148:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 14c:	00001301 	andeq	r1, r0, r1, lsl #6
 150:	00001817 	andeq	r1, r0, r7, lsl r8
 154:	012e1800 			; <UNDEFINED> instruction: 0x012e1800
 158:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 15c:	0b3b0b3a 	bleq	ec2e4c <startup-0x1f13d1b4>
 160:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 164:	34190000 	ldrcc	r0, [r9], #-0
 168:	3a080300 	bcc	200d70 <startup-0x1fdff290>
 16c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 170:	00180213 	andseq	r0, r8, r3, lsl r2
 174:	012e1a00 			; <UNDEFINED> instruction: 0x012e1a00
 178:	0b3a0e03 	bleq	e8398c <startup-0x1f17c674>
 17c:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 180:	06120111 			; <UNDEFINED> instruction: 0x06120111
 184:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 188:	00130119 	andseq	r0, r3, r9, lsl r1
 18c:	00051b00 	andeq	r1, r5, r0, lsl #22
 190:	0b3a0e03 	bleq	e839a4 <startup-0x1f17c65c>
 194:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 198:	00001802 	andeq	r1, r0, r2, lsl #16
 19c:	03012e1c 	movweq	r2, #7708	; 0x1e1c
 1a0:	3b0b3a0e 	blcc	2ce9e0 <startup-0x1fd31620>
 1a4:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1a8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1ac:	96184006 	ldrls	r4, [r8], -r6
 1b0:	13011942 	movwne	r1, #6466	; 0x1942
 1b4:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1b8:	3a0e0301 	bcc	380dc4 <startup-0x1fc7f23c>
 1bc:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c0:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c4:	97184006 	ldrls	r4, [r8, -r6]
 1c8:	13011942 	movwne	r1, #6466	; 0x1942
 1cc:	051e0000 	ldreq	r0, [lr, #-0]
 1d0:	3a080300 	bcc	200dd8 <startup-0x1fdff228>
 1d4:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 1d8:	00180213 	andseq	r0, r8, r3, lsl r2
 1dc:	010b1f00 	tsteq	fp, r0, lsl #30
 1e0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1e4:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 1e8:	03193f01 	tsteq	r9, #1, 30
 1ec:	3b0b3a0e 	blcc	2cea2c <startup-0x1fd315d4>
 1f0:	1119270b 	tstne	r9, fp, lsl #14
 1f4:	40061201 	andmi	r1, r6, r1, lsl #4
 1f8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1fc:	00001301 	andeq	r1, r0, r1, lsl #6
 200:	3f002e21 	svccc	0x00002e21
 204:	3a0e0319 	bcc	380e70 <startup-0x1fc7f190>
 208:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 20c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 210:	97184006 	ldrls	r4, [r8, -r6]
 214:	00001942 	andeq	r1, r0, r2, asr #18
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007dc 	ldrdeq	r0, [r0], -ip
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007ec 	andcs	r0, r0, ip, ror #15
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000264 	andeq	r0, r0, r4, ror #4
   4:	00ed0002 	rsceq	r0, sp, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	61686f6a 	cmnvs	r8, sl, ror #30
  28:	6f672f6e 	svcvs	0x00672f6e
  2c:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
  30:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
  34:	502f6576 	eorpl	r6, pc, r6, ror r5	; <UNPREDICTABLE>
  38:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  3c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  44:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
  48:	6d724f2f 	ldclvs	15, cr4, [r2, #-188]!	; 0xffffff44
  4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  50:	61657363 	cmnvs	r5, r3, ror #6
  54:	635c7070 	cmpvs	ip, #112	; 0x70
  58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe98 <ball+0xdffff678>
  64:	63675c73 	cmnvs	r7, #29440	; 0x7300
  68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  70:	6f6e2d6d 	svcvs	0x006e2d6d
  74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  88:	00656e69 	rsbeq	r6, r5, r9, ror #28
  8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  90:	70616573 	rsbvc	r6, r1, r3, ror r5
  94:	6f635c70 	svcvs	0x00635c70
  98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  a0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  b4:	61652d65 	cmnvs	r5, r5, ror #26
  b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  c0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  c4:	00007379 	andeq	r7, r0, r9, ror r3
  c8:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
  cc:	2e707574 	mrccs	5, 3, r7, cr0, cr4, {3}
  d0:	00010063 	andeq	r0, r1, r3, rrx
  d4:	65645f00 	strbvs	r5, [r4, #-3840]!	; 0xfffff100
  d8:	6c756166 	ldfvse	f6, [r5], #-408	; 0xfffffe68
  dc:	79745f74 	ldmdbvc	r4!, {r2, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
  e0:	2e736570 	mrccs	5, 3, r6, cr3, cr0, {3}
  e4:	00020068 	andeq	r0, r2, r8, rrx
  e8:	74735f00 	ldrbtvc	r5, [r3], #-3840	; 0xfffff100
  ec:	746e6964 	strbtvc	r6, [lr], #-2404	; 0xfffff69c
  f0:	0300682e 	movweq	r6, #2094	; 0x82e
  f4:	00000000 	andeq	r0, r0, r0
  f8:	00000205 	andeq	r0, r0, r5, lsl #4
  fc:	13152000 	tstne	r5, #0
 100:	0003025e 	andeq	r0, r3, lr, asr r2
 104:	05000101 	streq	r0, [r0, #-257]	; 0xfffffeff
 108:	00001002 	andeq	r1, r0, r2
 10c:	00ce0320 	sbceq	r0, lr, r0, lsr #6
 110:	3d3d6701 	ldccc	7, cr6, [sp, #-4]!
 114:	02004b4c 	andeq	r4, r0, #76, 22	; 0x13000
 118:	003d0304 	eorseq	r0, sp, r4, lsl #6
 11c:	08030402 	stmdaeq	r3, {r1, sl}
 120:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 124:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 128:	004b4c69 	subeq	r4, fp, r9, ror #24
 12c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 130:	03040200 	movweq	r0, #16896	; 0x4200
 134:	02004908 	andeq	r4, r0, #8, 18	; 0x20000
 138:	3c060104 	stfccs	f0, [r6], {4}
 13c:	4b4c6906 	blmi	131a55c <startup-0x1ece5aa4>
 140:	0402004c 	streq	r0, [r2], #-76	; 0xffffffb4
 144:	02003d03 	andeq	r3, r0, #3, 26	; 0xc0
 148:	59080304 	stmdbpl	r8, {r2, r8, r9}
 14c:	03040200 	movweq	r0, #16896	; 0x4200
 150:	02005608 	andeq	r5, r0, #8, 12	; 0x800000
 154:	3c060104 	stfccs	f0, [r6], {4}
 158:	76756a06 	ldrbtvc	r6, [r5], -r6, lsl #20
 15c:	5983594b 	stmibpl	r3, {r0, r1, r3, r6, r8, fp, ip, lr}
 160:	5a83594b 	bpl	fe0d6694 <ball+0xde0d5e74>
 164:	59684c4b 	stmdbpl	r8!, {r0, r1, r3, r6, sl, fp, lr}^
 168:	684bc967 	stmdavs	fp, {r0, r1, r2, r5, r6, r8, fp, lr, pc}^
 16c:	bb675968 	bllt	19d6714 <startup-0x1e6298ec>
 170:	0367764b 	cmneq	r7, #78643200	; 0x4b00000
 174:	70037410 	andvc	r7, r3, r0, lsl r4
 178:	4a100320 	bmi	400e00 <startup-0x1fbff200>
 17c:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 180:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 184:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 188:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 18c:	313d3d3d 	teqcc	sp, sp, lsr sp
 190:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 194:	2225452f 	eorcs	r4, r5, #197132288	; 0xbc00000
 198:	3d68a03d 	stclcc	0, cr10, [r8, #-244]!	; 0xffffff0c
 19c:	2f593d3d 	svccs	0x00593d3d
 1a0:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 1a4:	303d593e 	eorscc	r5, sp, lr, lsr r9
 1a8:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 1ac:	675967ae 	ldrbvs	r6, [r9, -lr, lsr #15]
 1b0:	594b914c 	stmdbpl	fp, {r2, r3, r6, r8, ip, pc}^
 1b4:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 1b8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 1bc:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 1c0:	3d91683d 	ldccc	8, cr6, [r1, #244]	; 0xf4
 1c4:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 1c8:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 1cc:	3f4c833d 	svccc	0x004c833d
 1d0:	004b9f4b 	subeq	r9, fp, fp, asr #30
 1d4:	4b030402 	blmi	c11e4 <startup-0x1ff3ee1c>
 1d8:	03040200 	movweq	r0, #16896	; 0x4200
 1dc:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 1e0:	00580601 	subseq	r0, r8, r1, lsl #12
 1e4:	06020402 	streq	r0, [r2], -r2, lsl #8
 1e8:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 1ec:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 1f0:	3d2f4c51 	stccc	12, cr4, [pc, #-324]!	; b4 <startup-0x1fffff4c>
 1f4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1f8:	4b4b4b3d 	blmi	12d2ef4 <startup-0x1ed2d10c>
 1fc:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 200:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 204:	004a0601 	subeq	r0, sl, r1, lsl #12
 208:	4a020402 	bmi	81218 <startup-0x1ff7ede8>
 20c:	03040200 	movweq	r0, #16896	; 0x4200
 210:	754c064a 	strbvc	r0, [ip, #-1610]	; 0xfffff9b6
 214:	683d1408 	ldmdavs	sp!, {r3, sl, ip}
 218:	4b4c4b3d 	blmi	1312f14 <startup-0x1eced0ec>
 21c:	91c9c93f 	bicls	ip, r9, pc, lsr r9
 220:	92a03dbc 	adcls	r3, r0, #188, 26	; 0x2f00
 224:	03ac6603 			; <UNDEFINED> instruction: 0x03ac6603
 228:	2f68201b 	svccs	0x0068201b
 22c:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 230:	01040200 	mrseq	r0, R12_usr
 234:	67062006 	strvs	r2, [r6, -r6]
 238:	2f2fa03d 	svccs	0x002fa03d
 23c:	214b3e2f 	cmpcs	fp, pc, lsr #28
 240:	2a2f2f2f 	bcs	bcbf04 <startup-0x1f4340fc>
 244:	214c4c5e 	cmpcs	ip, lr, asr ip
 248:	2f4c5e3b 	svccs	0x004c5e3b
 24c:	7418033d 	ldrvc	r0, [r8], #-829	; 0xfffffcc3
 250:	322f2f3d 	eorcc	r2, pc, #61, 30	; 0xf4
 254:	01040200 	mrseq	r0, R12_usr
 258:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 25c:	02005901 	andeq	r5, r0, #16384	; 0x4000
 260:	023b0104 	eorseq	r0, fp, #4, 2
 264:	01010003 	tsteq	r1, r3

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4c726469 	cfldrdmi	mvd6, [r2], #-420	; 0xfffffe5c
   4:	7000776f 	andvc	r7, r0, pc, ror #14
   8:	0078736f 	rsbseq	r7, r8, pc, ror #6
   c:	65786970 	ldrbvs	r6, [r8, #-2416]!	; 0xfffff690
  10:	646f006c 	strbtvs	r0, [pc], #-108	; 18 <startup-0x1fffffe8>
  14:	73655272 	cmnvc	r5, #536870919	; 0x20000007
  18:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
  1c:	6e690064 	cdpvs	0, 6, cr0, cr9, cr4, {3}
  20:	00786564 	rsbseq	r6, r8, r4, ror #10
  24:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
  28:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
  2c:	61620074 	smcvs	8196	; 0x2004
  30:	74006c6c 	strvc	r6, [r0], #-3180	; 0xfffff394
  34:	6d6f6547 	cfstr64vs	mvdx6, [pc, #-284]!	; ffffff20 <ball+0xdffff700>
  38:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
  3c:	6c656400 	cfstrdvs	mvd6, [r5], #-0
  40:	6d5f7961 	vldrvs.16	s15, [pc, #-194]	; ffffff86 <ball+0xdffff766>	; <UNPREDICTABLE>
  44:	6f726369 	svcvs	0x00726369
  48:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  4c:	6f6c2067 	svcvs	0x006c2067
  50:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
  54:	6700746e 	strvs	r7, [r0, -lr, ror #8]
  58:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
  5c:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
  60:	65746972 	ldrbvs	r6, [r4, #-2418]!	; 0xfffff68e
  64:	6d6f635f 	stclvs	3, cr6, [pc, #-380]!	; fffffef0 <ball+0xdffff6d0>
  68:	646e616d 	strbtvs	r6, [lr], #-365	; 0xfffffe93
  6c:	45475000 	strbmi	r5, [r7, #-0]
  70:	54454d4f 	strbpl	r4, [r5], #-3407	; 0xfffff2b1
  74:	76005952 			; <UNDEFINED> instruction: 0x76005952
  78:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xfffff39f
  7c:	61726700 	cmnvs	r2, r0, lsl #14
  80:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  84:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
  88:	735f7261 	cmpvc	pc, #268435462	; 0x10000006
  8c:	65657263 	strbvs	r7, [r5, #-611]!	; 0xfffffd9d
  90:	746f006e 	strbtvc	r0, [pc], #-110	; 98 <startup-0x1fffff68>
  94:	72657079 	rsbvc	r7, r5, #121	; 0x79
  98:	61726700 	cmnvs	r2, r0, lsl #14
  9c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
  a0:	6165725f 	cmnvs	r5, pc, asr r2
  a4:	4f500064 	svcmi	0x00500064
  a8:	00544e49 	subseq	r4, r4, r9, asr #28
  ac:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff671 <ball+0xdfffee51>
  b0:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
  b4:	686f6a2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, fp, sp, lr}^	; <UNPREDICTABLE>
  b8:	672f6e61 	strvs	r6, [pc, -r1, ror #28]!
  bc:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
  c0:	72645f65 	rsbvc	r5, r4, #404	; 0x194
  c4:	2f657669 	svccs	0x00657669
  c8:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  cc:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
  d0:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
  d4:	69472f67 	stmdbvs	r7, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
  d8:	724f2f74 	subvc	r2, pc, #116, 30	; 0x1d0
  dc:	74732f6d 	ldrbtvc	r2, [r3], #-3949	; 0xfffff093
  e0:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  e4:	00632e70 	rsbeq	r2, r3, r0, ror lr
  e8:	79736f70 	ldmdbvc	r3!, {r4, r5, r6, r8, r9, sl, fp, sp, lr}^
  ec:	5c3a4300 	ldcpl	3, cr4, [sl], #-0
  f0:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
  f4:	6f6a5c73 	svcvs	0x006a5c73
  f8:	5c6e6168 	stfple	f6, [lr], #-416	; 0xfffffe60
  fc:	676f6f67 	strbvs	r6, [pc, -r7, ror #30]!
 100:	645f656c 	ldrbvs	r6, [pc], #-1388	; 108 <startup-0x1ffffef8>
 104:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 108:	6f72505c 	svcvs	0x0072505c
 10c:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 110:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 114:	475c676e 	ldrbmi	r6, [ip, -lr, ror #14]
 118:	4f5c7469 	svcmi	0x005c7469
 11c:	6f006d72 	svcvs	0x00006d72
 120:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 124:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 128:	69640064 	stmdbvs	r4!, {r2, r5, r6}^
 12c:	64007872 	strvs	r7, [r0], #-2162	; 0xfffff78e
 130:	00797269 	rsbseq	r7, r9, r9, ror #4
 134:	6570736f 	ldrbvs	r7, [r0, #-879]!	; 0xfffffc91
 138:	00726465 	rsbseq	r6, r2, r5, ror #8
 13c:	70617267 	rsbvc	r7, r1, r7, ror #4
 140:	5f636968 	svcpl	0x00636968
 144:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 148:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
 14c:	5f5f0061 	svcpl	0x005f0061
 150:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 154:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 158:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 15c:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 160:	0079657a 	rsbseq	r6, r9, sl, ror r5
 164:	70617267 	rsbvc	r7, r1, r7, ror #4
 168:	5f636968 	svcpl	0x00636968
 16c:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 170:	61645f65 	cmnvs	r4, r5, ror #30
 174:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 178:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 17c:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 180:	7300696c 	movwvc	r6, #2412	; 0x96c
 184:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 188:	70730078 	rsbsvc	r0, r3, r8, ror r0
 18c:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 190:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 194:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
 198:	75007374 	strvc	r7, [r0, #-884]	; 0xfffffc8c
 19c:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 1a0:	2064656e 	rsbcs	r6, r4, lr, ror #10
 1a4:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
 1a8:	61726700 	cmnvs	r2, r0, lsl #14
 1ac:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 1b0:	7274635f 	rsbsvc	r6, r4, #2080374785	; 0x7c000001
 1b4:	69625f6c 	stmdbvs	r2!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 1b8:	6c635f74 	stclvs	15, cr5, [r3], #-464	; 0xfffffe30
 1bc:	00726165 	rsbseq	r6, r2, r5, ror #2
 1c0:	20554e47 	subscs	r4, r5, r7, asr #28
 1c4:	20393943 	eorscs	r3, r9, r3, asr #18
 1c8:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
 1cc:	30322031 	eorscc	r2, r2, r1, lsr r0
 1d0:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
 1d4:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
 1d8:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
 1dc:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
 1e0:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
 1e4:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
 1e8:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
 1ec:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
 1f0:	6172622d 	cmnvs	r2, sp, lsr #4
 1f4:	2068636e 	rsbcs	r6, r8, lr, ror #6
 1f8:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
 1fc:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
 200:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
 204:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
 208:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 20c:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 210:	616d2d20 	cmnvs	sp, r0, lsr #26
 214:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 218:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 21c:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 220:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
 224:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
 228:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
 22c:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
 230:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
 234:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
 238:	616d2d20 	cmnvs	sp, r0, lsr #26
 23c:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
 240:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
 244:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
 248:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
 24c:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
 250:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
 254:	00393963 	eorseq	r3, r9, r3, ror #18
 258:	70617267 	rsbvc	r7, r1, r7, ror #4
 25c:	5f636968 	svcpl	0x00636968
 260:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 264:	50740065 	rsbspl	r0, r4, r5, rrx
 268:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 26c:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
 270:	6f6c2067 	svcvs	0x006c2067
 274:	7520676e 	strvc	r6, [r0, #-1902]!	; 0xfffff892
 278:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
 27c:	2064656e 	rsbcs	r6, r4, lr, ror #10
 280:	00746e69 	rsbseq	r6, r4, r9, ror #28
 284:	5f746573 	svcpl	0x00746573
 288:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 28c:	735f7463 	cmpvc	pc, #1660944384	; 0x63000000
 290:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 294:	61726700 	cmnvs	r2, r0, lsl #14
 298:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 29c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 2a0:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 2a4:	00657a69 	rsbeq	r7, r5, r9, ror #20
 2a8:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 2ac:	6a626f5f 	bvs	189c030 <startup-0x1e763fd0>
 2b0:	00746365 	rsbseq	r6, r4, r5, ror #6
 2b4:	616c6564 	cmnvs	ip, r4, ror #10
 2b8:	30355f79 	eorscc	r5, r5, r9, ror pc
 2bc:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 2c0:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 2c4:	6e752074 	mrcvs	0, 3, r2, cr5, cr4, {3}
 2c8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 2cc:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 2d0:	4700746e 	strmi	r7, [r0, -lr, ror #8]
 2d4:	004f4950 	subeq	r4, pc, r0, asr r9	; <UNPREDICTABLE>
 2d8:	52726469 	rsbspl	r6, r2, #1761607680	; 0x69000000
 2dc:	72657365 	rsbvc	r7, r5, #-1811939327	; 0x94000001
 2e0:	00646576 	rsbeq	r6, r4, r6, ror r5
 2e4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 2e8:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 2ec:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 2f0:	7267006e 	rsbvc	r0, r7, #110	; 0x6e
 2f4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2f8:	74635f63 	strbtvc	r5, [r3], #-3939	; 0xfffff09d
 2fc:	625f6c72 	subsvs	r6, pc, #29184	; 0x7200
 300:	735f7469 	cmpvc	pc, #1761607680	; 0x69000000
 304:	74007465 	strvc	r7, [r0], #-1125	; 0xfffffb9b
 308:	006a624f 	rsbeq	r6, sl, pc, asr #4
 30c:	48726469 	ldmdami	r2!, {r0, r3, r5, r6, sl, sp, lr}^
 310:	00686769 	rsbeq	r6, r8, r9, ror #14
 314:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 318:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 31c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 320:	67006465 	strvs	r6, [r0, -r5, ror #8]
 324:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 328:	775f6369 	ldrbvc	r6, [pc, -r9, ror #6]
 32c:	5f746961 	svcpl	0x00746961
 330:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
 334:	6c630079 	stclvs	0, cr0, [r3], #-484	; 0xfffffe1c
 338:	5f726165 	svcpl	0x00726165
 33c:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 340:	62007463 	andvs	r7, r0, #1660944384	; 0x63000000
 344:	5f6c6c61 	svcpl	0x006c6c61
 348:	6d6f6567 	cfstr64vs	mvdx6, [pc, #-412]!	; 1b4 <startup-0x1ffffe4c>
 34c:	79727465 	ldmdbvc	r2!, {r0, r2, r5, r6, sl, ip, sp, lr}^
 350:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 354:	325f7961 	subscc	r7, pc, #1589248	; 0x184000
 358:	736e3035 	cmnvc	lr, #53	; 0x35
 35c:	73616d00 	cmnvc	r1, #0, 26
 360:	6573006b 	ldrbvs	r0, [r3, #-107]!	; 0xffffff95
 364:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 368:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 36c:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 1a4 <startup-0x1ffffe5c>
 370:	0072656c 	rsbseq	r6, r2, ip, ror #10
 374:	64707570 	ldrbtvs	r7, [r0], #-1392	; 0xfffffa90
 378:	6f6d0072 	svcvs	0x006d0072
 37c:	00726564 	rsbseq	r6, r2, r4, ror #10
 380:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 384:	00707574 	rsbseq	r7, r0, r4, ror r5
 388:	4a424f50 	bmi	10940d0 <startup-0x1ef6bf30>
 38c:	00544345 	subseq	r4, r4, r5, asr #6
 390:	4872646f 	ldmdami	r2!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
 394:	00686769 	rsbeq	r6, r8, r9, ror #14
 398:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 39c:	6a626f5f 	bvs	189c120 <startup-0x1e763ee0>
 3a0:	00746365 	rsbseq	r6, r4, r5, ror #6
 3a4:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 3a8:	72646f00 	rsbvc	r6, r4, #0, 30
 3ac:	00776f4c 	rsbseq	r6, r7, ip, asr #30

Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffeaee>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000020 	andeq	r0, r0, r0, lsr #32
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	180e4101 	stmdane	lr, {r0, r8, lr}
  3c:	00070d41 	andeq	r0, r7, r1, asr #26
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00000000 	andeq	r0, r0, r0
  48:	20000030 	andcs	r0, r0, r0, lsr r0
  4c:	00000052 	andeq	r0, r0, r2, asr r0
  50:	40080e41 	andmi	r0, r8, r1, asr #28
  54:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  58:	180e4101 	stmdane	lr, {r0, r8, lr}
  5c:	00070d41 	andeq	r0, r7, r1, asr #26
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	00000000 	andeq	r0, r0, r0
  68:	20000082 	andcs	r0, r0, r2, lsl #1
  6c:	00000052 	andeq	r0, r0, r2, asr r0
  70:	40080e41 	andmi	r0, r8, r1, asr #28
  74:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  78:	180e4101 	stmdane	lr, {r0, r8, lr}
  7c:	00070d41 	andeq	r0, r7, r1, asr #26
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	00000000 	andeq	r0, r0, r0
  88:	200000d4 	ldrdcs	r0, [r0], -r4
  8c:	00000104 	andeq	r0, r0, r4, lsl #2
  90:	40080e41 	andmi	r0, r8, r1, asr #28
  94:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  98:	180e4101 	stmdane	lr, {r0, r8, lr}
  9c:	00070d41 	andeq	r0, r7, r1, asr #26
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000000 	andeq	r0, r0, r0
  a8:	200001d8 	ldrdcs	r0, [r0], -r8
  ac:	00000050 	andeq	r0, r0, r0, asr r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	180e4101 	stmdane	lr, {r0, r8, lr}
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000000 	andeq	r0, r0, r0
  c8:	20000228 	andcs	r0, r0, r8, lsr #4
  cc:	00000050 	andeq	r0, r0, r0, asr r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	180e4101 	stmdane	lr, {r0, r8, lr}
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	20000278 	andcs	r0, r0, r8, ror r2
  ec:	0000005a 	andeq	r0, r0, sl, asr r0
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f8:	100e4101 	andne	r4, lr, r1, lsl #2
  fc:	00070d41 	andeq	r0, r7, r1, asr #26
 100:	0000001c 	andeq	r0, r0, ip, lsl r0
 104:	00000000 	andeq	r0, r0, r0
 108:	200002d2 	ldrdcs	r0, [r0], -r2
 10c:	0000006a 	andeq	r0, r0, sl, rrx
 110:	40080e41 	andmi	r0, r8, r1, asr #28
 114:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 118:	100e4101 	andne	r4, lr, r1, lsl #2
 11c:	00070d41 	andeq	r0, r7, r1, asr #26
 120:	0000001c 	andeq	r0, r0, ip, lsl r0
 124:	00000000 	andeq	r0, r0, r0
 128:	2000033c 	andcs	r0, r0, ip, lsr r3
 12c:	00000090 	muleq	r0, r0, r0
 130:	40080e41 	andmi	r0, r8, r1, asr #28
 134:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 138:	180e4101 	stmdane	lr, {r0, r8, lr}
 13c:	00070d41 	andeq	r0, r7, r1, asr #26
 140:	0000001c 	andeq	r0, r0, ip, lsl r0
 144:	00000000 	andeq	r0, r0, r0
 148:	200003cc 	andcs	r0, r0, ip, asr #7
 14c:	0000002a 	andeq	r0, r0, sl, lsr #32
 150:	40080e41 	andmi	r0, r8, r1, asr #28
 154:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 158:	100e4101 	andne	r4, lr, r1, lsl #2
 15c:	00070d41 	andeq	r0, r7, r1, asr #26
 160:	0000001c 	andeq	r0, r0, ip, lsl r0
 164:	00000000 	andeq	r0, r0, r0
 168:	200003f6 	strdcs	r0, [r0], -r6
 16c:	0000007e 	andeq	r0, r0, lr, ror r0
 170:	40080e41 	andmi	r0, r8, r1, asr #28
 174:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 178:	100e4101 	andne	r4, lr, r1, lsl #2
 17c:	00070d41 	andeq	r0, r7, r1, asr #26
 180:	0000001c 	andeq	r0, r0, ip, lsl r0
 184:	00000000 	andeq	r0, r0, r0
 188:	20000474 	andcs	r0, r0, r4, ror r4
 18c:	00000040 	andeq	r0, r0, r0, asr #32
 190:	40080e41 	andmi	r0, r8, r1, asr #28
 194:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 198:	100e4101 	andne	r4, lr, r1, lsl #2
 19c:	00070d41 	andeq	r0, r7, r1, asr #26
 1a0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	200004b4 			; <UNDEFINED> instruction: 0x200004b4
 1ac:	00000046 	andeq	r0, r0, r6, asr #32
 1b0:	40080e41 	andmi	r0, r8, r1, asr #28
 1b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1b8:	100e4101 	andne	r4, lr, r1, lsl #2
 1bc:	00070d41 	andeq	r0, r7, r1, asr #26
 1c0:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	200004fa 	strdcs	r0, [r0], -sl
 1cc:	00000066 	andeq	r0, r0, r6, rrx
 1d0:	40080e41 	andmi	r0, r8, r1, asr #28
 1d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d8:	100e4101 	andne	r4, lr, r1, lsl #2
 1dc:	00070d41 	andeq	r0, r7, r1, asr #26
 1e0:	00000018 	andeq	r0, r0, r8, lsl r0
 1e4:	00000000 	andeq	r0, r0, r0
 1e8:	20000560 	andcs	r0, r0, r0, ror #10
 1ec:	0000005c 	andeq	r0, r0, ip, asr r0
 1f0:	40080e41 	andmi	r0, r8, r1, asr #28
 1f4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f8:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	00000000 	andeq	r0, r0, r0
 204:	200005bc 			; <UNDEFINED> instruction: 0x200005bc
 208:	00000140 	andeq	r0, r0, r0, asr #2
 20c:	40100e41 	andsmi	r0, r0, r1, asr #28
 210:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 214:	02874003 	addeq	r4, r7, #3
 218:	41018e40 	tstmi	r1, r0, asr #28
 21c:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 220:	00000007 	andeq	r0, r0, r7
 224:	00000018 	andeq	r0, r0, r8, lsl r0
 228:	00000000 	andeq	r0, r0, r0
 22c:	200006fc 	strdcs	r0, [r0], -ip
 230:	00000044 	andeq	r0, r0, r4, asr #32
 234:	40080e41 	andmi	r0, r8, r1, asr #28
 238:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 23c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 240:	00000018 	andeq	r0, r0, r8, lsl r0
 244:	00000000 	andeq	r0, r0, r0
 248:	20000740 	andcs	r0, r0, r0, asr #14
 24c:	00000012 	andeq	r0, r0, r2, lsl r0
 250:	40080e41 	andmi	r0, r8, r1, asr #28
 254:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 258:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 25c:	0000001c 	andeq	r0, r0, ip, lsl r0
 260:	00000000 	andeq	r0, r0, r0
 264:	20000752 	andcs	r0, r0, r2, asr r7
 268:	0000002c 	andeq	r0, r0, ip, lsr #32
 26c:	40080e41 	andmi	r0, r8, r1, asr #28
 270:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 274:	100e4101 	andne	r4, lr, r1, lsl #2
 278:	00070d41 	andeq	r0, r7, r1, asr #26
 27c:	0000001c 	andeq	r0, r0, ip, lsl r0
 280:	00000000 	andeq	r0, r0, r0
 284:	2000077e 	andcs	r0, r0, lr, ror r7
 288:	00000022 	andeq	r0, r0, r2, lsr #32
 28c:	40080e41 	andmi	r0, r8, r1, asr #28
 290:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 294:	100e4101 	andne	r4, lr, r1, lsl #2
 298:	00070d41 	andeq	r0, r7, r1, asr #26
 29c:	00000018 	andeq	r0, r0, r8, lsl r0
 2a0:	00000000 	andeq	r0, r0, r0
 2a4:	200007a0 	andcs	r0, r0, r0, lsr #15
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	40080e41 	andmi	r0, r8, r1, asr #28
 2b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 2bc:	00000000 	andeq	r0, r0, r0
 2c0:	200007b8 			; <UNDEFINED> instruction: 0x200007b8
 2c4:	00000034 	andeq	r0, r0, r4, lsr r0
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	100e4101 	andne	r4, lr, r1, lsl #2
 2d4:	00070d41 	andeq	r0, r7, r1, asr #26
