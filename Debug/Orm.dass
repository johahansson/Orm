
./Debug/Orm.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fc26 	bl	20000854 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <set_object_speed>:
#include "ball.h"

void set_object_speed(POBJECT o, int speedx, int speedy) {
20000010:	b580      	push	{r7, lr}
20000012:	b084      	sub	sp, #16
20000014:	af00      	add	r7, sp, #0
20000016:	60f8      	str	r0, [r7, #12]
20000018:	60b9      	str	r1, [r7, #8]
2000001a:	607a      	str	r2, [r7, #4]
	o->dirx = speedx;
2000001c:	68fb      	ldr	r3, [r7, #12]
2000001e:	68ba      	ldr	r2, [r7, #8]
20000020:	605a      	str	r2, [r3, #4]
	o->diry = speedy;
20000022:	68fb      	ldr	r3, [r7, #12]
20000024:	687a      	ldr	r2, [r7, #4]
20000026:	609a      	str	r2, [r3, #8]
}
20000028:	46c0      	nop			; (mov r8, r8)
2000002a:	46bd      	mov	sp, r7
2000002c:	b004      	add	sp, #16
2000002e:	bd80      	pop	{r7, pc}

20000030 <draw_object>:

void draw_object(POBJECT o) {
20000030:	b580      	push	{r7, lr}
20000032:	b084      	sub	sp, #16
20000034:	af00      	add	r7, sp, #0
20000036:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000038:	2300      	movs	r3, #0
2000003a:	60fb      	str	r3, [r7, #12]
2000003c:	e017      	b.n	2000006e <draw_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 1);
2000003e:	687b      	ldr	r3, [r7, #4]
20000040:	681a      	ldr	r2, [r3, #0]
20000042:	68fb      	ldr	r3, [r7, #12]
20000044:	3304      	adds	r3, #4
20000046:	005b      	lsls	r3, r3, #1
20000048:	18d3      	adds	r3, r2, r3
2000004a:	3304      	adds	r3, #4
2000004c:	781b      	ldrb	r3, [r3, #0]
2000004e:	0018      	movs	r0, r3
20000050:	687b      	ldr	r3, [r7, #4]
20000052:	681a      	ldr	r2, [r3, #0]
20000054:	68fb      	ldr	r3, [r7, #12]
20000056:	3304      	adds	r3, #4
20000058:	005b      	lsls	r3, r3, #1
2000005a:	18d3      	adds	r3, r2, r3
2000005c:	3305      	adds	r3, #5
2000005e:	781b      	ldrb	r3, [r3, #0]
20000060:	2201      	movs	r2, #1
20000062:	0019      	movs	r1, r3
20000064:	f000 fb32 	bl	200006cc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
20000068:	68fb      	ldr	r3, [r7, #12]
2000006a:	3301      	adds	r3, #1
2000006c:	60fb      	str	r3, [r7, #12]
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	681b      	ldr	r3, [r3, #0]
20000072:	681b      	ldr	r3, [r3, #0]
20000074:	68fa      	ldr	r2, [r7, #12]
20000076:	429a      	cmp	r2, r3
20000078:	dbe1      	blt.n	2000003e <draw_object+0xe>
	}
}
2000007a:	46c0      	nop			; (mov r8, r8)
2000007c:	46bd      	mov	sp, r7
2000007e:	b004      	add	sp, #16
20000080:	bd80      	pop	{r7, pc}

20000082 <clear_object>:

void clear_object(POBJECT o) {
20000082:	b580      	push	{r7, lr}
20000084:	b084      	sub	sp, #16
20000086:	af00      	add	r7, sp, #0
20000088:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < o->geo->numpoints; i++) {
2000008a:	2300      	movs	r3, #0
2000008c:	60fb      	str	r3, [r7, #12]
2000008e:	e017      	b.n	200000c0 <clear_object+0x3e>
		pixel(o->geo->px[i].x, o->geo->px[i].y, 0);
20000090:	687b      	ldr	r3, [r7, #4]
20000092:	681a      	ldr	r2, [r3, #0]
20000094:	68fb      	ldr	r3, [r7, #12]
20000096:	3304      	adds	r3, #4
20000098:	005b      	lsls	r3, r3, #1
2000009a:	18d3      	adds	r3, r2, r3
2000009c:	3304      	adds	r3, #4
2000009e:	781b      	ldrb	r3, [r3, #0]
200000a0:	0018      	movs	r0, r3
200000a2:	687b      	ldr	r3, [r7, #4]
200000a4:	681a      	ldr	r2, [r3, #0]
200000a6:	68fb      	ldr	r3, [r7, #12]
200000a8:	3304      	adds	r3, #4
200000aa:	005b      	lsls	r3, r3, #1
200000ac:	18d3      	adds	r3, r2, r3
200000ae:	3305      	adds	r3, #5
200000b0:	781b      	ldrb	r3, [r3, #0]
200000b2:	2200      	movs	r2, #0
200000b4:	0019      	movs	r1, r3
200000b6:	f000 fb09 	bl	200006cc <pixel>
	for(int i = 0; i < o->geo->numpoints; i++) {
200000ba:	68fb      	ldr	r3, [r7, #12]
200000bc:	3301      	adds	r3, #1
200000be:	60fb      	str	r3, [r7, #12]
200000c0:	687b      	ldr	r3, [r7, #4]
200000c2:	681b      	ldr	r3, [r3, #0]
200000c4:	681b      	ldr	r3, [r3, #0]
200000c6:	68fa      	ldr	r2, [r7, #12]
200000c8:	429a      	cmp	r2, r3
200000ca:	dbe1      	blt.n	20000090 <clear_object+0xe>
	}
}
200000cc:	46c0      	nop			; (mov r8, r8)
200000ce:	46bd      	mov	sp, r7
200000d0:	b004      	add	sp, #16
200000d2:	bd80      	pop	{r7, pc}

200000d4 <move_object>:

void move_object(POBJECT o) {
200000d4:	b580      	push	{r7, lr}
200000d6:	b084      	sub	sp, #16
200000d8:	af00      	add	r7, sp, #0
200000da:	6078      	str	r0, [r7, #4]
	clear_object(o);
200000dc:	687b      	ldr	r3, [r7, #4]
200000de:	0018      	movs	r0, r3
200000e0:	f7ff ffcf 	bl	20000082 <clear_object>
	
	for(int i = 0; i < o->geo->numpoints; i++) {
200000e4:	2300      	movs	r3, #0
200000e6:	60fb      	str	r3, [r7, #12]
200000e8:	e02e      	b.n	20000148 <move_object+0x74>
		o->geo->px[i].x += o->dirx;
200000ea:	687b      	ldr	r3, [r7, #4]
200000ec:	681a      	ldr	r2, [r3, #0]
200000ee:	68fb      	ldr	r3, [r7, #12]
200000f0:	3304      	adds	r3, #4
200000f2:	005b      	lsls	r3, r3, #1
200000f4:	18d3      	adds	r3, r2, r3
200000f6:	3304      	adds	r3, #4
200000f8:	7818      	ldrb	r0, [r3, #0]
200000fa:	687b      	ldr	r3, [r7, #4]
200000fc:	685b      	ldr	r3, [r3, #4]
200000fe:	b2d9      	uxtb	r1, r3
20000100:	687b      	ldr	r3, [r7, #4]
20000102:	681a      	ldr	r2, [r3, #0]
20000104:	1843      	adds	r3, r0, r1
20000106:	b2d9      	uxtb	r1, r3
20000108:	68fb      	ldr	r3, [r7, #12]
2000010a:	3304      	adds	r3, #4
2000010c:	005b      	lsls	r3, r3, #1
2000010e:	18d3      	adds	r3, r2, r3
20000110:	3304      	adds	r3, #4
20000112:	1c0a      	adds	r2, r1, #0
20000114:	701a      	strb	r2, [r3, #0]
		o->geo->px[i].y += o->diry;
20000116:	687b      	ldr	r3, [r7, #4]
20000118:	681a      	ldr	r2, [r3, #0]
2000011a:	68fb      	ldr	r3, [r7, #12]
2000011c:	3304      	adds	r3, #4
2000011e:	005b      	lsls	r3, r3, #1
20000120:	18d3      	adds	r3, r2, r3
20000122:	3305      	adds	r3, #5
20000124:	7818      	ldrb	r0, [r3, #0]
20000126:	687b      	ldr	r3, [r7, #4]
20000128:	689b      	ldr	r3, [r3, #8]
2000012a:	b2d9      	uxtb	r1, r3
2000012c:	687b      	ldr	r3, [r7, #4]
2000012e:	681a      	ldr	r2, [r3, #0]
20000130:	1843      	adds	r3, r0, r1
20000132:	b2d9      	uxtb	r1, r3
20000134:	68fb      	ldr	r3, [r7, #12]
20000136:	3304      	adds	r3, #4
20000138:	005b      	lsls	r3, r3, #1
2000013a:	18d3      	adds	r3, r2, r3
2000013c:	3305      	adds	r3, #5
2000013e:	1c0a      	adds	r2, r1, #0
20000140:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < o->geo->numpoints; i++) {
20000142:	68fb      	ldr	r3, [r7, #12]
20000144:	3301      	adds	r3, #1
20000146:	60fb      	str	r3, [r7, #12]
20000148:	687b      	ldr	r3, [r7, #4]
2000014a:	681b      	ldr	r3, [r3, #0]
2000014c:	681b      	ldr	r3, [r3, #0]
2000014e:	68fa      	ldr	r2, [r7, #12]
20000150:	429a      	cmp	r2, r3
20000152:	dbca      	blt.n	200000ea <move_object+0x16>
	}
	o->posx += o->dirx;
20000154:	687b      	ldr	r3, [r7, #4]
20000156:	68da      	ldr	r2, [r3, #12]
20000158:	687b      	ldr	r3, [r7, #4]
2000015a:	685b      	ldr	r3, [r3, #4]
2000015c:	18d2      	adds	r2, r2, r3
2000015e:	687b      	ldr	r3, [r7, #4]
20000160:	60da      	str	r2, [r3, #12]
	o->posy += o->diry;
20000162:	687b      	ldr	r3, [r7, #4]
20000164:	691a      	ldr	r2, [r3, #16]
20000166:	687b      	ldr	r3, [r7, #4]
20000168:	689b      	ldr	r3, [r3, #8]
2000016a:	18d2      	adds	r2, r2, r3
2000016c:	687b      	ldr	r3, [r7, #4]
2000016e:	611a      	str	r2, [r3, #16]
	
	if(o->posx < 1)
20000170:	687b      	ldr	r3, [r7, #4]
20000172:	68db      	ldr	r3, [r3, #12]
20000174:	2b00      	cmp	r3, #0
20000176:	dc04      	bgt.n	20000182 <move_object+0xae>
		o->dirx *= -1;
20000178:	687b      	ldr	r3, [r7, #4]
2000017a:	685b      	ldr	r3, [r3, #4]
2000017c:	425a      	negs	r2, r3
2000017e:	687b      	ldr	r3, [r7, #4]
20000180:	605a      	str	r2, [r3, #4]
	if((o->posx + o->geo->sizex) > 128)
20000182:	687b      	ldr	r3, [r7, #4]
20000184:	68da      	ldr	r2, [r3, #12]
20000186:	687b      	ldr	r3, [r7, #4]
20000188:	681b      	ldr	r3, [r3, #0]
2000018a:	685b      	ldr	r3, [r3, #4]
2000018c:	18d3      	adds	r3, r2, r3
2000018e:	2b80      	cmp	r3, #128	; 0x80
20000190:	dd04      	ble.n	2000019c <move_object+0xc8>
		o->dirx *= -1;
20000192:	687b      	ldr	r3, [r7, #4]
20000194:	685b      	ldr	r3, [r3, #4]
20000196:	425a      	negs	r2, r3
20000198:	687b      	ldr	r3, [r7, #4]
2000019a:	605a      	str	r2, [r3, #4]
	if(o->posy < 1)
2000019c:	687b      	ldr	r3, [r7, #4]
2000019e:	691b      	ldr	r3, [r3, #16]
200001a0:	2b00      	cmp	r3, #0
200001a2:	dc04      	bgt.n	200001ae <move_object+0xda>
		o->diry *= -1;
200001a4:	687b      	ldr	r3, [r7, #4]
200001a6:	689b      	ldr	r3, [r3, #8]
200001a8:	425a      	negs	r2, r3
200001aa:	687b      	ldr	r3, [r7, #4]
200001ac:	609a      	str	r2, [r3, #8]
	if((o->posy + o->geo->sizey) > 64)
200001ae:	687b      	ldr	r3, [r7, #4]
200001b0:	691a      	ldr	r2, [r3, #16]
200001b2:	687b      	ldr	r3, [r7, #4]
200001b4:	681b      	ldr	r3, [r3, #0]
200001b6:	689b      	ldr	r3, [r3, #8]
200001b8:	18d3      	adds	r3, r2, r3
200001ba:	2b40      	cmp	r3, #64	; 0x40
200001bc:	dd04      	ble.n	200001c8 <move_object+0xf4>
		o->diry *= -1;
200001be:	687b      	ldr	r3, [r7, #4]
200001c0:	689b      	ldr	r3, [r3, #8]
200001c2:	425a      	negs	r2, r3
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	609a      	str	r2, [r3, #8]
		
	draw_object(o);
200001c8:	687b      	ldr	r3, [r7, #4]
200001ca:	0018      	movs	r0, r3
200001cc:	f7ff ff30 	bl	20000030 <draw_object>
}
200001d0:	46c0      	nop			; (mov r8, r8)
200001d2:	46bd      	mov	sp, r7
200001d4:	b004      	add	sp, #16
200001d6:	bd80      	pop	{r7, pc}

200001d8 <kbdActivate>:
#include "defines.h"
#include "keypad.h"

void kbdActivate(unsigned int row){
200001d8:	b580      	push	{r7, lr}
200001da:	b082      	sub	sp, #8
200001dc:	af00      	add	r7, sp, #0
200001de:	6078      	str	r0, [r7, #4]
	switch(row){
200001e0:	687b      	ldr	r3, [r7, #4]
200001e2:	2b04      	cmp	r3, #4
200001e4:	d819      	bhi.n	2000021a <kbdActivate+0x42>
200001e6:	687b      	ldr	r3, [r7, #4]
200001e8:	009a      	lsls	r2, r3, #2
200001ea:	4b0e      	ldr	r3, [pc, #56]	; (20000224 <kbdActivate+0x4c>)
200001ec:	18d3      	adds	r3, r2, r3
200001ee:	681b      	ldr	r3, [r3, #0]
200001f0:	469f      	mov	pc, r3
		case 1: GPIO_D->odrHigh = 0x10; break;
200001f2:	4b0d      	ldr	r3, [pc, #52]	; (20000228 <kbdActivate+0x50>)
200001f4:	2210      	movs	r2, #16
200001f6:	755a      	strb	r2, [r3, #21]
200001f8:	e00f      	b.n	2000021a <kbdActivate+0x42>
		case 2: GPIO_D->odrHigh = 0x20; break;
200001fa:	4b0b      	ldr	r3, [pc, #44]	; (20000228 <kbdActivate+0x50>)
200001fc:	2220      	movs	r2, #32
200001fe:	755a      	strb	r2, [r3, #21]
20000200:	e00b      	b.n	2000021a <kbdActivate+0x42>
		case 3: GPIO_D->odrHigh = 0x40; break;
20000202:	4b09      	ldr	r3, [pc, #36]	; (20000228 <kbdActivate+0x50>)
20000204:	2240      	movs	r2, #64	; 0x40
20000206:	755a      	strb	r2, [r3, #21]
20000208:	e007      	b.n	2000021a <kbdActivate+0x42>
		case 4: GPIO_D->odrHigh = 0x80; break;
2000020a:	4b07      	ldr	r3, [pc, #28]	; (20000228 <kbdActivate+0x50>)
2000020c:	2280      	movs	r2, #128	; 0x80
2000020e:	755a      	strb	r2, [r3, #21]
20000210:	e003      	b.n	2000021a <kbdActivate+0x42>
		case 0: GPIO_D->odrHigh = 0x00; break;
20000212:	4b05      	ldr	r3, [pc, #20]	; (20000228 <kbdActivate+0x50>)
20000214:	2200      	movs	r2, #0
20000216:	755a      	strb	r2, [r3, #21]
20000218:	46c0      	nop			; (mov r8, r8)
	}
}
2000021a:	46c0      	nop			; (mov r8, r8)
2000021c:	46bd      	mov	sp, r7
2000021e:	b002      	add	sp, #8
20000220:	bd80      	pop	{r7, pc}
20000222:	46c0      	nop			; (mov r8, r8)
20000224:	200009dc 	ldrdcs	r0, [r0], -ip
20000228:	40020c00 	andmi	r0, r2, r0, lsl #24

2000022c <kbdGetCol>:

int kbdGetCol(void){
2000022c:	b580      	push	{r7, lr}
2000022e:	b082      	sub	sp, #8
20000230:	af00      	add	r7, sp, #0
	unsigned char c;
	c = GPIO_D->idrHigh;
20000232:	4a12      	ldr	r2, [pc, #72]	; (2000027c <kbdGetCol+0x50>)
20000234:	1dfb      	adds	r3, r7, #7
20000236:	7c52      	ldrb	r2, [r2, #17]
20000238:	701a      	strb	r2, [r3, #0]
	if(c & 0x8) return 4;
2000023a:	1dfb      	adds	r3, r7, #7
2000023c:	781b      	ldrb	r3, [r3, #0]
2000023e:	2208      	movs	r2, #8
20000240:	4013      	ands	r3, r2
20000242:	d001      	beq.n	20000248 <kbdGetCol+0x1c>
20000244:	2304      	movs	r3, #4
20000246:	e015      	b.n	20000274 <kbdGetCol+0x48>
	if(c & 0x4) return 3;
20000248:	1dfb      	adds	r3, r7, #7
2000024a:	781b      	ldrb	r3, [r3, #0]
2000024c:	2204      	movs	r2, #4
2000024e:	4013      	ands	r3, r2
20000250:	d001      	beq.n	20000256 <kbdGetCol+0x2a>
20000252:	2303      	movs	r3, #3
20000254:	e00e      	b.n	20000274 <kbdGetCol+0x48>
	if(c & 0x2) return 2;
20000256:	1dfb      	adds	r3, r7, #7
20000258:	781b      	ldrb	r3, [r3, #0]
2000025a:	2202      	movs	r2, #2
2000025c:	4013      	ands	r3, r2
2000025e:	d001      	beq.n	20000264 <kbdGetCol+0x38>
20000260:	2302      	movs	r3, #2
20000262:	e007      	b.n	20000274 <kbdGetCol+0x48>
	if(c & 0x1) return 1;
20000264:	1dfb      	adds	r3, r7, #7
20000266:	781b      	ldrb	r3, [r3, #0]
20000268:	2201      	movs	r2, #1
2000026a:	4013      	ands	r3, r2
2000026c:	d001      	beq.n	20000272 <kbdGetCol+0x46>
2000026e:	2301      	movs	r3, #1
20000270:	e000      	b.n	20000274 <kbdGetCol+0x48>
	return 0;
20000272:	2300      	movs	r3, #0
}
20000274:	0018      	movs	r0, r3
20000276:	46bd      	mov	sp, r7
20000278:	b002      	add	sp, #8
2000027a:	bd80      	pop	{r7, pc}
2000027c:	40020c00 	andmi	r0, r2, r0, lsl #24

20000280 <keyb>:

unsigned char keyb(void){
20000280:	b590      	push	{r4, r7, lr}
20000282:	b087      	sub	sp, #28
20000284:	af00      	add	r7, sp, #0
	unsigned char key[] = {1,2,3,0xA,4,5,6,0xB,7,8,9,0xC,0xE,0,0xF,0xD};
20000286:	003b      	movs	r3, r7
20000288:	4a16      	ldr	r2, [pc, #88]	; (200002e4 <keyb+0x64>)
2000028a:	ca13      	ldmia	r2!, {r0, r1, r4}
2000028c:	c313      	stmia	r3!, {r0, r1, r4}
2000028e:	6812      	ldr	r2, [r2, #0]
20000290:	601a      	str	r2, [r3, #0]
	int row, col;
	for(row = 1; row <= 4; row++){
20000292:	2301      	movs	r3, #1
20000294:	617b      	str	r3, [r7, #20]
20000296:	e019      	b.n	200002cc <keyb+0x4c>
		kbdActivate(row);
20000298:	697b      	ldr	r3, [r7, #20]
2000029a:	0018      	movs	r0, r3
2000029c:	f7ff ff9c 	bl	200001d8 <kbdActivate>
		if(col = kbdGetCol()){
200002a0:	f7ff ffc4 	bl	2000022c <kbdGetCol>
200002a4:	0003      	movs	r3, r0
200002a6:	613b      	str	r3, [r7, #16]
200002a8:	693b      	ldr	r3, [r7, #16]
200002aa:	2b00      	cmp	r3, #0
200002ac:	d00b      	beq.n	200002c6 <keyb+0x46>
			kbdActivate(0);
200002ae:	2000      	movs	r0, #0
200002b0:	f7ff ff92 	bl	200001d8 <kbdActivate>
			return key [4*(row-1)+(col-1)];
200002b4:	697b      	ldr	r3, [r7, #20]
200002b6:	3b01      	subs	r3, #1
200002b8:	009a      	lsls	r2, r3, #2
200002ba:	693b      	ldr	r3, [r7, #16]
200002bc:	3b01      	subs	r3, #1
200002be:	18d3      	adds	r3, r2, r3
200002c0:	003a      	movs	r2, r7
200002c2:	5cd3      	ldrb	r3, [r2, r3]
200002c4:	e009      	b.n	200002da <keyb+0x5a>
	for(row = 1; row <= 4; row++){
200002c6:	697b      	ldr	r3, [r7, #20]
200002c8:	3301      	adds	r3, #1
200002ca:	617b      	str	r3, [r7, #20]
200002cc:	697b      	ldr	r3, [r7, #20]
200002ce:	2b04      	cmp	r3, #4
200002d0:	dde2      	ble.n	20000298 <keyb+0x18>
		}
	}
	kbdActivate(0);
200002d2:	2000      	movs	r0, #0
200002d4:	f7ff ff80 	bl	200001d8 <kbdActivate>
	return 0xFF;
200002d8:	23ff      	movs	r3, #255	; 0xff
}
200002da:	0018      	movs	r0, r3
200002dc:	46bd      	mov	sp, r7
200002de:	b007      	add	sp, #28
200002e0:	bd90      	pop	{r4, r7, pc}
200002e2:	46c0      	nop			; (mov r8, r8)
200002e4:	200009f0 	strdcs	r0, [r0], -r0	; <UNPREDICTABLE>

200002e8 <graphic_ctrl_bit_set>:
#include <stdint.h>
#include "graphics.h"
#include "defines.h"

static void graphic_ctrl_bit_set(uint8_t x) {
200002e8:	b580      	push	{r7, lr}
200002ea:	b084      	sub	sp, #16
200002ec:	af00      	add	r7, sp, #0
200002ee:	0002      	movs	r2, r0
200002f0:	1dfb      	adds	r3, r7, #7
200002f2:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
200002f4:	4a0f      	ldr	r2, [pc, #60]	; (20000334 <graphic_ctrl_bit_set+0x4c>)
200002f6:	200f      	movs	r0, #15
200002f8:	183b      	adds	r3, r7, r0
200002fa:	7d12      	ldrb	r2, [r2, #20]
200002fc:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
200002fe:	183b      	adds	r3, r7, r0
20000300:	183a      	adds	r2, r7, r0
20000302:	7812      	ldrb	r2, [r2, #0]
20000304:	2104      	movs	r1, #4
20000306:	438a      	bics	r2, r1
20000308:	701a      	strb	r2, [r3, #0]
	c |= (~B_SELECT & x);
2000030a:	1dfb      	adds	r3, r7, #7
2000030c:	781b      	ldrb	r3, [r3, #0]
2000030e:	b25b      	sxtb	r3, r3
20000310:	2204      	movs	r2, #4
20000312:	4393      	bics	r3, r2
20000314:	b25a      	sxtb	r2, r3
20000316:	183b      	adds	r3, r7, r0
20000318:	781b      	ldrb	r3, [r3, #0]
2000031a:	b25b      	sxtb	r3, r3
2000031c:	4313      	orrs	r3, r2
2000031e:	b25a      	sxtb	r2, r3
20000320:	183b      	adds	r3, r7, r0
20000322:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000324:	4a03      	ldr	r2, [pc, #12]	; (20000334 <graphic_ctrl_bit_set+0x4c>)
20000326:	183b      	adds	r3, r7, r0
20000328:	781b      	ldrb	r3, [r3, #0]
2000032a:	7513      	strb	r3, [r2, #20]
}
2000032c:	46c0      	nop			; (mov r8, r8)
2000032e:	46bd      	mov	sp, r7
20000330:	b004      	add	sp, #16
20000332:	bd80      	pop	{r7, pc}
20000334:	40021000 	andmi	r1, r2, r0

20000338 <graphic_ctrl_bit_clear>:

static void graphic_ctrl_bit_clear(uint8_t x) {
20000338:	b580      	push	{r7, lr}
2000033a:	b084      	sub	sp, #16
2000033c:	af00      	add	r7, sp, #0
2000033e:	0002      	movs	r2, r0
20000340:	1dfb      	adds	r3, r7, #7
20000342:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	c = GPIO_E->odrLow;
20000344:	4a0f      	ldr	r2, [pc, #60]	; (20000384 <graphic_ctrl_bit_clear+0x4c>)
20000346:	200f      	movs	r0, #15
20000348:	183b      	adds	r3, r7, r0
2000034a:	7d12      	ldrb	r2, [r2, #20]
2000034c:	701a      	strb	r2, [r3, #0]
	c &= ~B_SELECT;
2000034e:	183b      	adds	r3, r7, r0
20000350:	183a      	adds	r2, r7, r0
20000352:	7812      	ldrb	r2, [r2, #0]
20000354:	2104      	movs	r1, #4
20000356:	438a      	bics	r2, r1
20000358:	701a      	strb	r2, [r3, #0]
	c &= ~x;
2000035a:	1dfb      	adds	r3, r7, #7
2000035c:	781b      	ldrb	r3, [r3, #0]
2000035e:	b25b      	sxtb	r3, r3
20000360:	43db      	mvns	r3, r3
20000362:	b25b      	sxtb	r3, r3
20000364:	183a      	adds	r2, r7, r0
20000366:	7812      	ldrb	r2, [r2, #0]
20000368:	b252      	sxtb	r2, r2
2000036a:	4013      	ands	r3, r2
2000036c:	b25a      	sxtb	r2, r3
2000036e:	183b      	adds	r3, r7, r0
20000370:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrLow = c;
20000372:	4a04      	ldr	r2, [pc, #16]	; (20000384 <graphic_ctrl_bit_clear+0x4c>)
20000374:	183b      	adds	r3, r7, r0
20000376:	781b      	ldrb	r3, [r3, #0]
20000378:	7513      	strb	r3, [r2, #20]
}
2000037a:	46c0      	nop			; (mov r8, r8)
2000037c:	46bd      	mov	sp, r7
2000037e:	b004      	add	sp, #16
20000380:	bd80      	pop	{r7, pc}
20000382:	46c0      	nop			; (mov r8, r8)
20000384:	40021000 	andmi	r1, r2, r0

20000388 <select_controller>:

static void select_controller(uint8_t controller) {
20000388:	b580      	push	{r7, lr}
2000038a:	b082      	sub	sp, #8
2000038c:	af00      	add	r7, sp, #0
2000038e:	0002      	movs	r2, r0
20000390:	1dfb      	adds	r3, r7, #7
20000392:	701a      	strb	r2, [r3, #0]
	switch(controller) {
20000394:	1dfb      	adds	r3, r7, #7
20000396:	781b      	ldrb	r3, [r3, #0]
20000398:	2b08      	cmp	r3, #8
2000039a:	d00c      	beq.n	200003b6 <select_controller+0x2e>
2000039c:	dc02      	bgt.n	200003a4 <select_controller+0x1c>
2000039e:	2b00      	cmp	r3, #0
200003a0:	d005      	beq.n	200003ae <select_controller+0x26>
			break;
		case B_CS1|B_CS2:
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200003a2:	e01a      	b.n	200003da <select_controller+0x52>
	switch(controller) {
200003a4:	2b10      	cmp	r3, #16
200003a6:	d00d      	beq.n	200003c4 <select_controller+0x3c>
200003a8:	2b18      	cmp	r3, #24
200003aa:	d012      	beq.n	200003d2 <select_controller+0x4a>
}
200003ac:	e015      	b.n	200003da <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
200003ae:	2018      	movs	r0, #24
200003b0:	f7ff ffc2 	bl	20000338 <graphic_ctrl_bit_clear>
			break;
200003b4:	e011      	b.n	200003da <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
200003b6:	2008      	movs	r0, #8
200003b8:	f7ff ff96 	bl	200002e8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
200003bc:	2010      	movs	r0, #16
200003be:	f7ff ffbb 	bl	20000338 <graphic_ctrl_bit_clear>
			break;
200003c2:	e00a      	b.n	200003da <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
200003c4:	2010      	movs	r0, #16
200003c6:	f7ff ff8f 	bl	200002e8 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
200003ca:	2008      	movs	r0, #8
200003cc:	f7ff ffb4 	bl	20000338 <graphic_ctrl_bit_clear>
			break;
200003d0:	e003      	b.n	200003da <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
200003d2:	2018      	movs	r0, #24
200003d4:	f7ff ff88 	bl	200002e8 <graphic_ctrl_bit_set>
			break;
200003d8:	46c0      	nop			; (mov r8, r8)
}
200003da:	46c0      	nop			; (mov r8, r8)
200003dc:	46bd      	mov	sp, r7
200003de:	b002      	add	sp, #8
200003e0:	bd80      	pop	{r7, pc}

200003e2 <graphic_wait_ready>:

static void graphic_wait_ready(void) {
200003e2:	b580      	push	{r7, lr}
200003e4:	b082      	sub	sp, #8
200003e6:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
200003e8:	2040      	movs	r0, #64	; 0x40
200003ea:	f7ff ffa5 	bl	20000338 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;		// 15-8 inputs, 7-0 outputs
200003ee:	4b14      	ldr	r3, [pc, #80]	; (20000440 <graphic_wait_ready+0x5e>)
200003f0:	4a14      	ldr	r2, [pc, #80]	; (20000444 <graphic_wait_ready+0x62>)
200003f2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200003f4:	2001      	movs	r0, #1
200003f6:	f7ff ff9f 	bl	20000338 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200003fa:	2002      	movs	r0, #2
200003fc:	f7ff ff74 	bl	200002e8 <graphic_ctrl_bit_set>
	delay_500ns();
20000400:	f000 fa90 	bl	20000924 <delay_500ns>
	
	while(1) {
		graphic_ctrl_bit_set(B_E);
20000404:	2040      	movs	r0, #64	; 0x40
20000406:	f7ff ff6f 	bl	200002e8 <graphic_ctrl_bit_set>
		delay_500ns();
2000040a:	f000 fa8b 	bl	20000924 <delay_500ns>
		c = GPIO_E->idrHigh & LCD_BUSY;
2000040e:	4b0c      	ldr	r3, [pc, #48]	; (20000440 <graphic_wait_ready+0x5e>)
20000410:	7c5b      	ldrb	r3, [r3, #17]
20000412:	b2da      	uxtb	r2, r3
20000414:	1dfb      	adds	r3, r7, #7
20000416:	217f      	movs	r1, #127	; 0x7f
20000418:	438a      	bics	r2, r1
2000041a:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
2000041c:	2040      	movs	r0, #64	; 0x40
2000041e:	f7ff ff8b 	bl	20000338 <graphic_ctrl_bit_clear>
		delay_500ns();
20000422:	f000 fa7f 	bl	20000924 <delay_500ns>
		if(c == 0) break;
20000426:	1dfb      	adds	r3, r7, #7
20000428:	781b      	ldrb	r3, [r3, #0]
2000042a:	2b00      	cmp	r3, #0
2000042c:	d000      	beq.n	20000430 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
2000042e:	e7e9      	b.n	20000404 <graphic_wait_ready+0x22>
		if(c == 0) break;
20000430:	46c0      	nop			; (mov r8, r8)
	}
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
20000432:	4b03      	ldr	r3, [pc, #12]	; (20000440 <graphic_wait_ready+0x5e>)
20000434:	4a04      	ldr	r2, [pc, #16]	; (20000448 <graphic_wait_ready+0x66>)
20000436:	601a      	str	r2, [r3, #0]
}
20000438:	46c0      	nop			; (mov r8, r8)
2000043a:	46bd      	mov	sp, r7
2000043c:	b002      	add	sp, #8
2000043e:	bd80      	pop	{r7, pc}
20000440:	40021000 	andmi	r1, r2, r0
20000444:	00005555 	andeq	r5, r0, r5, asr r5
20000448:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

2000044c <graphic_read>:

static uint8_t graphic_read(uint8_t controller) {
2000044c:	b580      	push	{r7, lr}
2000044e:	b084      	sub	sp, #16
20000450:	af00      	add	r7, sp, #0
20000452:	0002      	movs	r2, r0
20000454:	1dfb      	adds	r3, r7, #7
20000456:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000458:	2040      	movs	r0, #64	; 0x40
2000045a:	f7ff ff6d 	bl	20000338 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x00005555;	// 15-8 inputs, 7-0 outputs
2000045e:	4b1c      	ldr	r3, [pc, #112]	; (200004d0 <graphic_read+0x84>)
20000460:	4a1c      	ldr	r2, [pc, #112]	; (200004d4 <graphic_read+0x88>)
20000462:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000464:	2003      	movs	r0, #3
20000466:	f7ff ff3f 	bl	200002e8 <graphic_ctrl_bit_set>
	select_controller(controller);
2000046a:	1dfb      	adds	r3, r7, #7
2000046c:	781b      	ldrb	r3, [r3, #0]
2000046e:	0018      	movs	r0, r3
20000470:	f7ff ff8a 	bl	20000388 <select_controller>
	delay_500ns();
20000474:	f000 fa56 	bl	20000924 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
20000478:	2040      	movs	r0, #64	; 0x40
2000047a:	f7ff ff35 	bl	200002e8 <graphic_ctrl_bit_set>
	delay_500ns();
2000047e:	f000 fa51 	bl	20000924 <delay_500ns>
	c = GPIO_E->idrHigh;
20000482:	4a13      	ldr	r2, [pc, #76]	; (200004d0 <graphic_read+0x84>)
20000484:	230f      	movs	r3, #15
20000486:	18fb      	adds	r3, r7, r3
20000488:	7c52      	ldrb	r2, [r2, #17]
2000048a:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000048c:	2040      	movs	r0, #64	; 0x40
2000048e:	f7ff ff53 	bl	20000338 <graphic_ctrl_bit_clear>
	GPIO_E->moder = 0x55555555;	// 15-0 outputs
20000492:	4b0f      	ldr	r3, [pc, #60]	; (200004d0 <graphic_read+0x84>)
20000494:	4a10      	ldr	r2, [pc, #64]	; (200004d8 <graphic_read+0x8c>)
20000496:	601a      	str	r2, [r3, #0]
	
	if(controller & B_CS1) {
20000498:	1dfb      	adds	r3, r7, #7
2000049a:	781b      	ldrb	r3, [r3, #0]
2000049c:	2208      	movs	r2, #8
2000049e:	4013      	ands	r3, r2
200004a0:	d004      	beq.n	200004ac <graphic_read+0x60>
		select_controller(B_CS1);
200004a2:	2008      	movs	r0, #8
200004a4:	f7ff ff70 	bl	20000388 <select_controller>
		graphic_wait_ready();
200004a8:	f7ff ff9b 	bl	200003e2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
200004ac:	1dfb      	adds	r3, r7, #7
200004ae:	781b      	ldrb	r3, [r3, #0]
200004b0:	2210      	movs	r2, #16
200004b2:	4013      	ands	r3, r2
200004b4:	d004      	beq.n	200004c0 <graphic_read+0x74>
		select_controller(B_CS2);
200004b6:	2010      	movs	r0, #16
200004b8:	f7ff ff66 	bl	20000388 <select_controller>
		graphic_wait_ready();
200004bc:	f7ff ff91 	bl	200003e2 <graphic_wait_ready>
	}
	return c;
200004c0:	230f      	movs	r3, #15
200004c2:	18fb      	adds	r3, r7, r3
200004c4:	781b      	ldrb	r3, [r3, #0]
}
200004c6:	0018      	movs	r0, r3
200004c8:	46bd      	mov	sp, r7
200004ca:	b004      	add	sp, #16
200004cc:	bd80      	pop	{r7, pc}
200004ce:	46c0      	nop			; (mov r8, r8)
200004d0:	40021000 	andmi	r1, r2, r0
200004d4:	00005555 	andeq	r5, r0, r5, asr r5
200004d8:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

200004dc <graphic_read_data>:

static uint8_t graphic_read_data(uint8_t controller) {
200004dc:	b580      	push	{r7, lr}
200004de:	b082      	sub	sp, #8
200004e0:	af00      	add	r7, sp, #0
200004e2:	0002      	movs	r2, r0
200004e4:	1dfb      	adds	r3, r7, #7
200004e6:	701a      	strb	r2, [r3, #0]
	graphic_read(controller);
200004e8:	1dfb      	adds	r3, r7, #7
200004ea:	781b      	ldrb	r3, [r3, #0]
200004ec:	0018      	movs	r0, r3
200004ee:	f7ff ffad 	bl	2000044c <graphic_read>
	return graphic_read(controller);
200004f2:	1dfb      	adds	r3, r7, #7
200004f4:	781b      	ldrb	r3, [r3, #0]
200004f6:	0018      	movs	r0, r3
200004f8:	f7ff ffa8 	bl	2000044c <graphic_read>
200004fc:	0003      	movs	r3, r0
}
200004fe:	0018      	movs	r0, r3
20000500:	46bd      	mov	sp, r7
20000502:	b002      	add	sp, #8
20000504:	bd80      	pop	{r7, pc}

20000506 <graphic_write>:

static void graphic_write(uint8_t value, uint8_t controller) {
20000506:	b580      	push	{r7, lr}
20000508:	b082      	sub	sp, #8
2000050a:	af00      	add	r7, sp, #0
2000050c:	0002      	movs	r2, r0
2000050e:	1dfb      	adds	r3, r7, #7
20000510:	701a      	strb	r2, [r3, #0]
20000512:	1dbb      	adds	r3, r7, #6
20000514:	1c0a      	adds	r2, r1, #0
20000516:	701a      	strb	r2, [r3, #0]
	GPIO_E->odrHigh = value;
20000518:	4a19      	ldr	r2, [pc, #100]	; (20000580 <graphic_write+0x7a>)
2000051a:	1dfb      	adds	r3, r7, #7
2000051c:	781b      	ldrb	r3, [r3, #0]
2000051e:	7553      	strb	r3, [r2, #21]
	select_controller(controller);
20000520:	1dbb      	adds	r3, r7, #6
20000522:	781b      	ldrb	r3, [r3, #0]
20000524:	0018      	movs	r0, r3
20000526:	f7ff ff2f 	bl	20000388 <select_controller>
	delay_500ns();
2000052a:	f000 f9fb 	bl	20000924 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000052e:	2040      	movs	r0, #64	; 0x40
20000530:	f7ff feda 	bl	200002e8 <graphic_ctrl_bit_set>
	delay_500ns();
20000534:	f000 f9f6 	bl	20000924 <delay_500ns>
	graphic_ctrl_bit_clear(B_E);
20000538:	2040      	movs	r0, #64	; 0x40
2000053a:	f7ff fefd 	bl	20000338 <graphic_ctrl_bit_clear>
	
	if(controller & B_CS1) {
2000053e:	1dbb      	adds	r3, r7, #6
20000540:	781b      	ldrb	r3, [r3, #0]
20000542:	2208      	movs	r2, #8
20000544:	4013      	ands	r3, r2
20000546:	d004      	beq.n	20000552 <graphic_write+0x4c>
		select_controller(B_CS1);
20000548:	2008      	movs	r0, #8
2000054a:	f7ff ff1d 	bl	20000388 <select_controller>
		graphic_wait_ready();
2000054e:	f7ff ff48 	bl	200003e2 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
20000552:	1dbb      	adds	r3, r7, #6
20000554:	781b      	ldrb	r3, [r3, #0]
20000556:	2210      	movs	r2, #16
20000558:	4013      	ands	r3, r2
2000055a:	d004      	beq.n	20000566 <graphic_write+0x60>
		select_controller(B_CS2);
2000055c:	2010      	movs	r0, #16
2000055e:	f7ff ff13 	bl	20000388 <select_controller>
		graphic_wait_ready();
20000562:	f7ff ff3e 	bl	200003e2 <graphic_wait_ready>
	}
	GPIO_E->odrHigh = 0;
20000566:	4b06      	ldr	r3, [pc, #24]	; (20000580 <graphic_write+0x7a>)
20000568:	2200      	movs	r2, #0
2000056a:	755a      	strb	r2, [r3, #21]
	graphic_ctrl_bit_set(B_E);
2000056c:	2040      	movs	r0, #64	; 0x40
2000056e:	f7ff febb 	bl	200002e8 <graphic_ctrl_bit_set>
	select_controller(0);
20000572:	2000      	movs	r0, #0
20000574:	f7ff ff08 	bl	20000388 <select_controller>
}
20000578:	46c0      	nop			; (mov r8, r8)
2000057a:	46bd      	mov	sp, r7
2000057c:	b002      	add	sp, #8
2000057e:	bd80      	pop	{r7, pc}
20000580:	40021000 	andmi	r1, r2, r0

20000584 <graphic_write_command>:

static void graphic_write_command(uint8_t command, uint8_t controller) {
20000584:	b580      	push	{r7, lr}
20000586:	b082      	sub	sp, #8
20000588:	af00      	add	r7, sp, #0
2000058a:	0002      	movs	r2, r0
2000058c:	1dfb      	adds	r3, r7, #7
2000058e:	701a      	strb	r2, [r3, #0]
20000590:	1dbb      	adds	r3, r7, #6
20000592:	1c0a      	adds	r2, r1, #0
20000594:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000596:	2040      	movs	r0, #64	; 0x40
20000598:	f7ff fece 	bl	20000338 <graphic_ctrl_bit_clear>
	select_controller(controller);
2000059c:	1dbb      	adds	r3, r7, #6
2000059e:	781b      	ldrb	r3, [r3, #0]
200005a0:	0018      	movs	r0, r3
200005a2:	f7ff fef1 	bl	20000388 <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
200005a6:	2003      	movs	r0, #3
200005a8:	f7ff fec6 	bl	20000338 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
200005ac:	1dbb      	adds	r3, r7, #6
200005ae:	781a      	ldrb	r2, [r3, #0]
200005b0:	1dfb      	adds	r3, r7, #7
200005b2:	781b      	ldrb	r3, [r3, #0]
200005b4:	0011      	movs	r1, r2
200005b6:	0018      	movs	r0, r3
200005b8:	f7ff ffa5 	bl	20000506 <graphic_write>
}
200005bc:	46c0      	nop			; (mov r8, r8)
200005be:	46bd      	mov	sp, r7
200005c0:	b002      	add	sp, #8
200005c2:	bd80      	pop	{r7, pc}

200005c4 <graphic_write_data>:

static void graphic_write_data(uint8_t data, uint8_t controller) {
200005c4:	b580      	push	{r7, lr}
200005c6:	b082      	sub	sp, #8
200005c8:	af00      	add	r7, sp, #0
200005ca:	0002      	movs	r2, r0
200005cc:	1dfb      	adds	r3, r7, #7
200005ce:	701a      	strb	r2, [r3, #0]
200005d0:	1dbb      	adds	r3, r7, #6
200005d2:	1c0a      	adds	r2, r1, #0
200005d4:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
200005d6:	2040      	movs	r0, #64	; 0x40
200005d8:	f7ff feae 	bl	20000338 <graphic_ctrl_bit_clear>
	select_controller(controller);
200005dc:	1dbb      	adds	r3, r7, #6
200005de:	781b      	ldrb	r3, [r3, #0]
200005e0:	0018      	movs	r0, r3
200005e2:	f7ff fed1 	bl	20000388 <select_controller>
	graphic_ctrl_bit_set(B_RS);
200005e6:	2001      	movs	r0, #1
200005e8:	f7ff fe7e 	bl	200002e8 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
200005ec:	2002      	movs	r0, #2
200005ee:	f7ff fea3 	bl	20000338 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
200005f2:	1dbb      	adds	r3, r7, #6
200005f4:	781a      	ldrb	r2, [r3, #0]
200005f6:	1dfb      	adds	r3, r7, #7
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	0011      	movs	r1, r2
200005fc:	0018      	movs	r0, r3
200005fe:	f7ff ff82 	bl	20000506 <graphic_write>
}
20000602:	46c0      	nop			; (mov r8, r8)
20000604:	46bd      	mov	sp, r7
20000606:	b002      	add	sp, #8
20000608:	bd80      	pop	{r7, pc}

2000060a <graphic_clear_screen>:

void graphic_clear_screen(void) {
2000060a:	b580      	push	{r7, lr}
2000060c:	b082      	sub	sp, #8
2000060e:	af00      	add	r7, sp, #0
	uint8_t i, j;
	
	for(j = 0; j < 8; j++) {
20000610:	1dbb      	adds	r3, r7, #6
20000612:	2200      	movs	r2, #0
20000614:	701a      	strb	r2, [r3, #0]
20000616:	e023      	b.n	20000660 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
20000618:	1dbb      	adds	r3, r7, #6
2000061a:	781b      	ldrb	r3, [r3, #0]
2000061c:	2248      	movs	r2, #72	; 0x48
2000061e:	4252      	negs	r2, r2
20000620:	4313      	orrs	r3, r2
20000622:	b2db      	uxtb	r3, r3
20000624:	2118      	movs	r1, #24
20000626:	0018      	movs	r0, r3
20000628:	f7ff ffac 	bl	20000584 <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
2000062c:	2118      	movs	r1, #24
2000062e:	2040      	movs	r0, #64	; 0x40
20000630:	f7ff ffa8 	bl	20000584 <graphic_write_command>
		for(i = 0; i <= 63; i++) {
20000634:	1dfb      	adds	r3, r7, #7
20000636:	2200      	movs	r2, #0
20000638:	701a      	strb	r2, [r3, #0]
2000063a:	e008      	b.n	2000064e <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
2000063c:	2118      	movs	r1, #24
2000063e:	2000      	movs	r0, #0
20000640:	f7ff ffc0 	bl	200005c4 <graphic_write_data>
		for(i = 0; i <= 63; i++) {
20000644:	1dfb      	adds	r3, r7, #7
20000646:	781a      	ldrb	r2, [r3, #0]
20000648:	1dfb      	adds	r3, r7, #7
2000064a:	3201      	adds	r2, #1
2000064c:	701a      	strb	r2, [r3, #0]
2000064e:	1dfb      	adds	r3, r7, #7
20000650:	781b      	ldrb	r3, [r3, #0]
20000652:	2b3f      	cmp	r3, #63	; 0x3f
20000654:	d9f2      	bls.n	2000063c <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
20000656:	1dbb      	adds	r3, r7, #6
20000658:	781a      	ldrb	r2, [r3, #0]
2000065a:	1dbb      	adds	r3, r7, #6
2000065c:	3201      	adds	r2, #1
2000065e:	701a      	strb	r2, [r3, #0]
20000660:	1dbb      	adds	r3, r7, #6
20000662:	781b      	ldrb	r3, [r3, #0]
20000664:	2b07      	cmp	r3, #7
20000666:	d9d7      	bls.n	20000618 <graphic_clear_screen+0xe>
		}
	}
}
20000668:	46c0      	nop			; (mov r8, r8)
2000066a:	46bd      	mov	sp, r7
2000066c:	b002      	add	sp, #8
2000066e:	bd80      	pop	{r7, pc}

20000670 <graphic_initialize>:

void graphic_initialize(void) {
20000670:	b580      	push	{r7, lr}
20000672:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
20000674:	2040      	movs	r0, #64	; 0x40
20000676:	f7ff fe37 	bl	200002e8 <graphic_ctrl_bit_set>
	delay_micro(10);
2000067a:	200a      	movs	r0, #10
2000067c:	f000 f95b 	bl	20000936 <delay_micro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000680:	2078      	movs	r0, #120	; 0x78
20000682:	f7ff fe59 	bl	20000338 <graphic_ctrl_bit_clear>
	delay_milli(30);
20000686:	201e      	movs	r0, #30
20000688:	f000 f96b 	bl	20000962 <delay_milli>
	graphic_ctrl_bit_set(B_RST);
2000068c:	2020      	movs	r0, #32
2000068e:	f7ff fe2b 	bl	200002e8 <graphic_ctrl_bit_set>
	delay_milli(100);
20000692:	2064      	movs	r0, #100	; 0x64
20000694:	f000 f965 	bl	20000962 <delay_milli>
	graphic_write_command(LCD_OFF,			B_CS1|B_CS2);
20000698:	2118      	movs	r1, #24
2000069a:	203e      	movs	r0, #62	; 0x3e
2000069c:	f7ff ff72 	bl	20000584 <graphic_write_command>
	graphic_write_command(LCD_ON,			B_CS1|B_CS2);
200006a0:	2118      	movs	r1, #24
200006a2:	203f      	movs	r0, #63	; 0x3f
200006a4:	f7ff ff6e 	bl	20000584 <graphic_write_command>
	graphic_write_command(LCD_DISP_START,	B_CS1|B_CS2);
200006a8:	2118      	movs	r1, #24
200006aa:	20c0      	movs	r0, #192	; 0xc0
200006ac:	f7ff ff6a 	bl	20000584 <graphic_write_command>
	graphic_write_command(LCD_SET_ADD,		B_CS1|B_CS2);
200006b0:	2118      	movs	r1, #24
200006b2:	2040      	movs	r0, #64	; 0x40
200006b4:	f7ff ff66 	bl	20000584 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE,		B_CS1|B_CS2);
200006b8:	2118      	movs	r1, #24
200006ba:	20b8      	movs	r0, #184	; 0xb8
200006bc:	f7ff ff62 	bl	20000584 <graphic_write_command>
	select_controller(0);
200006c0:	2000      	movs	r0, #0
200006c2:	f7ff fe61 	bl	20000388 <select_controller>
}
200006c6:	46c0      	nop			; (mov r8, r8)
200006c8:	46bd      	mov	sp, r7
200006ca:	bd80      	pop	{r7, pc}

200006cc <pixel>:

void pixel(int x, int y, int set) {
200006cc:	b5b0      	push	{r4, r5, r7, lr}
200006ce:	b088      	sub	sp, #32
200006d0:	af00      	add	r7, sp, #0
200006d2:	60f8      	str	r0, [r7, #12]
200006d4:	60b9      	str	r1, [r7, #8]
200006d6:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200006d8:	68fb      	ldr	r3, [r7, #12]
200006da:	2b00      	cmp	r3, #0
200006dc:	dc00      	bgt.n	200006e0 <pixel+0x14>
200006de:	e08e      	b.n	200007fe <pixel+0x132>
200006e0:	68bb      	ldr	r3, [r7, #8]
200006e2:	2b00      	cmp	r3, #0
200006e4:	dc00      	bgt.n	200006e8 <pixel+0x1c>
200006e6:	e08a      	b.n	200007fe <pixel+0x132>
200006e8:	68fb      	ldr	r3, [r7, #12]
200006ea:	2b80      	cmp	r3, #128	; 0x80
200006ec:	dd00      	ble.n	200006f0 <pixel+0x24>
200006ee:	e086      	b.n	200007fe <pixel+0x132>
200006f0:	68bb      	ldr	r3, [r7, #8]
200006f2:	2b40      	cmp	r3, #64	; 0x40
200006f4:	dd00      	ble.n	200006f8 <pixel+0x2c>
200006f6:	e082      	b.n	200007fe <pixel+0x132>
	
	index = (y-1)/8;
200006f8:	68bb      	ldr	r3, [r7, #8]
200006fa:	3b01      	subs	r3, #1
200006fc:	2b00      	cmp	r3, #0
200006fe:	da00      	bge.n	20000702 <pixel+0x36>
20000700:	3307      	adds	r3, #7
20000702:	10db      	asrs	r3, r3, #3
20000704:	61bb      	str	r3, [r7, #24]
	mask = 1 << ((y - 1) % 8);
20000706:	68bb      	ldr	r3, [r7, #8]
20000708:	3b01      	subs	r3, #1
2000070a:	4a3f      	ldr	r2, [pc, #252]	; (20000808 <pixel+0x13c>)
2000070c:	4013      	ands	r3, r2
2000070e:	d504      	bpl.n	2000071a <pixel+0x4e>
20000710:	3b01      	subs	r3, #1
20000712:	2208      	movs	r2, #8
20000714:	4252      	negs	r2, r2
20000716:	4313      	orrs	r3, r2
20000718:	3301      	adds	r3, #1
2000071a:	001a      	movs	r2, r3
2000071c:	2301      	movs	r3, #1
2000071e:	4093      	lsls	r3, r2
20000720:	001a      	movs	r2, r3
20000722:	231f      	movs	r3, #31
20000724:	18fb      	adds	r3, r7, r3
20000726:	701a      	strb	r2, [r3, #0]
	
	if(set == 0)
20000728:	687b      	ldr	r3, [r7, #4]
2000072a:	2b00      	cmp	r3, #0
2000072c:	d105      	bne.n	2000073a <pixel+0x6e>
		mask = ~mask;
2000072e:	221f      	movs	r2, #31
20000730:	18bb      	adds	r3, r7, r2
20000732:	18ba      	adds	r2, r7, r2
20000734:	7812      	ldrb	r2, [r2, #0]
20000736:	43d2      	mvns	r2, r2
20000738:	701a      	strb	r2, [r3, #0]
		
	if(x > 64) {
2000073a:	68fb      	ldr	r3, [r7, #12]
2000073c:	2b40      	cmp	r3, #64	; 0x40
2000073e:	dd07      	ble.n	20000750 <pixel+0x84>
		controller = B_CS2;
20000740:	231e      	movs	r3, #30
20000742:	18fb      	adds	r3, r7, r3
20000744:	2210      	movs	r2, #16
20000746:	701a      	strb	r2, [r3, #0]
		x = x - 65;
20000748:	68fb      	ldr	r3, [r7, #12]
2000074a:	3b41      	subs	r3, #65	; 0x41
2000074c:	60fb      	str	r3, [r7, #12]
2000074e:	e006      	b.n	2000075e <pixel+0x92>
	} else {
		controller = B_CS1;
20000750:	231e      	movs	r3, #30
20000752:	18fb      	adds	r3, r7, r3
20000754:	2208      	movs	r2, #8
20000756:	701a      	strb	r2, [r3, #0]
		x = x - 1;
20000758:	68fb      	ldr	r3, [r7, #12]
2000075a:	3b01      	subs	r3, #1
2000075c:	60fb      	str	r3, [r7, #12]
	}
	
	graphic_write_command(LCD_SET_ADD	| x, controller);
2000075e:	68fb      	ldr	r3, [r7, #12]
20000760:	b25b      	sxtb	r3, r3
20000762:	2240      	movs	r2, #64	; 0x40
20000764:	4313      	orrs	r3, r2
20000766:	b25b      	sxtb	r3, r3
20000768:	b2da      	uxtb	r2, r3
2000076a:	251e      	movs	r5, #30
2000076c:	197b      	adds	r3, r7, r5
2000076e:	781b      	ldrb	r3, [r3, #0]
20000770:	0019      	movs	r1, r3
20000772:	0010      	movs	r0, r2
20000774:	f7ff ff06 	bl	20000584 <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE	| index, controller);
20000778:	69bb      	ldr	r3, [r7, #24]
2000077a:	b25b      	sxtb	r3, r3
2000077c:	2248      	movs	r2, #72	; 0x48
2000077e:	4252      	negs	r2, r2
20000780:	4313      	orrs	r3, r2
20000782:	b25b      	sxtb	r3, r3
20000784:	b2da      	uxtb	r2, r3
20000786:	197b      	adds	r3, r7, r5
20000788:	781b      	ldrb	r3, [r3, #0]
2000078a:	0019      	movs	r1, r3
2000078c:	0010      	movs	r0, r2
2000078e:	f7ff fef9 	bl	20000584 <graphic_write_command>
	c = graphic_read_data(controller);
20000792:	2317      	movs	r3, #23
20000794:	18fc      	adds	r4, r7, r3
20000796:	197b      	adds	r3, r7, r5
20000798:	781b      	ldrb	r3, [r3, #0]
2000079a:	0018      	movs	r0, r3
2000079c:	f7ff fe9e 	bl	200004dc <graphic_read_data>
200007a0:	0003      	movs	r3, r0
200007a2:	7023      	strb	r3, [r4, #0]
	graphic_write_command(LCD_SET_ADD	| x, controller);
200007a4:	68fb      	ldr	r3, [r7, #12]
200007a6:	b25b      	sxtb	r3, r3
200007a8:	2240      	movs	r2, #64	; 0x40
200007aa:	4313      	orrs	r3, r2
200007ac:	b25b      	sxtb	r3, r3
200007ae:	b2da      	uxtb	r2, r3
200007b0:	197b      	adds	r3, r7, r5
200007b2:	781b      	ldrb	r3, [r3, #0]
200007b4:	0019      	movs	r1, r3
200007b6:	0010      	movs	r0, r2
200007b8:	f7ff fee4 	bl	20000584 <graphic_write_command>
	
	if(set)
200007bc:	687b      	ldr	r3, [r7, #4]
200007be:	2b00      	cmp	r3, #0
200007c0:	d009      	beq.n	200007d6 <pixel+0x10a>
		mask = mask | c;
200007c2:	221f      	movs	r2, #31
200007c4:	18bb      	adds	r3, r7, r2
200007c6:	18b9      	adds	r1, r7, r2
200007c8:	2217      	movs	r2, #23
200007ca:	18ba      	adds	r2, r7, r2
200007cc:	7809      	ldrb	r1, [r1, #0]
200007ce:	7812      	ldrb	r2, [r2, #0]
200007d0:	430a      	orrs	r2, r1
200007d2:	701a      	strb	r2, [r3, #0]
200007d4:	e008      	b.n	200007e8 <pixel+0x11c>
	else
		mask = mask & c;
200007d6:	221f      	movs	r2, #31
200007d8:	18bb      	adds	r3, r7, r2
200007da:	18ba      	adds	r2, r7, r2
200007dc:	2117      	movs	r1, #23
200007de:	1879      	adds	r1, r7, r1
200007e0:	7812      	ldrb	r2, [r2, #0]
200007e2:	7809      	ldrb	r1, [r1, #0]
200007e4:	400a      	ands	r2, r1
200007e6:	701a      	strb	r2, [r3, #0]
		
	graphic_write_data(mask, controller);
200007e8:	231e      	movs	r3, #30
200007ea:	18fb      	adds	r3, r7, r3
200007ec:	781a      	ldrb	r2, [r3, #0]
200007ee:	231f      	movs	r3, #31
200007f0:	18fb      	adds	r3, r7, r3
200007f2:	781b      	ldrb	r3, [r3, #0]
200007f4:	0011      	movs	r1, r2
200007f6:	0018      	movs	r0, r3
200007f8:	f7ff fee4 	bl	200005c4 <graphic_write_data>
200007fc:	e000      	b.n	20000800 <pixel+0x134>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200007fe:	46c0      	nop			; (mov r8, r8)
}
20000800:	46bd      	mov	sp, r7
20000802:	b008      	add	sp, #32
20000804:	bdb0      	pop	{r4, r5, r7, pc}
20000806:	46c0      	nop			; (mov r8, r8)
20000808:	80000007 	andhi	r0, r0, r7

2000080c <init_app>:
#include "defines.h"
#include "delays.h"
#include "keypad.h"
#include "ball.h"

void init_app(void) {
2000080c:	b580      	push	{r7, lr}
2000080e:	af00      	add	r7, sp, #0
	// Display init
	GPIO_E->moder = 0x55555555;
20000810:	4b0b      	ldr	r3, [pc, #44]	; (20000840 <init_app+0x34>)
20000812:	4a0c      	ldr	r2, [pc, #48]	; (20000844 <init_app+0x38>)
20000814:	601a      	str	r2, [r3, #0]
	
	// Keypad init
	GPIO_D->moder = 0x55005555;
20000816:	4b0c      	ldr	r3, [pc, #48]	; (20000848 <init_app+0x3c>)
20000818:	4a0c      	ldr	r2, [pc, #48]	; (2000084c <init_app+0x40>)
2000081a:	601a      	str	r2, [r3, #0]
	GPIO_D->otyper &= 0x0FFF;
2000081c:	4b0a      	ldr	r3, [pc, #40]	; (20000848 <init_app+0x3c>)
2000081e:	889b      	ldrh	r3, [r3, #4]
20000820:	b29b      	uxth	r3, r3
20000822:	4a09      	ldr	r2, [pc, #36]	; (20000848 <init_app+0x3c>)
20000824:	051b      	lsls	r3, r3, #20
20000826:	0d1b      	lsrs	r3, r3, #20
20000828:	b29b      	uxth	r3, r3
2000082a:	8093      	strh	r3, [r2, #4]
	GPIO_D->pupdr |= 0xAAAAAAAA;
2000082c:	4b06      	ldr	r3, [pc, #24]	; (20000848 <init_app+0x3c>)
2000082e:	68da      	ldr	r2, [r3, #12]
20000830:	4b05      	ldr	r3, [pc, #20]	; (20000848 <init_app+0x3c>)
20000832:	4907      	ldr	r1, [pc, #28]	; (20000850 <init_app+0x44>)
20000834:	430a      	orrs	r2, r1
20000836:	60da      	str	r2, [r3, #12]
}
20000838:	46c0      	nop			; (mov r8, r8)
2000083a:	46bd      	mov	sp, r7
2000083c:	bd80      	pop	{r7, pc}
2000083e:	46c0      	nop			; (mov r8, r8)
20000840:	40021000 	andmi	r1, r2, r0
20000844:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
20000848:	40020c00 	andmi	r0, r2, r0, lsl #24
2000084c:	55005555 	strpl	r5, [r0, #-1365]	; 0xfffffaab
20000850:	aaaaaaaa 	bge	1eaab300 <startup-0x1554d00>

20000854 <main>:
	clear_object,
	move_object,
	set_object_speed
};

void main(void) {	
20000854:	b580      	push	{r7, lr}
20000856:	b082      	sub	sp, #8
20000858:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
2000085a:	4b20      	ldr	r3, [pc, #128]	; (200008dc <main+0x88>)
2000085c:	607b      	str	r3, [r7, #4]
	init_app();
2000085e:	f7ff ffd5 	bl	2000080c <init_app>
	graphic_initialize();
20000862:	f7ff ff05 	bl	20000670 <graphic_initialize>
#ifndef SIMULATOR
	//graphic_clear_screen();
#endif
	int speed = 10;
20000866:	230a      	movs	r3, #10
20000868:	603b      	str	r3, [r7, #0]
	p->set_speed(p, 4, 1);
2000086a:	687b      	ldr	r3, [r7, #4]
2000086c:	6a1b      	ldr	r3, [r3, #32]
2000086e:	6878      	ldr	r0, [r7, #4]
20000870:	2201      	movs	r2, #1
20000872:	2104      	movs	r1, #4
20000874:	4798      	blx	r3
	while(1) {
		p->move(p);
20000876:	687b      	ldr	r3, [r7, #4]
20000878:	69db      	ldr	r3, [r3, #28]
2000087a:	687a      	ldr	r2, [r7, #4]
2000087c:	0010      	movs	r0, r2
2000087e:	4798      	blx	r3
		//delay_milli(40);
		
		switch (keyb()) {
20000880:	f7ff fcfe 	bl	20000280 <keyb>
20000884:	0003      	movs	r3, r0
20000886:	2b04      	cmp	r3, #4
20000888:	d010      	beq.n	200008ac <main+0x58>
2000088a:	dc02      	bgt.n	20000892 <main+0x3e>
2000088c:	2b02      	cmp	r3, #2
2000088e:	d005      	beq.n	2000089c <main+0x48>
20000890:	e022      	b.n	200008d8 <main+0x84>
20000892:	2b06      	cmp	r3, #6
20000894:	d012      	beq.n	200008bc <main+0x68>
20000896:	2b08      	cmp	r3, #8
20000898:	d017      	beq.n	200008ca <main+0x76>
2000089a:	e01d      	b.n	200008d8 <main+0x84>
			case 2: p->set_speed(p, 0, -speed); break;
2000089c:	687b      	ldr	r3, [r7, #4]
2000089e:	6a1b      	ldr	r3, [r3, #32]
200008a0:	683a      	ldr	r2, [r7, #0]
200008a2:	4252      	negs	r2, r2
200008a4:	6878      	ldr	r0, [r7, #4]
200008a6:	2100      	movs	r1, #0
200008a8:	4798      	blx	r3
200008aa:	e015      	b.n	200008d8 <main+0x84>
			case 4: p->set_speed(p, -speed, 0); break;
200008ac:	687b      	ldr	r3, [r7, #4]
200008ae:	6a1b      	ldr	r3, [r3, #32]
200008b0:	683a      	ldr	r2, [r7, #0]
200008b2:	4251      	negs	r1, r2
200008b4:	6878      	ldr	r0, [r7, #4]
200008b6:	2200      	movs	r2, #0
200008b8:	4798      	blx	r3
200008ba:	e00d      	b.n	200008d8 <main+0x84>
			case 6: p->set_speed(p, speed, 0); break;
200008bc:	687b      	ldr	r3, [r7, #4]
200008be:	6a1b      	ldr	r3, [r3, #32]
200008c0:	6839      	ldr	r1, [r7, #0]
200008c2:	6878      	ldr	r0, [r7, #4]
200008c4:	2200      	movs	r2, #0
200008c6:	4798      	blx	r3
200008c8:	e006      	b.n	200008d8 <main+0x84>
			case 8: p->set_speed(p, 0, speed); break;
200008ca:	687b      	ldr	r3, [r7, #4]
200008cc:	6a1b      	ldr	r3, [r3, #32]
200008ce:	683a      	ldr	r2, [r7, #0]
200008d0:	6878      	ldr	r0, [r7, #4]
200008d2:	2100      	movs	r1, #0
200008d4:	4798      	blx	r3
200008d6:	46c0      	nop			; (mov r8, r8)
		p->move(p);
200008d8:	e7cd      	b.n	20000876 <main+0x22>
200008da:	46c0      	nop			; (mov r8, r8)
200008dc:	200009b8 			; <UNDEFINED> instruction: 0x200009b8

200008e0 <delay_250ns>:
#include "delays.h"
#include "defines.h"

void delay_250ns(void) {
200008e0:	b580      	push	{r7, lr}
200008e2:	af00      	add	r7, sp, #0
	*STK_CTRL = 0;				// clear SysTik
200008e4:	4b0c      	ldr	r3, [pc, #48]	; (20000918 <delay_250ns+0x38>)
200008e6:	2200      	movs	r2, #0
200008e8:	601a      	str	r2, [r3, #0]
	*STK_LOAD = 41;				// initialize with 42 cycles
200008ea:	4b0c      	ldr	r3, [pc, #48]	; (2000091c <delay_250ns+0x3c>)
200008ec:	2229      	movs	r2, #41	; 0x29
200008ee:	601a      	str	r2, [r3, #0]
	*STK_VAL = 0;				// clear countregister
200008f0:	4b0b      	ldr	r3, [pc, #44]	; (20000920 <delay_250ns+0x40>)
200008f2:	2200      	movs	r2, #0
200008f4:	601a      	str	r2, [r3, #0]
	*STK_CTRL = 5;				// reset counter
200008f6:	4b08      	ldr	r3, [pc, #32]	; (20000918 <delay_250ns+0x38>)
200008f8:	2205      	movs	r2, #5
200008fa:	601a      	str	r2, [r3, #0]
	while ((*STK_CTRL & 0x00010000) == 0) {}	// wait until COUNTFLAG = 1
200008fc:	46c0      	nop			; (mov r8, r8)
200008fe:	4b06      	ldr	r3, [pc, #24]	; (20000918 <delay_250ns+0x38>)
20000900:	681a      	ldr	r2, [r3, #0]
20000902:	2380      	movs	r3, #128	; 0x80
20000904:	025b      	lsls	r3, r3, #9
20000906:	4013      	ands	r3, r2
20000908:	d0f9      	beq.n	200008fe <delay_250ns+0x1e>
	*STK_CTRL = 0;				// clear SysTik
2000090a:	4b03      	ldr	r3, [pc, #12]	; (20000918 <delay_250ns+0x38>)
2000090c:	2200      	movs	r2, #0
2000090e:	601a      	str	r2, [r3, #0]
}
20000910:	46c0      	nop			; (mov r8, r8)
20000912:	46bd      	mov	sp, r7
20000914:	bd80      	pop	{r7, pc}
20000916:	46c0      	nop			; (mov r8, r8)
20000918:	e000e010 	and	lr, r0, r0, lsl r0
2000091c:	e000e014 	and	lr, r0, r4, lsl r0
20000920:	e000e018 	and	lr, r0, r8, lsl r0

20000924 <delay_500ns>:

void delay_500ns(void) {
20000924:	b580      	push	{r7, lr}
20000926:	af00      	add	r7, sp, #0
	delay_250ns();
20000928:	f7ff ffda 	bl	200008e0 <delay_250ns>
	delay_250ns();
2000092c:	f7ff ffd8 	bl	200008e0 <delay_250ns>
}
20000930:	46c0      	nop			; (mov r8, r8)
20000932:	46bd      	mov	sp, r7
20000934:	bd80      	pop	{r7, pc}

20000936 <delay_micro>:

void delay_micro(unsigned int us) {
20000936:	b580      	push	{r7, lr}
20000938:	b082      	sub	sp, #8
2000093a:	af00      	add	r7, sp, #0
2000093c:	6078      	str	r0, [r7, #4]
	while(us--) {
2000093e:	e007      	b.n	20000950 <delay_micro+0x1a>
		delay_250ns();
20000940:	f7ff ffce 	bl	200008e0 <delay_250ns>
		delay_250ns();
20000944:	f7ff ffcc 	bl	200008e0 <delay_250ns>
		delay_250ns();
20000948:	f7ff ffca 	bl	200008e0 <delay_250ns>
		delay_250ns();
2000094c:	f7ff ffc8 	bl	200008e0 <delay_250ns>
	while(us--) {
20000950:	687b      	ldr	r3, [r7, #4]
20000952:	1e5a      	subs	r2, r3, #1
20000954:	607a      	str	r2, [r7, #4]
20000956:	2b00      	cmp	r3, #0
20000958:	d1f2      	bne.n	20000940 <delay_micro+0xa>
	} 
}
2000095a:	46c0      	nop			; (mov r8, r8)
2000095c:	46bd      	mov	sp, r7
2000095e:	b002      	add	sp, #8
20000960:	bd80      	pop	{r7, pc}

20000962 <delay_milli>:

void delay_milli(unsigned int ms) {
20000962:	b580      	push	{r7, lr}
20000964:	b082      	sub	sp, #8
20000966:	af00      	add	r7, sp, #0
20000968:	6078      	str	r0, [r7, #4]
//	#ifdef SIMULATOR
		while( ms-- )
2000096a:	e002      	b.n	20000972 <delay_milli+0x10>
			delay_micro(1);
2000096c:	2001      	movs	r0, #1
2000096e:	f7ff ffe2 	bl	20000936 <delay_micro>
		while( ms-- )
20000972:	687b      	ldr	r3, [r7, #4]
20000974:	1e5a      	subs	r2, r3, #1
20000976:	607a      	str	r2, [r7, #4]
20000978:	2b00      	cmp	r3, #0
2000097a:	d1f7      	bne.n	2000096c <delay_milli+0xa>
//	#else
//		while( ms-- )
//			delay_micro(1000);
//	#endif
}
2000097c:	46c0      	nop			; (mov r8, r8)
2000097e:	46bd      	mov	sp, r7
20000980:	b002      	add	sp, #8
20000982:	bd80      	pop	{r7, pc}

20000984 <ball_geometry>:
20000984:	0000000c 	andeq	r0, r0, ip
20000988:	00000004 	andeq	r0, r0, r4
2000098c:	00000004 	andeq	r0, r0, r4
20000990:	02000100 	andeq	r0, r0, #0, 2
20000994:	01010001 	tsteq	r1, r1
20000998:	03010201 	movweq	r0, #4609	; 0x1201
2000099c:	01020002 	tsteq	r2, r2
200009a0:	03020202 	movweq	r0, #8706	; 0x2202
200009a4:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

200009b8 <ball>:
200009b8:	20000984 	andcs	r0, r0, r4, lsl #19
	...
200009c4:	00000001 	andeq	r0, r0, r1
200009c8:	00000001 	andeq	r0, r0, r1
200009cc:	20000031 	andcs	r0, r0, r1, lsr r0
200009d0:	20000083 	andcs	r0, r0, r3, lsl #1
200009d4:	200000d5 	ldrdcs	r0, [r0], -r5
200009d8:	20000011 	andcs	r0, r0, r1, lsl r0
200009dc:	20000212 	andcs	r0, r0, r2, lsl r2
200009e0:	200001f2 	strdcs	r0, [r0], -r2
200009e4:	200001fa 	strdcs	r0, [r0], -sl
200009e8:	20000202 	andcs	r0, r0, r2, lsl #4
200009ec:	2000020a 	andcs	r0, r0, sl, lsl #4
200009f0:	0a030201 	beq	200c11fc <ball+0xc0844>
200009f4:	0b060504 	bleq	20181e0c <ball+0x181454>
200009f8:	0c090807 	stceq	8, cr0, [r9], {7}
200009fc:	0d0f000e 	stceq	0, cr0, [pc, #-56]	; 200009cc <ball+0x14>

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	000002cd 	andeq	r0, r0, sp, asr #5
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	00000060 	andeq	r0, r0, r0, rrx
  10:	00015b0c 	andeq	r5, r1, ip, lsl #22
  14:	00001e00 	andeq	r1, r0, r0, lsl #28
  18:	00001000 	andeq	r1, r0, r0
  1c:	0001c820 	andeq	ip, r1, r0, lsr #16
  20:	00000000 	andeq	r0, r0, r0
  24:	06010200 	streq	r0, [r1], -r0, lsl #4
  28:	00000107 	andeq	r0, r0, r7, lsl #2
  2c:	00000a03 	andeq	r0, r0, r3, lsl #20
  30:	372b0200 	strcc	r0, [fp, -r0, lsl #4]!
  34:	02000000 	andeq	r0, r0, #0
  38:	01050801 	tsteq	r5, r1, lsl #16
  3c:	02020000 	andeq	r0, r2, #0
  40:	0001b805 	andeq	fp, r1, r5, lsl #16
  44:	07020200 	streq	r0, [r2, -r0, lsl #4]
  48:	00000127 	andeq	r0, r0, r7, lsr #2
  4c:	af050402 	svcge	0x00050402
  50:	02000001 	andeq	r0, r0, #1
  54:	01490704 	cmpeq	r9, r4, lsl #14
  58:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
  5c:	0001aa05 	andeq	sl, r1, r5, lsl #20
  60:	07080200 	streq	r0, [r8, -r0, lsl #4]
  64:	00000144 	andeq	r0, r0, r4, asr #2
  68:	69050404 	stmdbvs	r5, {r2, sl}
  6c:	0200746e 	andeq	r7, r0, #1845493760	; 0x6e000000
  70:	014e0704 	cmpeq	lr, r4, lsl #14
  74:	0c030000 	stceq	0, cr0, [r3], {-0}
  78:	03000000 	movweq	r0, #0
  7c:	00002c18 	andeq	r2, r0, r8, lsl ip
  80:	00f80500 	rscseq	r0, r8, r0, lsl #10
  84:	04020000 	streq	r0, [r2], #-0
  88:	0000a205 	andeq	sl, r0, r5, lsl #4
  8c:	00780600 	rsbseq	r0, r8, r0, lsl #12
  90:	00760604 	rsbseq	r0, r6, r4, lsl #12
  94:	06000000 	streq	r0, [r0], -r0
  98:	07040079 	smlsdxeq	r4, r9, r0, r0
  9c:	00000076 	andeq	r0, r0, r6, ror r0
  a0:	ff030001 			; <UNDEFINED> instruction: 0xff030001
  a4:	04000000 	streq	r0, [r0], #-0
  a8:	00008108 	andeq	r8, r0, r8, lsl #2
  ac:	013a0500 	teqeq	sl, r0, lsl #10
  b0:	04340000 	ldrteq	r0, [r4], #-0
  b4:	0000e90a 	andeq	lr, r0, sl, lsl #18
  b8:	01a00700 	lsleq	r0, r0, #14
  bc:	0b040000 	bleq	1000c4 <startup-0x1fefff3c>
  c0:	00000068 	andeq	r0, r0, r8, rrx
  c4:	01940700 	orrseq	r0, r4, r0, lsl #14
  c8:	0c040000 	stceq	0, cr0, [r4], {-0}
  cc:	00000068 	andeq	r0, r0, r8, rrx
  d0:	019a0704 	orrseq	r0, sl, r4, lsl #14
  d4:	0d040000 	stceq	0, cr0, [r4, #-0]
  d8:	00000068 	andeq	r0, r0, r8, rrx
  dc:	78700608 	ldmdavc	r0!, {r3, r9, sl}^
  e0:	e90e0400 	stmdb	lr, {sl}
  e4:	0c000000 	stceq	0, cr0, [r0], {-0}
  e8:	00a20800 	adceq	r0, r2, r0, lsl #16
  ec:	00f90000 	rscseq	r0, r9, r0
  f0:	6f090000 	svcvs	0x00090000
  f4:	13000000 	movwne	r0, #0
  f8:	00000300 	andeq	r0, r0, r0, lsl #6
  fc:	0f040000 	svceq	0x00040000
 100:	00000104 	andeq	r0, r0, r4, lsl #2
 104:	00ad040a 	adceq	r0, sp, sl, lsl #8
 108:	cf050000 	svcgt	0x00050000
 10c:	24000001 	strcs	r0, [r0], #-1
 110:	01831104 	orreq	r1, r3, r4, lsl #2
 114:	67060000 	strvs	r0, [r6, -r0]
 118:	04006f65 	streq	r6, [r0], #-3941	; 0xfffff09b
 11c:	0000f912 	andeq	pc, r0, r2, lsl r9	; <UNPREDICTABLE>
 120:	50070000 	andpl	r0, r7, r0
 124:	04000000 	streq	r0, [r0], #-0
 128:	00006813 	andeq	r6, r0, r3, lsl r8
 12c:	55070400 	strpl	r0, [r7, #-1024]	; 0xfffffc00
 130:	04000000 	streq	r0, [r0], #-0
 134:	00006813 	andeq	r6, r0, r3, lsl r8
 138:	1d070800 	stcne	8, cr0, [r7, #-0]
 13c:	04000001 	streq	r0, [r0], #-1
 140:	00006814 	andeq	r6, r0, r4, lsl r8
 144:	22070c00 	andcs	r0, r7, #0, 24
 148:	04000001 	streq	r0, [r0], #-1
 14c:	00006814 	andeq	r6, r0, r4, lsl r8
 150:	14071000 	strne	r1, [r7], #-0
 154:	04000000 	streq	r0, [r0], #-0
 158:	00019415 	andeq	r9, r1, r5, lsl r4
 15c:	5c071400 	cfstrspl	mvf1, [r7], {-0}
 160:	04000003 	streq	r0, [r0], #-3
 164:	00019416 	andeq	r9, r1, r6, lsl r4
 168:	19071800 	stmdbne	r7, {fp, ip}
 16c:	04000000 	streq	r0, [r0], #-0
 170:	00019417 	andeq	r9, r1, r7, lsl r4
 174:	13071c00 	movwne	r1, #31744	; 0x7c00
 178:	04000001 	streq	r0, [r0], #-1
 17c:	0001af18 	andeq	sl, r1, r8, lsl pc
 180:	0b002000 	bleq	8188 <startup-0x1fff7e78>
 184:	0000018e 	andeq	r0, r0, lr, lsl #3
 188:	00018e0c 	andeq	r8, r1, ip, lsl #28
 18c:	040a0000 	streq	r0, [sl], #-0
 190:	0000010a 	andeq	r0, r0, sl, lsl #2
 194:	0183040a 	orreq	r0, r3, sl, lsl #8
 198:	af0b0000 	svcge	0x000b0000
 19c:	0c000001 	stceq	0, cr0, [r0], {1}
 1a0:	0000018e 	andeq	r0, r0, lr, lsl #3
 1a4:	0000680c 	andeq	r6, r0, ip, lsl #16
 1a8:	00680c00 	rsbeq	r0, r8, r0, lsl #24
 1ac:	0a000000 	beq	1b4 <startup-0x1ffffe4c>
 1b0:	00019a04 	andeq	r9, r1, r4, lsl #20
 1b4:	01fa0300 	mvnseq	r0, r0, lsl #6
 1b8:	19040000 	stmdbne	r4, {}	; <UNPREDICTABLE>
 1bc:	0000018e 	andeq	r0, r0, lr, lsl #3
 1c0:	0001e00d 	andeq	lr, r1, sp
 1c4:	d4140100 	ldrle	r0, [r4], #-256	; 0xffffff00
 1c8:	04200000 	strteq	r0, [r0], #-0
 1cc:	01000001 	tsteq	r0, r1
 1d0:	0001f89c 	muleq	r1, ip, r8
 1d4:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 1d8:	01b51401 			; <UNDEFINED> instruction: 0x01b51401
 1dc:	91020000 	mrsls	r0, (UNDEF: 2)
 1e0:	00e40f6c 	rsceq	r0, r4, ip, ror #30
 1e4:	00702000 	rsbseq	r2, r0, r0
 1e8:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 1ec:	68170100 	ldmdavs	r7, {r8}
 1f0:	02000000 	andeq	r0, r0, #0
 1f4:	00007491 	muleq	r0, r1, r4
 1f8:	0001c20d 	andeq	ip, r1, sp, lsl #4
 1fc:	820e0100 	andhi	r0, lr, #0, 2
 200:	52200000 	eorpl	r0, r0, #0
 204:	01000000 	mrseq	r0, (UNDEF: 0)
 208:	0002479c 	muleq	r2, ip, r7
 20c:	006f0e00 	rsbeq	r0, pc, r0, lsl #28
 210:	01b50e01 			; <UNDEFINED> instruction: 0x01b50e01
 214:	91020000 	mrsls	r0, (UNDEF: 2)
 218:	008a0f6c 	addeq	r0, sl, ip, ror #30
 21c:	00422000 	subeq	r2, r2, r0
 220:	69100000 	ldmdbvs	r0, {}	; <UNPREDICTABLE>
 224:	680f0100 	stmdavs	pc, {r8}	; <UNPREDICTABLE>
 228:	02000000 	andeq	r0, r0, #0
 22c:	900f7491 	mulls	pc, r1, r4	; <UNPREDICTABLE>
 230:	2a200000 	bcs	800238 <startup-0x1f7ffdc8>
 234:	11000000 	mrsne	r0, (UNDEF: 0)
 238:	0000005a 	andeq	r0, r0, sl, asr r0
 23c:	00680a01 	rsbeq	r0, r8, r1, lsl #20
 240:	00120000 	andseq	r0, r2, r0
 244:	0d000000 	stceq	0, cr0, [r0, #-0]
 248:	000001d4 	ldrdeq	r0, [r0], -r4
 24c:	00300801 	eorseq	r0, r0, r1, lsl #16
 250:	00522000 	subseq	r2, r2, r0
 254:	9c010000 	stcls	0, cr0, [r1], {-0}
 258:	00000296 	muleq	r0, r6, r2
 25c:	01006f0e 	tsteq	r0, lr, lsl #30
 260:	0001b508 	andeq	fp, r1, r8, lsl #10
 264:	6c910200 	lfmvs	f0, 4, [r1], {0}
 268:	0000380f 	andeq	r3, r0, pc, lsl #16
 26c:	00004220 	andeq	r4, r0, r0, lsr #4
 270:	00691000 	rsbeq	r1, r9, r0
 274:	00680901 	rsbeq	r0, r8, r1, lsl #18
 278:	91020000 	mrsls	r0, (UNDEF: 2)
 27c:	003e0f74 	eorseq	r0, lr, r4, ror pc
 280:	002a2000 	eoreq	r2, sl, r0
 284:	5a110000 	bpl	44028c <startup-0x1fbbfd74>
 288:	01000000 	mrseq	r0, (UNDEF: 0)
 28c:	0000680a 	andeq	r6, r0, sl, lsl #16
 290:	00001200 	andeq	r1, r0, r0, lsl #4
 294:	02130000 	andseq	r0, r3, #0
 298:	01000002 	tsteq	r0, r2
 29c:	00001003 	andeq	r1, r0, r3
 2a0:	00002020 	andeq	r2, r0, r0, lsr #32
 2a4:	0e9c0100 	fmleqe	f0, f4, f0
 2a8:	0301006f 	movweq	r0, #4207	; 0x106f
 2ac:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
 2b0:	14749102 	ldrbtne	r9, [r4], #-258	; 0xfffffefe
 2b4:	000001ec 	andeq	r0, r0, ip, ror #3
 2b8:	00680301 	rsbeq	r0, r8, r1, lsl #6
 2bc:	91020000 	mrsls	r0, (UNDEF: 2)
 2c0:	01f31470 	mvnseq	r1, r0, ror r4
 2c4:	03010000 	movweq	r0, #4096	; 0x1000
 2c8:	00000068 	andeq	r0, r0, r8, rrx
 2cc:	006c9102 	rsbeq	r9, ip, r2, lsl #2
 2d0:	00017000 	andeq	r7, r1, r0
 2d4:	0d000400 	cfstrseq	mvf0, [r0, #-0]
 2d8:	04000001 	streq	r0, [r0], #-1
 2dc:	00006001 	andeq	r6, r0, r1
 2e0:	02590c00 	subseq	r0, r9, #0, 24
 2e4:	001e0000 	andseq	r0, lr, r0
 2e8:	01d80000 	bicseq	r0, r8, r0
 2ec:	01102000 	tsteq	r0, r0
 2f0:	015f0000 	cmpeq	pc, r0
 2f4:	18020000 	stmdane	r2, {}	; <UNPREDICTABLE>
 2f8:	00b20802 	adcseq	r0, r2, r2, lsl #16
 2fc:	19030000 	stmdbne	r3, {}	; <UNPREDICTABLE>
 300:	02000002 	andeq	r0, r0, #2
 304:	0000b209 	andeq	fp, r0, r9, lsl #4
 308:	37030000 	strcc	r0, [r3, -r0]
 30c:	02000002 	andeq	r0, r0, #2
 310:	0000b90a 	andeq	fp, r0, sl, lsl #18
 314:	1f030400 	svcne	0x00030400
 318:	02000002 	andeq	r0, r0, #2
 31c:	0000b90b 	andeq	fp, r0, fp, lsl #18
 320:	51030600 	tstpl	r3, r0, lsl #12
 324:	02000002 	andeq	r0, r0, #2
 328:	0000b20c 	andeq	fp, r0, ip, lsl #4
 32c:	13030800 	movwne	r0, #14336	; 0x3800
 330:	02000002 	andeq	r0, r0, #2
 334:	0000b20d 	andeq	fp, r0, sp, lsl #4
 338:	aa030c00 	bge	c3340 <startup-0x1ff3ccc0>
 33c:	02000002 	andeq	r0, r0, #2
 340:	0000c00e 	andeq	ip, r0, lr
 344:	c2031000 	andgt	r1, r3, #0
 348:	02000002 	andeq	r0, r0, #2
 34c:	0000c00f 	andeq	ip, r0, pc
 350:	9e031100 	adflss	f1, f3, f0
 354:	02000002 	andeq	r0, r0, #2
 358:	0000b910 	andeq	fp, r0, r0, lsl r9
 35c:	4a031200 	bmi	c4b64 <startup-0x1ff3b49c>
 360:	02000002 	andeq	r0, r0, #2
 364:	0000c011 	andeq	ip, r0, r1, lsl r0
 368:	2f031400 	svccs	0x00031400
 36c:	02000002 	andeq	r0, r0, #2
 370:	0000c012 	andeq	ip, r0, r2, lsl r0
 374:	3e031500 	cfsh32cc	mvfx1, mvfx3, #0
 378:	02000002 	andeq	r0, r0, #2
 37c:	0000b913 	andeq	fp, r0, r3, lsl r9
 380:	04001600 	streq	r1, [r0], #-1536	; 0xfffffa00
 384:	014e0704 	cmpeq	lr, r4, lsl #14
 388:	02040000 	andeq	r0, r4, #0
 38c:	00012707 	andeq	r2, r1, r7, lsl #14
 390:	08010400 	stmdaeq	r1, {sl}
 394:	00000105 	andeq	r0, r0, r5, lsl #2
 398:	0002bd05 	andeq	fp, r2, r5, lsl #26
 39c:	25140200 	ldrcs	r0, [r4, #-512]	; 0xfffffe00
 3a0:	06000000 	streq	r0, [r0], -r0
 3a4:	0000022a 	andeq	r0, r0, sl, lsr #4
 3a8:	00c01801 	sbceq	r1, r0, r1, lsl #16
 3ac:	02800000 	addeq	r0, r0, #0
 3b0:	00682000 	rsbeq	r2, r8, r0
 3b4:	9c010000 	stcls	0, cr0, [r1], {-0}
 3b8:	00000116 	andeq	r0, r0, r6, lsl r1
 3bc:	79656b07 	stmdbvc	r5!, {r0, r1, r2, r8, r9, fp, sp, lr}^
 3c0:	16190100 	ldrne	r0, [r9], -r0, lsl #2
 3c4:	02000001 	andeq	r0, r0, #1
 3c8:	72075891 	andvc	r5, r7, #9502720	; 0x910000
 3cc:	0100776f 	tsteq	r0, pc, ror #14
 3d0:	0001261a 	andeq	r2, r1, sl, lsl r6
 3d4:	6c910200 	lfmvs	f0, 4, [r1], {0}
 3d8:	6c6f6307 	stclvs	3, cr6, [pc], #-28	; 3c4 <startup-0x1ffffc3c>
 3dc:	261a0100 	ldrcs	r0, [sl], -r0, lsl #2
 3e0:	02000001 	andeq	r0, r0, #1
 3e4:	08006891 	stmdaeq	r0, {r0, r4, r7, fp, sp, lr}
 3e8:	000000c0 	andeq	r0, r0, r0, asr #1
 3ec:	00000126 	andeq	r0, r0, r6, lsr #2
 3f0:	0000b209 	andeq	fp, r0, r9, lsl #4
 3f4:	0a000f00 	beq	3ffc <startup-0x1fffc004>
 3f8:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
 3fc:	940b0074 	strls	r0, [fp], #-116	; 0xffffff8c
 400:	01000002 	tsteq	r0, r2
 404:	0001260e 	andeq	r2, r1, lr, lsl #12
 408:	00022c00 	andeq	r2, r2, r0, lsl #24
 40c:	00005420 	andeq	r5, r0, r0, lsr #8
 410:	539c0100 	orrspl	r0, ip, #0, 2
 414:	07000001 	streq	r0, [r0, -r1]
 418:	0f010063 	svceq	0x00010063
 41c:	000000c0 	andeq	r0, r0, r0, asr #1
 420:	00779102 	rsbseq	r9, r7, r2, lsl #2
 424:	0002b10c 	andeq	fp, r2, ip, lsl #2
 428:	d8040100 	stmdale	r4, {r8}
 42c:	54200001 	strtpl	r0, [r0], #-1
 430:	01000000 	mrseq	r0, (UNDEF: 0)
 434:	6f720d9c 	svcvs	0x00720d9c
 438:	04010077 	streq	r0, [r1], #-119	; 0xffffff89
 43c:	000000b2 	strheq	r0, [r0], -r2
 440:	00749102 	rsbseq	r9, r4, r2, lsl #2
 444:	0003a100 	andeq	sl, r3, r0, lsl #2
 448:	e0000400 	and	r0, r0, r0, lsl #8
 44c:	04000001 	streq	r0, [r0], #-1
 450:	00006001 	andeq	r6, r0, r1
 454:	03910c00 	orrseq	r0, r1, #0, 24
 458:	001e0000 	andseq	r0, lr, r0
 45c:	02e80000 	rsceq	r0, r8, #0
 460:	05242000 	streq	r2, [r4, #-0]!
 464:	02190000 	andseq	r0, r9, #0
 468:	01020000 	mrseq	r0, (UNDEF: 2)
 46c:	00010706 	andeq	r0, r1, r6, lsl #14
 470:	000a0300 	andeq	r0, sl, r0, lsl #6
 474:	2b020000 	blcs	8047c <startup-0x1ff7fb84>
 478:	00000037 	andeq	r0, r0, r7, lsr r0
 47c:	05080102 	streq	r0, [r8, #-258]	; 0xfffffefe
 480:	02000001 	andeq	r0, r0, #1
 484:	01b80502 			; <UNDEFINED> instruction: 0x01b80502
 488:	02020000 	andeq	r0, r2, #0
 48c:	00012707 	andeq	r2, r1, r7, lsl #14
 490:	05040200 	streq	r0, [r4, #-512]	; 0xfffffe00
 494:	000001af 	andeq	r0, r0, pc, lsr #3
 498:	49070402 	stmdbmi	r7, {r1, sl}
 49c:	02000001 	andeq	r0, r0, #1
 4a0:	01aa0508 			; <UNDEFINED> instruction: 0x01aa0508
 4a4:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
 4a8:	00014407 	andeq	r4, r1, r7, lsl #8
 4ac:	05040400 	streq	r0, [r4, #-1024]	; 0xfffffc00
 4b0:	00746e69 	rsbseq	r6, r4, r9, ror #28
 4b4:	4e070402 	cdpmi	4, 0, cr0, cr7, cr2, {0}
 4b8:	03000001 	movweq	r0, #1
 4bc:	0000000c 	andeq	r0, r0, ip
 4c0:	002c1803 	eoreq	r1, ip, r3, lsl #16
 4c4:	18050000 	stmdane	r5, {}	; <UNPREDICTABLE>
 4c8:	010e0804 	tsteq	lr, r4, lsl #16
 4cc:	19060000 	stmdbne	r6, {}	; <UNPREDICTABLE>
 4d0:	04000002 	streq	r0, [r0], #-2
 4d4:	00006f09 	andeq	r6, r0, r9, lsl #30
 4d8:	37060000 	strcc	r0, [r6, -r0]
 4dc:	04000002 	streq	r0, [r0], #-2
 4e0:	0000450a 	andeq	r4, r0, sl, lsl #10
 4e4:	1f060400 	svcne	0x00060400
 4e8:	04000002 	streq	r0, [r0], #-2
 4ec:	0000450b 	andeq	r4, r0, fp, lsl #10
 4f0:	51060600 	tstpl	r6, r0, lsl #12
 4f4:	04000002 	streq	r0, [r0], #-2
 4f8:	00006f0c 	andeq	r6, r0, ip, lsl #30
 4fc:	13060800 	movwne	r0, #26624	; 0x6800
 500:	04000002 	streq	r0, [r0], #-2
 504:	00006f0d 	andeq	r6, r0, sp, lsl #30
 508:	aa060c00 	bge	183510 <startup-0x1fe7caf0>
 50c:	04000002 	streq	r0, [r0], #-2
 510:	0000370e 	andeq	r3, r0, lr, lsl #14
 514:	c2061000 	andgt	r1, r6, #0
 518:	04000002 	streq	r0, [r0], #-2
 51c:	0000370f 	andeq	r3, r0, pc, lsl #14
 520:	9e061100 	adflss	f1, f6, f0
 524:	04000002 	streq	r0, [r0], #-2
 528:	00004510 	andeq	r4, r0, r0, lsl r5
 52c:	4a061200 	bmi	184d34 <startup-0x1fe7b2cc>
 530:	04000002 	streq	r0, [r0], #-2
 534:	00003711 	andeq	r3, r0, r1, lsl r7
 538:	2f061400 	svccs	0x00061400
 53c:	04000002 	streq	r0, [r0], #-2
 540:	00003712 	andeq	r3, r0, r2, lsl r7
 544:	3e061500 	cfsh32cc	mvfx1, mvfx6, #0
 548:	04000002 	streq	r0, [r0], #-2
 54c:	00004513 	andeq	r4, r0, r3, lsl r5
 550:	03001600 	movweq	r1, #1536	; 0x600
 554:	000002bd 			; <UNDEFINED> instruction: 0x000002bd
 558:	00811404 	addeq	r1, r1, r4, lsl #8
 55c:	5a070000 	bpl	1c0564 <startup-0x1fe3fa9c>
 560:	01000000 	mrseq	r0, (UNDEF: 0)
 564:	0006cc97 	muleq	r6, r7, ip
 568:	00014020 	andeq	r4, r1, r0, lsr #32
 56c:	8b9c0100 	blhi	fe700974 <ball+0xde6fffbc>
 570:	08000001 	stmdaeq	r0, {r0}
 574:	97010078 	smlsdxls	r1, r8, r0, r0
 578:	00000068 	andeq	r0, r0, r8, rrx
 57c:	085c9102 	ldmdaeq	ip, {r1, r8, ip, pc}^
 580:	97010079 	smlsdxls	r1, r9, r0, r0
 584:	00000068 	andeq	r0, r0, r8, rrx
 588:	08589102 	ldmdaeq	r8, {r1, r8, ip, pc}^
 58c:	00746573 	rsbseq	r6, r4, r3, ror r5
 590:	00689701 	rsbeq	r9, r8, r1, lsl #14
 594:	91020000 	mrsls	r0, (UNDEF: 2)
 598:	03e10954 	mvneq	r0, #84, 18	; 0x150000
 59c:	98010000 	stmdals	r1, {}	; <UNPREDICTABLE>
 5a0:	00000076 	andeq	r0, r0, r6, ror r0
 5a4:	0a6f9102 	beq	1be49b4 <startup-0x1e41b64c>
 5a8:	98010063 	stmdals	r1, {r0, r1, r5, r6}
 5ac:	00000076 	andeq	r0, r0, r6, ror r0
 5b0:	09679102 	stmdbeq	r7!, {r1, r8, ip, pc}^
 5b4:	000003ed 	andeq	r0, r0, sp, ror #7
 5b8:	00769801 	rsbseq	r9, r6, r1, lsl #16
 5bc:	91020000 	mrsls	r0, (UNDEF: 2)
 5c0:	02ca096e 	sbceq	r0, sl, #1802240	; 0x1b8000
 5c4:	99010000 	stmdbls	r1, {}	; <UNPREDICTABLE>
 5c8:	00000068 	andeq	r0, r0, r8, rrx
 5cc:	00689102 	rsbeq	r9, r8, r2, lsl #2
 5d0:	0003f807 	andeq	pc, r3, r7, lsl #16
 5d4:	70880100 	addvc	r0, r8, r0, lsl #2
 5d8:	5c200006 	stcpl	0, cr0, [r0], #-24	; 0xffffffe8
 5dc:	01000000 	mrseq	r0, (UNDEF: 0)
 5e0:	0001bf9c 	muleq	r1, ip, pc	; <UNPREDICTABLE>
 5e4:	02d00b00 	sbcseq	r0, r0, #0, 22
 5e8:	8a010000 	bhi	405f0 <startup-0x1ffbfa10>
 5ec:	00000068 	andeq	r0, r0, r8, rrx
 5f0:	000001b1 			; <UNDEFINED> instruction: 0x000001b1
 5f4:	3f0d000c 	svccc	0x000d000c
 5f8:	01000003 	tsteq	r0, r3
 5fc:	0000688c 	andeq	r6, r0, ip, lsl #17
 600:	00000c00 	andeq	r0, r0, r0, lsl #24
 604:	0002f807 	andeq	pc, r2, r7, lsl #16
 608:	0a7c0100 	beq	1f00a10 <startup-0x1e0ff5f0>
 60c:	66200006 	strtvs	r0, [r0], -r6
 610:	01000000 	mrseq	r0, (UNDEF: 0)
 614:	0001ed9c 	muleq	r1, ip, sp
 618:	00690a00 	rsbeq	r0, r9, r0, lsl #20
 61c:	00767d01 	rsbseq	r7, r6, r1, lsl #26
 620:	91020000 	mrsls	r0, (UNDEF: 2)
 624:	006a0a77 	rsbeq	r0, sl, r7, ror sl
 628:	00767d01 	rsbseq	r7, r6, r1, lsl #26
 62c:	91020000 	mrsls	r0, (UNDEF: 2)
 630:	2c0e0076 	stccs	0, cr0, [lr], {118}	; 0x76
 634:	01000003 	tsteq	r0, r3
 638:	0005c474 	andeq	ip, r5, r4, ror r4
 63c:	00004620 	andeq	r4, r0, r0, lsr #12
 640:	1f9c0100 	svcne	0x009c0100
 644:	0f000002 	svceq	0x00000002
 648:	00000327 	andeq	r0, r0, r7, lsr #6
 64c:	00767401 	rsbseq	r7, r6, r1, lsl #8
 650:	91020000 	mrsls	r0, (UNDEF: 2)
 654:	03ed0f77 	mvneq	r0, #476	; 0x1dc
 658:	74010000 	strvc	r0, [r1], #-0
 65c:	00000076 	andeq	r0, r0, r6, ror r0
 660:	00769102 	rsbseq	r9, r6, r2, lsl #2
 664:	0002dc0e 	andeq	sp, r2, lr, lsl #24
 668:	846d0100 	strbthi	r0, [sp], #-256	; 0xffffff00
 66c:	40200005 	eormi	r0, r0, r5
 670:	01000000 	mrseq	r0, (UNDEF: 0)
 674:	0002519c 	muleq	r2, ip, r1
 678:	02ea0f00 	rsceq	r0, sl, #0, 30
 67c:	6d010000 	stcvs	0, cr0, [r1, #-0]
 680:	00000076 	andeq	r0, r0, r6, ror r0
 684:	0f779102 	svceq	0x00779102
 688:	000003ed 	andeq	r0, r0, sp, ror #7
 68c:	00766d01 	rsbseq	r6, r6, r1, lsl #26
 690:	91020000 	mrsls	r0, (UNDEF: 2)
 694:	620e0076 	andvs	r0, lr, #118	; 0x76
 698:	01000003 	tsteq	r0, r3
 69c:	00050658 	andeq	r0, r5, r8, asr r6
 6a0:	00007e20 	andeq	r7, r0, r0, lsr #28
 6a4:	909c0100 	addsls	r0, ip, r0, lsl #2
 6a8:	0f000002 	svceq	0x00000002
 6ac:	000002f2 	strdeq	r0, [r0], -r2
 6b0:	00765801 	rsbseq	r5, r6, r1, lsl #16
 6b4:	91020000 	mrsls	r0, (UNDEF: 2)
 6b8:	03ed0f77 	mvneq	r0, #476	; 0x1dc
 6bc:	58010000 	stmdapl	r1, {}	; <UNPREDICTABLE>
 6c0:	00000076 	andeq	r0, r0, r6, ror r0
 6c4:	0d769102 	ldfeqp	f1, [r6, #-8]!
 6c8:	00000370 	andeq	r0, r0, r0, ror r3
 6cc:	00682e01 	rsbeq	r2, r8, r1, lsl #28
 6d0:	000c0000 	andeq	r0, ip, r0
 6d4:	031a1000 	tsteq	sl, #0
 6d8:	53010000 	movwpl	r0, #4096	; 0x1000
 6dc:	00000076 	andeq	r0, r0, r6, ror r0
 6e0:	200004dc 	ldrdcs	r0, [r0], -ip
 6e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 6e8:	02b89c01 	adcseq	r9, r8, #256	; 0x100
 6ec:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 6f4 <startup-0x1ffff90c>
 6f0:	01000003 	tsteq	r0, r3
 6f4:	00007653 	andeq	r7, r0, r3, asr r6
 6f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 6fc:	030d1000 	movweq	r1, #53248	; 0xd000
 700:	3b010000 	blcc	40708 <startup-0x1ffbf8f8>
 704:	00000076 	andeq	r0, r0, r6, ror r0
 708:	2000044c 	andcs	r0, r0, ip, asr #8
 70c:	00000090 	muleq	r0, r0, r0
 710:	02f99c01 	rscseq	r9, r9, #256	; 0x100
 714:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 71c <startup-0x1ffff8e4>
 718:	01000003 	tsteq	r0, r3
 71c:	0000763b 	andeq	r7, r0, fp, lsr r6
 720:	6f910200 	svcvs	0x00910200
 724:	0100630a 	tsteq	r0, sl, lsl #6
 728:	0000763c 	andeq	r7, r0, ip, lsr r6
 72c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 730:	0003700d 	andeq	r7, r3, sp
 734:	682e0100 	stmdavs	lr!, {r8}
 738:	0c000000 	stceq	0, cr0, [r0], {-0}
 73c:	ce0e0000 	cdpgt	0, 0, cr0, cr14, cr0, {0}
 740:	01000003 	tsteq	r0, r3
 744:	0003e228 	andeq	lr, r3, r8, lsr #4
 748:	00006a20 	andeq	r6, r0, r0, lsr #20
 74c:	289c0100 	ldmcs	ip, {r8}
 750:	0a000003 	beq	764 <startup-0x1ffff89c>
 754:	29010063 	stmdbcs	r1, {r0, r1, r5, r6}
 758:	00000076 	andeq	r0, r0, r6, ror r0
 75c:	0d779102 	ldfeqp	f1, [r7, #-8]!
 760:	00000370 	andeq	r0, r0, r0, ror r3
 764:	00682e01 	rsbeq	r2, r8, r1, lsl #28
 768:	000c0000 	andeq	r0, ip, r0
 76c:	03e60e00 	mvneq	r0, #0, 28
 770:	15010000 	strne	r0, [r1, #-0]
 774:	20000388 	andcs	r0, r0, r8, lsl #7
 778:	0000005a 	andeq	r0, r0, sl, asr r0
 77c:	034c9c01 	movteq	r9, #52225	; 0xcc01
 780:	ed0f0000 	stc	0, cr0, [pc, #-0]	; 788 <startup-0x1ffff878>
 784:	01000003 	tsteq	r0, r3
 788:	00007615 	andeq	r7, r0, r5, lsl r6
 78c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 790:	034b1100 	movteq	r1, #45312	; 0xb100
 794:	0d010000 	stceq	0, cr0, [r1, #-0]
 798:	20000338 	andcs	r0, r0, r8, lsr r3
 79c:	00000050 	andeq	r0, r0, r0, asr r0
 7a0:	037a9c01 	cmneq	sl, #256	; 0x100
 7a4:	78080000 	stmdavc	r8, {}	; <UNPREDICTABLE>
 7a8:	760d0100 	strvc	r0, [sp], -r0, lsl #2
 7ac:	02000000 	andeq	r0, r0, #0
 7b0:	630a6f91 	movwvs	r6, #44945	; 0xaf91
 7b4:	760e0100 	strvc	r0, [lr], -r0, lsl #2
 7b8:	02000000 	andeq	r0, r0, #0
 7bc:	12007791 	andne	r7, r0, #38010880	; 0x2440000
 7c0:	0000037c 	andeq	r0, r0, ip, ror r3
 7c4:	02e80501 	rsceq	r0, r8, #4194304	; 0x400000
 7c8:	00502000 	subseq	r2, r0, r0
 7cc:	9c010000 	stcls	0, cr0, [r1], {-0}
 7d0:	01007808 	tsteq	r0, r8, lsl #16
 7d4:	00007605 	andeq	r7, r0, r5, lsl #12
 7d8:	6f910200 	svcvs	0x00910200
 7dc:	0100630a 	tsteq	r0, sl, lsl #6
 7e0:	00007606 	andeq	r7, r0, r6, lsl #12
 7e4:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 7e8:	02df0000 	sbcseq	r0, pc, #0
 7ec:	00040000 	andeq	r0, r4, r0
 7f0:	00000312 	andeq	r0, r0, r2, lsl r3
 7f4:	00600104 	rsbeq	r0, r0, r4, lsl #2
 7f8:	100c0000 	andne	r0, ip, r0
 7fc:	1e000004 	cdpne	0, 0, cr0, cr0, cr4, {0}
	...
 808:	ef000000 	svc	0x00000000
 80c:	02000003 	andeq	r0, r0, #3
 810:	01070601 	tsteq	r7, r1, lsl #12
 814:	0a030000 	beq	c081c <startup-0x1ff3f7e4>
 818:	02000000 	andeq	r0, r0, #0
 81c:	0000372b 	andeq	r3, r0, fp, lsr #14
 820:	08010200 	stmdaeq	r1, {r9}
 824:	00000105 	andeq	r0, r0, r5, lsl #2
 828:	b8050202 	stmdalt	r5, {r1, r9}
 82c:	02000001 	andeq	r0, r0, #1
 830:	01270702 			; <UNDEFINED> instruction: 0x01270702
 834:	04020000 	streq	r0, [r2], #-0
 838:	0001af05 	andeq	sl, r1, r5, lsl #30
 83c:	07040200 	streq	r0, [r4, -r0, lsl #4]
 840:	00000149 	andeq	r0, r0, r9, asr #2
 844:	aa050802 	bge	142854 <startup-0x1febd7ac>
 848:	02000001 	andeq	r0, r0, #1
 84c:	01440708 	cmpeq	r4, r8, lsl #14
 850:	04040000 	streq	r0, [r4], #-0
 854:	746e6905 	strbtvc	r6, [lr], #-2309	; 0xfffff6fb
 858:	07040200 	streq	r0, [r4, -r0, lsl #4]
 85c:	0000014e 	andeq	r0, r0, lr, asr #2
 860:	00000c03 	andeq	r0, r0, r3, lsl #24
 864:	2c180300 	ldccs	3, cr0, [r8], {-0}
 868:	05000000 	streq	r0, [r0, #-0]
 86c:	0e080418 	cfmvdlreq	mvd8, r0
 870:	06000001 	streq	r0, [r0], -r1
 874:	00000219 	andeq	r0, r0, r9, lsl r2
 878:	006f0904 	rsbeq	r0, pc, r4, lsl #18
 87c:	06000000 	streq	r0, [r0], -r0
 880:	00000237 	andeq	r0, r0, r7, lsr r2
 884:	00450a04 	subeq	r0, r5, r4, lsl #20
 888:	06040000 	streq	r0, [r4], -r0
 88c:	0000021f 	andeq	r0, r0, pc, lsl r2
 890:	00450b04 	subeq	r0, r5, r4, lsl #22
 894:	06060000 	streq	r0, [r6], -r0
 898:	00000251 	andeq	r0, r0, r1, asr r2
 89c:	006f0c04 	rsbeq	r0, pc, r4, lsl #24
 8a0:	06080000 	streq	r0, [r8], -r0
 8a4:	00000213 	andeq	r0, r0, r3, lsl r2
 8a8:	006f0d04 	rsbeq	r0, pc, r4, lsl #26
 8ac:	060c0000 	streq	r0, [ip], -r0
 8b0:	000002aa 	andeq	r0, r0, sl, lsr #5
 8b4:	00370e04 	eorseq	r0, r7, r4, lsl #28
 8b8:	06100000 	ldreq	r0, [r0], -r0
 8bc:	000002c2 	andeq	r0, r0, r2, asr #5
 8c0:	00370f04 	eorseq	r0, r7, r4, lsl #30
 8c4:	06110000 	ldreq	r0, [r1], -r0
 8c8:	0000029e 	muleq	r0, lr, r2
 8cc:	00451004 	subeq	r1, r5, r4
 8d0:	06120000 	ldreq	r0, [r2], -r0
 8d4:	0000024a 	andeq	r0, r0, sl, asr #4
 8d8:	00371104 	eorseq	r1, r7, r4, lsl #2
 8dc:	06140000 	ldreq	r0, [r4], -r0
 8e0:	0000022f 	andeq	r0, r0, pc, lsr #4
 8e4:	00371204 	eorseq	r1, r7, r4, lsl #4
 8e8:	06150000 	ldreq	r0, [r5], -r0
 8ec:	0000023e 	andeq	r0, r0, lr, lsr r2
 8f0:	00451304 	subeq	r1, r5, r4, lsl #6
 8f4:	00160000 	andseq	r0, r6, r0
 8f8:	0002bd03 	andeq	fp, r2, r3, lsl #26
 8fc:	81140400 	tsthi	r4, r0, lsl #8
 900:	07000000 	streq	r0, [r0, -r0]
 904:	000000f8 	strdeq	r0, [r0], -r8
 908:	3a050502 	bcc	141d18 <startup-0x1febe2e8>
 90c:	08000001 	stmdaeq	r0, {r0}
 910:	06050078 			; <UNDEFINED> instruction: 0x06050078
 914:	00000076 	andeq	r0, r0, r6, ror r0
 918:	00790800 	rsbseq	r0, r9, r0, lsl #16
 91c:	00760705 	rsbseq	r0, r6, r5, lsl #14
 920:	00010000 	andeq	r0, r1, r0
 924:	0000ff03 	andeq	pc, r0, r3, lsl #30
 928:	19080500 	stmdbne	r8, {r8, sl}
 92c:	07000001 	streq	r0, [r0, -r1]
 930:	0000013a 	andeq	r0, r0, sl, lsr r1
 934:	810a0534 	tsthi	sl, r4, lsr r5
 938:	06000001 	streq	r0, [r0], -r1
 93c:	000001a0 	andeq	r0, r0, r0, lsr #3
 940:	00680b05 	rsbeq	r0, r8, r5, lsl #22
 944:	06000000 	streq	r0, [r0], -r0
 948:	00000194 	muleq	r0, r4, r1
 94c:	00680c05 	rsbeq	r0, r8, r5, lsl #24
 950:	06040000 	streq	r0, [r4], -r0
 954:	0000019a 	muleq	r0, sl, r1
 958:	00680d05 	rsbeq	r0, r8, r5, lsl #26
 95c:	08080000 	stmdaeq	r8, {}	; <UNPREDICTABLE>
 960:	05007870 	streq	r7, [r0, #-2160]	; 0xfffff790
 964:	0001810e 	andeq	r8, r1, lr, lsl #2
 968:	09000c00 	stmdbeq	r0, {sl, fp}
 96c:	0000013a 	andeq	r0, r0, sl, lsr r1
 970:	00000191 	muleq	r0, r1, r1
 974:	00006f0a 	andeq	r6, r0, sl, lsl #30
 978:	03001300 	movweq	r1, #768	; 0x300
 97c:	00000001 	andeq	r0, r0, r1
 980:	01450f05 	cmpeq	r5, r5, lsl #30
 984:	00030000 	andeq	r0, r3, r0
 988:	05000000 	streq	r0, [r0, #-0]
 98c:	0001a70f 	andeq	sl, r1, pc, lsl #14
 990:	45040b00 	strmi	r0, [r4, #-2816]	; 0xfffff500
 994:	07000001 	streq	r0, [r0, -r1]
 998:	000001cf 	andeq	r0, r0, pc, asr #3
 99c:	26110524 	ldrcs	r0, [r1], -r4, lsr #10
 9a0:	08000002 	stmdaeq	r0, {r1}
 9a4:	006f6567 	rsbeq	r6, pc, r7, ror #10
 9a8:	019c1205 	orrseq	r1, ip, r5, lsl #4
 9ac:	06000000 	streq	r0, [r0], -r0
 9b0:	00000050 	andeq	r0, r0, r0, asr r0
 9b4:	00681305 	rsbeq	r1, r8, r5, lsl #6
 9b8:	06040000 	streq	r0, [r4], -r0
 9bc:	00000055 	andeq	r0, r0, r5, asr r0
 9c0:	00681305 	rsbeq	r1, r8, r5, lsl #6
 9c4:	06080000 	streq	r0, [r8], -r0
 9c8:	0000011d 	andeq	r0, r0, sp, lsl r1
 9cc:	00681405 	rsbeq	r1, r8, r5, lsl #8
 9d0:	060c0000 	streq	r0, [ip], -r0
 9d4:	00000122 	andeq	r0, r0, r2, lsr #2
 9d8:	00681405 	rsbeq	r1, r8, r5, lsl #8
 9dc:	06100000 	ldreq	r0, [r0], -r0
 9e0:	00000014 	andeq	r0, r0, r4, lsl r0
 9e4:	02371505 	eorseq	r1, r7, #20971520	; 0x1400000
 9e8:	06140000 	ldreq	r0, [r4], -r0
 9ec:	0000035c 	andeq	r0, r0, ip, asr r3
 9f0:	02371605 	eorseq	r1, r7, #5242880	; 0x500000
 9f4:	06180000 	ldreq	r0, [r8], -r0
 9f8:	00000019 	andeq	r0, r0, r9, lsl r0
 9fc:	02371705 	eorseq	r1, r7, #1310720	; 0x140000
 a00:	061c0000 	ldreq	r0, [ip], -r0
 a04:	00000113 	andeq	r0, r0, r3, lsl r1
 a08:	02521805 	subseq	r1, r2, #327680	; 0x50000
 a0c:	00200000 	eoreq	r0, r0, r0
 a10:	0002310c 	andeq	r3, r2, ip, lsl #2
 a14:	02310d00 	eorseq	r0, r1, #0, 26
 a18:	0b000000 	bleq	a20 <startup-0x1ffff5e0>
 a1c:	0001ad04 	andeq	sl, r1, r4, lsl #26
 a20:	26040b00 	strcs	r0, [r4], -r0, lsl #22
 a24:	0c000002 	stceq	0, cr0, [r0], {2}
 a28:	00000252 	andeq	r0, r0, r2, asr r2
 a2c:	0002310d 	andeq	r3, r2, sp, lsl #2
 a30:	00680d00 	rsbeq	r0, r8, r0, lsl #26
 a34:	680d0000 	stmdavs	sp, {}	; <UNPREDICTABLE>
 a38:	00000000 	andeq	r0, r0, r0
 a3c:	023d040b 	eorseq	r0, sp, #184549376	; 0xb000000
 a40:	fb030000 	blx	c0a4a <startup-0x1ff3f5b6>
 a44:	05000001 	streq	r0, [r0, #-1]
 a48:	0001ad19 	andeq	sl, r1, r9, lsl sp
 a4c:	01fa0300 	mvnseq	r0, r0, lsl #6
 a50:	19050000 	stmdbne	r5, {}	; <UNPREDICTABLE>
 a54:	00000231 	andeq	r0, r0, r1, lsr r2
 a58:	00045a0e 	andeq	r5, r4, lr, lsl #20
 a5c:	911e0100 	tstls	lr, r0, lsl #2
 a60:	05000001 	streq	r0, [r0, #-1]
 a64:	00098403 	andeq	r8, r9, r3, lsl #8
 a68:	040b0e20 	streq	r0, [fp], #-3616	; 0xfffff1e0
 a6c:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
 a70:	00000258 	andeq	r0, r0, r8, asr r2
 a74:	09b80305 	ldmibeq	r8!, {r0, r2, r8, r9}
 a78:	550f2000 	strpl	r2, [pc, #-0]	; a80 <startup-0x1ffff580>
 a7c:	01000004 	tsteq	r0, r4
 a80:	00085434 	andeq	r5, r8, r4, lsr r4
 a84:	00008c20 	andeq	r8, r0, r0, lsr #24
 a88:	c09c0100 	addsgt	r0, ip, r0, lsl #2
 a8c:	10000002 	andne	r0, r0, r2
 a90:	35010070 	strcc	r0, [r1, #-112]	; 0xffffff90
 a94:	00000263 	andeq	r0, r0, r3, ror #4
 a98:	11749102 	cmnne	r4, r2, lsl #2
 a9c:	0000020d 	andeq	r0, r0, sp, lsl #4
 aa0:	00683b01 	rsbeq	r3, r8, r1, lsl #22
 aa4:	91020000 	mrsls	r0, (UNDEF: 2)
 aa8:	4c120070 	ldcmi	0, cr0, [r2], {112}	; 0x70
 aac:	01000004 	tsteq	r0, r4
 ab0:	00080c14 	andeq	r0, r8, r4, lsl ip
 ab4:	00004820 	andeq	r4, r0, r0, lsr #16
 ab8:	129c0100 	addsne	r0, ip, #0, 2
 abc:	00000468 	andeq	r0, r0, r8, ror #8
 ac0:	00000301 	andeq	r0, r0, r1, lsl #6
 ac4:	000c2000 	andeq	r2, ip, r0
 ac8:	9c010000 	stcls	0, cr0, [r1], {-0}
 acc:	00009f00 	andeq	r9, r0, r0, lsl #30
 ad0:	0f000400 	svceq	0x00000400
 ad4:	04000004 	streq	r0, [r0], #-4
 ad8:	00006001 	andeq	r6, r0, r1
 adc:	047c0c00 	ldrbteq	r0, [ip], #-3072	; 0xfffff400
 ae0:	001e0000 	andseq	r0, lr, r0
 ae4:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
 ae8:	00a42000 	adceq	r2, r4, r0
 aec:	05310000 	ldreq	r0, [r1, #-0]!
 af0:	04020000 	streq	r0, [r2], #-0
 af4:	00014e07 	andeq	r4, r1, r7, lsl #28
 af8:	07020200 	streq	r0, [r2, -r0, lsl #4]
 afc:	00000127 	andeq	r0, r0, r7, lsr #2
 b00:	05080102 	streq	r0, [r8, #-258]	; 0xfffffefe
 b04:	03000001 	movweq	r0, #1
 b08:	0000033f 	andeq	r0, r0, pc, lsr r3
 b0c:	09621b01 	stmdbeq	r2!, {r0, r8, r9, fp, ip}^
 b10:	00222000 	eoreq	r2, r2, r0
 b14:	9c010000 	stcls	0, cr0, [r1], {-0}
 b18:	0000005d 	andeq	r0, r0, sp, asr r0
 b1c:	00736d04 	rsbseq	r6, r3, r4, lsl #26
 b20:	00251b01 	eoreq	r1, r5, r1, lsl #22
 b24:	91020000 	mrsls	r0, (UNDEF: 2)
 b28:	d0030074 	andle	r0, r3, r4, ror r0
 b2c:	01000002 	tsteq	r0, r2
 b30:	00093612 	andeq	r3, r9, r2, lsl r6
 b34:	00002c20 	andeq	r2, r0, r0, lsr #24
 b38:	809c0100 	addshi	r0, ip, r0, lsl #2
 b3c:	04000000 	streq	r0, [r0], #-0
 b40:	01007375 	tsteq	r0, r5, ror r3
 b44:	00002512 	andeq	r2, r0, r2, lsl r5
 b48:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 b4c:	03700500 	cmneq	r0, #0, 10
 b50:	0d010000 	stceq	0, cr0, [r1, #-0]
 b54:	20000924 	andcs	r0, r0, r4, lsr #18
 b58:	00000012 	andeq	r0, r0, r2, lsl r0
 b5c:	70069c01 	andvc	r9, r6, r1, lsl #24
 b60:	01000004 	tsteq	r0, r4
 b64:	0008e004 	andeq	lr, r8, r4
 b68:	00004420 	andeq	r4, r0, r0, lsr #8
 b6c:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	110e1b0e 	tstne	lr, lr, lsl #22
   c:	10061201 	andne	r1, r6, r1, lsl #4
  10:	02000017 	andeq	r0, r0, #23
  14:	0b0b0024 	bleq	2c00ac <startup-0x1fd3ff54>
  18:	0e030b3e 	vmoveq.16	d3[0], r0
  1c:	16030000 	strne	r0, [r3], -r0
  20:	3a0e0300 	bcc	380c28 <startup-0x1fc7f3d8>
  24:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  28:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
  2c:	0b0b0024 	bleq	2c00c4 <startup-0x1fd3ff3c>
  30:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
  34:	13050000 	movwne	r0, #20480	; 0x5000
  38:	0b0e0301 	bleq	380c44 <startup-0x1fc7f3bc>
  3c:	3b0b3a0b 	blcc	2ce870 <startup-0x1fd31790>
  40:	0013010b 	andseq	r0, r3, fp, lsl #2
  44:	000d0600 	andeq	r0, sp, r0, lsl #12
  48:	0b3a0803 	bleq	e8205c <startup-0x1f17dfa4>
  4c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  50:	00000b38 	andeq	r0, r0, r8, lsr fp
  54:	03000d07 	movweq	r0, #3335	; 0xd07
  58:	3b0b3a0e 	blcc	2ce898 <startup-0x1fd31768>
  5c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  60:	0800000b 	stmdaeq	r0, {r0, r1, r3}
  64:	13490101 	movtne	r0, #37121	; 0x9101
  68:	00001301 	andeq	r1, r0, r1, lsl #6
  6c:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
  70:	000b2f13 	andeq	r2, fp, r3, lsl pc
  74:	000f0a00 	andeq	r0, pc, r0, lsl #20
  78:	13490b0b 	movtne	r0, #39691	; 0x9b0b
  7c:	150b0000 	strne	r0, [fp, #-0]
  80:	01192701 	tsteq	r9, r1, lsl #14
  84:	0c000013 	stceq	0, cr0, [r0], {19}
  88:	13490005 	movtne	r0, #36869	; 0x9005
  8c:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
  90:	03193f01 	tsteq	r9, #1, 30
  94:	3b0b3a0e 	blcc	2ce8d4 <startup-0x1fd3172c>
  98:	1119270b 	tstne	r9, fp, lsl #14
  9c:	40061201 	andmi	r1, r6, r1, lsl #4
  a0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  a4:	00001301 	andeq	r1, r0, r1, lsl #6
  a8:	0300050e 	movweq	r0, #1294	; 0x50e
  ac:	3b0b3a08 	blcc	2ce8d4 <startup-0x1fd3172c>
  b0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  b4:	0f000018 	svceq	0x00000018
  b8:	0111010b 	tsteq	r1, fp, lsl #2
  bc:	00000612 	andeq	r0, r0, r2, lsl r6
  c0:	03003410 	movweq	r3, #1040	; 0x410
  c4:	3b0b3a08 	blcc	2ce8ec <startup-0x1fd31714>
  c8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
  cc:	11000018 	tstne	r0, r8, lsl r0
  d0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  d4:	0b3a0e03 	bleq	e838e8 <startup-0x1f17c718>
  d8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  dc:	0000193c 	andeq	r1, r0, ip, lsr r9
  e0:	00001812 	andeq	r1, r0, r2, lsl r8
  e4:	012e1300 			; <UNDEFINED> instruction: 0x012e1300
  e8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  ec:	0b3b0b3a 	bleq	ec2ddc <startup-0x1f13d224>
  f0:	01111927 	tsteq	r1, r7, lsr #18
  f4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  f8:	00194297 	mulseq	r9, r7, r2
  fc:	00051400 	andeq	r1, r5, r0, lsl #8
 100:	0b3a0e03 	bleq	e83914 <startup-0x1f17c6ec>
 104:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 108:	00001802 	andeq	r1, r0, r2, lsl #16
 10c:	01110100 	tsteq	r1, r0, lsl #2
 110:	0b130e25 	bleq	4c39ac <startup-0x1fb3c654>
 114:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 118:	06120111 			; <UNDEFINED> instruction: 0x06120111
 11c:	00001710 	andeq	r1, r0, r0, lsl r7
 120:	0b011302 	bleq	44d30 <startup-0x1ffbb2d0>
 124:	3b0b3a0b 	blcc	2ce958 <startup-0x1fd316a8>
 128:	0013010b 	andseq	r0, r3, fp, lsl #2
 12c:	000d0300 	andeq	r0, sp, r0, lsl #6
 130:	0b3a0e03 	bleq	e83944 <startup-0x1f17c6bc>
 134:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 138:	00000b38 	andeq	r0, r0, r8, lsr fp
 13c:	0b002404 	bleq	9154 <startup-0x1fff6eac>
 140:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 144:	0500000e 	streq	r0, [r0, #-14]
 148:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
 14c:	0b3b0b3a 	bleq	ec2e3c <startup-0x1f13d1c4>
 150:	00001349 	andeq	r1, r0, r9, asr #6
 154:	3f012e06 	svccc	0x00012e06
 158:	3a0e0319 	bcc	380dc4 <startup-0x1fc7f23c>
 15c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 160:	11134919 	tstne	r3, r9, lsl r9
 164:	40061201 	andmi	r1, r6, r1, lsl #4
 168:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 16c:	00001301 	andeq	r1, r0, r1, lsl #6
 170:	03003407 	movweq	r3, #1031	; 0x407
 174:	3b0b3a08 	blcc	2ce99c <startup-0x1fd31664>
 178:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 17c:	08000018 	stmdaeq	r0, {r3, r4}
 180:	13490101 	movtne	r0, #37121	; 0x9101
 184:	00001301 	andeq	r1, r0, r1, lsl #6
 188:	49002109 	stmdbmi	r0, {r0, r3, r8, sp}
 18c:	000b2f13 	andeq	r2, fp, r3, lsl pc
 190:	00240a00 	eoreq	r0, r4, r0, lsl #20
 194:	0b3e0b0b 	bleq	f82dc8 <startup-0x1f07d238>
 198:	00000803 	andeq	r0, r0, r3, lsl #16
 19c:	3f012e0b 	svccc	0x00012e0b
 1a0:	3a0e0319 	bcc	380e0c <startup-0x1fc7f1f4>
 1a4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1a8:	11134919 	tstne	r3, r9, lsl r9
 1ac:	40061201 	andmi	r1, r6, r1, lsl #4
 1b0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 1b4:	00001301 	andeq	r1, r0, r1, lsl #6
 1b8:	3f012e0c 	svccc	0x00012e0c
 1bc:	3a0e0319 	bcc	380e28 <startup-0x1fc7f1d8>
 1c0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 1c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 1c8:	97184006 	ldrls	r4, [r8, -r6]
 1cc:	00001942 	andeq	r1, r0, r2, asr #18
 1d0:	0300050d 	movweq	r0, #1293	; 0x50d
 1d4:	3b0b3a08 	blcc	2ce9fc <startup-0x1fd31604>
 1d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 1dc:	00000018 	andeq	r0, r0, r8, lsl r0
 1e0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1e4:	030b130e 	movweq	r1, #45838	; 0xb30e
 1e8:	110e1b0e 	tstne	lr, lr, lsl #22
 1ec:	10061201 	andne	r1, r6, r1, lsl #4
 1f0:	02000017 	andeq	r0, r0, #23
 1f4:	0b0b0024 	bleq	2c028c <startup-0x1fd3fd74>
 1f8:	0e030b3e 	vmoveq.16	d3[0], r0
 1fc:	16030000 	strne	r0, [r3], -r0
 200:	3a0e0300 	bcc	380e08 <startup-0x1fc7f1f8>
 204:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 208:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 20c:	0b0b0024 	bleq	2c02a4 <startup-0x1fd3fd5c>
 210:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 214:	13050000 	movwne	r0, #20480	; 0x5000
 218:	3a0b0b01 	bcc	2c2e24 <startup-0x1fd3d1dc>
 21c:	010b3b0b 	tsteq	fp, fp, lsl #22
 220:	06000013 			; <UNDEFINED> instruction: 0x06000013
 224:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 228:	0b3b0b3a 	bleq	ec2f18 <startup-0x1f13d0e8>
 22c:	0b381349 	bleq	e04f58 <startup-0x1f1fb0a8>
 230:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
 234:	03193f01 	tsteq	r9, #1, 30
 238:	3b0b3a0e 	blcc	2cea78 <startup-0x1fd31588>
 23c:	1119270b 	tstne	r9, fp, lsl #14
 240:	40061201 	andmi	r1, r6, r1, lsl #4
 244:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 248:	00001301 	andeq	r1, r0, r1, lsl #6
 24c:	03000508 	movweq	r0, #1288	; 0x508
 250:	3b0b3a08 	blcc	2cea78 <startup-0x1fd31588>
 254:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 258:	09000018 	stmdbeq	r0, {r3, r4}
 25c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 260:	0b3b0b3a 	bleq	ec2f50 <startup-0x1f13d0b0>
 264:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 268:	340a0000 	strcc	r0, [sl], #-0
 26c:	3a080300 	bcc	200e74 <startup-0x1fdff18c>
 270:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 274:	00180213 	andseq	r0, r8, r3, lsl r2
 278:	012e0b00 			; <UNDEFINED> instruction: 0x012e0b00
 27c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 280:	0b3b0b3a 	bleq	ec2f70 <startup-0x1f13d090>
 284:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 288:	00001301 	andeq	r1, r0, r1, lsl #6
 28c:	0000180c 	andeq	r1, r0, ip, lsl #16
 290:	012e0d00 			; <UNDEFINED> instruction: 0x012e0d00
 294:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 298:	0b3b0b3a 	bleq	ec2f88 <startup-0x1f13d078>
 29c:	193c1349 	ldmdbne	ip!, {r0, r3, r6, r8, r9, ip}
 2a0:	2e0e0000 	cdpcs	0, 0, cr0, cr14, cr0, {0}
 2a4:	3a0e0301 	bcc	380eb0 <startup-0x1fc7f150>
 2a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
 2ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
 2b0:	96184006 	ldrls	r4, [r8], -r6
 2b4:	13011942 	movwne	r1, #6466	; 0x1942
 2b8:	050f0000 	streq	r0, [pc, #-0]	; 2c0 <startup-0x1ffffd40>
 2bc:	3a0e0300 	bcc	380ec4 <startup-0x1fc7f13c>
 2c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 2c4:	00180213 	andseq	r0, r8, r3, lsl r2
 2c8:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
 2cc:	0b3a0e03 	bleq	e83ae0 <startup-0x1f17c520>
 2d0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 2d4:	01111349 	tsteq	r1, r9, asr #6
 2d8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2dc:	01194296 			; <UNDEFINED> instruction: 0x01194296
 2e0:	11000013 	tstne	r0, r3, lsl r0
 2e4:	0e03012e 	adfeqsp	f0, f3, #0.5
 2e8:	0b3b0b3a 	bleq	ec2fd8 <startup-0x1f13d028>
 2ec:	01111927 	tsteq	r1, r7, lsr #18
 2f0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 2f4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 2f8:	12000013 	andne	r0, r0, #19
 2fc:	0e03012e 	adfeqsp	f0, f3, #0.5
 300:	0b3b0b3a 	bleq	ec2ff0 <startup-0x1f13d010>
 304:	01111927 	tsteq	r1, r7, lsr #18
 308:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 30c:	00194297 	mulseq	r9, r7, r2
 310:	11010000 	mrsne	r0, (UNDEF: 1)
 314:	130e2501 	movwne	r2, #58625	; 0xe501
 318:	1b0e030b 	blne	380f4c <startup-0x1fc7f0b4>
 31c:	1117550e 	tstne	r7, lr, lsl #10
 320:	00171001 	andseq	r1, r7, r1
 324:	00240200 	eoreq	r0, r4, r0, lsl #4
 328:	0b3e0b0b 	bleq	f82f5c <startup-0x1f07d0a4>
 32c:	00000e03 	andeq	r0, r0, r3, lsl #28
 330:	03001603 	movweq	r1, #1539	; 0x603
 334:	3b0b3a0e 	blcc	2ceb74 <startup-0x1fd3148c>
 338:	0013490b 	andseq	r4, r3, fp, lsl #18
 33c:	00240400 	eoreq	r0, r4, r0, lsl #8
 340:	0b3e0b0b 	bleq	f82f74 <startup-0x1f07d08c>
 344:	00000803 	andeq	r0, r0, r3, lsl #16
 348:	0b011305 	bleq	44f64 <startup-0x1ffbb09c>
 34c:	3b0b3a0b 	blcc	2ceb80 <startup-0x1fd31480>
 350:	0013010b 	andseq	r0, r3, fp, lsl #2
 354:	000d0600 	andeq	r0, sp, r0, lsl #12
 358:	0b3a0e03 	bleq	e83b6c <startup-0x1f17c494>
 35c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 360:	00000b38 	andeq	r0, r0, r8, lsr fp
 364:	03011307 	movweq	r1, #4871	; 0x1307
 368:	3a0b0b0e 	bcc	2c2fa8 <startup-0x1fd3d058>
 36c:	010b3b0b 	tsteq	fp, fp, lsl #22
 370:	08000013 	stmdaeq	r0, {r0, r1, r4}
 374:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 378:	0b3b0b3a 	bleq	ec3068 <startup-0x1f13cf98>
 37c:	0b381349 	bleq	e050a8 <startup-0x1f1faf58>
 380:	01090000 	mrseq	r0, (UNDEF: 9)
 384:	01134901 	tsteq	r3, r1, lsl #18
 388:	0a000013 	beq	3dc <startup-0x1ffffc24>
 38c:	13490021 	movtne	r0, #36897	; 0x9021
 390:	00000b2f 	andeq	r0, r0, pc, lsr #22
 394:	0b000f0b 	bleq	3fc8 <startup-0x1fffc038>
 398:	0013490b 	andseq	r4, r3, fp, lsl #18
 39c:	01150c00 	tsteq	r5, r0, lsl #24
 3a0:	13011927 	movwne	r1, #6439	; 0x1927
 3a4:	050d0000 	streq	r0, [sp, #-0]
 3a8:	00134900 	andseq	r4, r3, r0, lsl #18
 3ac:	00340e00 	eorseq	r0, r4, r0, lsl #28
 3b0:	0b3a0e03 	bleq	e83bc4 <startup-0x1f17c43c>
 3b4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3b8:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
 3bc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 3c0:	03193f01 	tsteq	r9, #1, 30
 3c4:	3b0b3a0e 	blcc	2cec04 <startup-0x1fd313fc>
 3c8:	1119270b 	tstne	r9, fp, lsl #14
 3cc:	40061201 	andmi	r1, r6, r1, lsl #4
 3d0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 3d4:	00001301 	andeq	r1, r0, r1, lsl #6
 3d8:	03003410 	movweq	r3, #1040	; 0x410
 3dc:	3b0b3a08 	blcc	2cec04 <startup-0x1fd313fc>
 3e0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 3e4:	11000018 	tstne	r0, r8, lsl r0
 3e8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 3ec:	0b3b0b3a 	bleq	ec30dc <startup-0x1f13cf24>
 3f0:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 3f4:	2e120000 	cdpcs	0, 1, cr0, cr2, cr0, {0}
 3f8:	03193f00 	tsteq	r9, #0, 30
 3fc:	3b0b3a0e 	blcc	2cec3c <startup-0x1fd313c4>
 400:	1119270b 	tstne	r9, fp, lsl #14
 404:	40061201 	andmi	r1, r6, r1, lsl #4
 408:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 40c:	01000000 	mrseq	r0, (UNDEF: 0)
 410:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
 414:	0e030b13 	vmoveq.32	d3[0], r0
 418:	01110e1b 	tsteq	r1, fp, lsl lr
 41c:	17100612 			; <UNDEFINED> instruction: 0x17100612
 420:	24020000 	strcs	r0, [r2], #-0
 424:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 428:	000e030b 	andeq	r0, lr, fp, lsl #6
 42c:	012e0300 			; <UNDEFINED> instruction: 0x012e0300
 430:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 434:	0b3b0b3a 	bleq	ec3124 <startup-0x1f13cedc>
 438:	01111927 	tsteq	r1, r7, lsr #18
 43c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 440:	01194296 			; <UNDEFINED> instruction: 0x01194296
 444:	04000013 	streq	r0, [r0], #-19	; 0xffffffed
 448:	08030005 	stmdaeq	r3, {r0, r2}
 44c:	0b3b0b3a 	bleq	ec313c <startup-0x1f13cec4>
 450:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 454:	2e050000 	cdpcs	0, 0, cr0, cr5, cr0, {0}
 458:	03193f00 	tsteq	r9, #0, 30
 45c:	3b0b3a0e 	blcc	2cec9c <startup-0x1fd31364>
 460:	1119270b 	tstne	r9, fp, lsl #14
 464:	40061201 	andmi	r1, r6, r1, lsl #4
 468:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 46c:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
 470:	03193f00 	tsteq	r9, #0, 30
 474:	3b0b3a0e 	blcc	2cecb4 <startup-0x1fd3134c>
 478:	1119270b 	tstne	r9, fp, lsl #14
 47c:	40061201 	andmi	r1, r6, r1, lsl #4
 480:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 484:	Address 0x00000484 is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000001c8 	andeq	r0, r0, r8, asr #3
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	02d10002 	sbcseq	r0, r1, #2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	200001d8 	ldrdcs	r0, [r0], -r8
  34:	00000110 	andeq	r0, r0, r0, lsl r1
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	04450002 	strbeq	r0, [r5], #-2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	200002e8 	andcs	r0, r0, r8, ror #5
  54:	00000524 	andeq	r0, r0, r4, lsr #10
	...
  60:	00000024 	andeq	r0, r0, r4, lsr #32
  64:	07ea0002 	strbeq	r0, [sl, r2]!
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	2000080c 	andcs	r0, r0, ip, lsl #16
  74:	000000d4 	ldrdeq	r0, [r0], -r4
  78:	20000000 	andcs	r0, r0, r0
  7c:	0000000c 	andeq	r0, r0, ip
	...
  88:	0000001c 	andeq	r0, r0, ip, lsl r0
  8c:	0acd0002 	beq	ff34009c <ball+0xdf33f6e4>
  90:	00040000 	andeq	r0, r4, r0
  94:	00000000 	andeq	r0, r0, r0
  98:	200008e0 	andcs	r0, r0, r0, ror #17
  9c:	000000a4 	andeq	r0, r0, r4, lsr #1
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	0000015b 	andeq	r0, r0, fp, asr r1
   4:	00f40002 	rscseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	61686f6a 	cmnvs	r8, sl, ror #30
  28:	6f672f6e 	svcvs	0x00672f6e
  2c:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
  30:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
  34:	502f6576 	eorpl	r6, pc, r6, ror r5	; <UNPREDICTABLE>
  38:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
  3c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
  40:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
  44:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
  48:	6d724f2f 	ldclvs	15, cr4, [r2, #-188]!	; 0xffffff44
  4c:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
  50:	61657363 	cmnvs	r5, r3, ror #6
  54:	635c7070 	cmpvs	ip, #112	; 0x70
  58:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
  5c:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
  60:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; fffffe98 <ball+0xdffff4e0>
  64:	63675c73 	cmnvs	r7, #29440	; 0x7300
  68:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
  6c:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
  70:	6f6e2d6d 	svcvs	0x006e2d6d
  74:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
  78:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
  7c:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
  80:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
  84:	6863616d 	stmdavs	r3!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  88:	00656e69 	rsbeq	r6, r5, r9, ror #28
  8c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
  90:	70616573 	rsbvc	r6, r1, r3, ror r5
  94:	6f635c70 	svcvs	0x00635c70
  98:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
  9c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
  a0:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
  a4:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
  a8:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
  ac:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
  b0:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
  b4:	61652d65 	cmnvs	r5, r5, ror #26
  b8:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
  bc:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
  c0:	735c6564 	cmpvc	ip, #100, 10	; 0x19000000
  c4:	00007379 	andeq	r7, r0, r9, ror r3
  c8:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
  cc:	0100632e 	tsteq	r0, lr, lsr #6
  d0:	645f0000 	ldrbvs	r0, [pc], #-0	; d8 <startup-0x1fffff28>
  d4:	75616665 	strbvc	r6, [r1, #-1637]!	; 0xfffff99b
  d8:	745f746c 	ldrbvc	r7, [pc], #-1132	; e0 <startup-0x1fffff20>
  dc:	73657079 	cmnvc	r5, #121	; 0x79
  e0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
  e4:	735f0000 	cmpvc	pc, #0
  e8:	6e696474 	mcrvs	4, 3, r6, cr9, cr4, {3}
  ec:	00682e74 	rsbeq	r2, r8, r4, ror lr
  f0:	62000003 	andvs	r0, r0, #3
  f4:	2e6c6c61 	cdpcs	12, 6, cr6, cr12, cr1, {3}
  f8:	00010068 	andeq	r0, r1, r8, rrx
  fc:	05000000 	streq	r0, [r0, #-0]
 100:	00001002 	andeq	r1, r0, r2
 104:	3d671420 	cfstrdcc	mvd1, [r7, #-128]!	; 0xffffff80
 108:	004b4c3d 	subeq	r4, fp, sp, lsr ip
 10c:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 110:	03040200 	movweq	r0, #16896	; 0x4200
 114:	02004908 	andeq	r4, r0, #8, 18	; 0x20000
 118:	3c060104 	stfccs	f0, [r6], {4}
 11c:	4b4c6906 	blmi	131a53c <startup-0x1ece5ac4>
 120:	03040200 	movweq	r0, #16896	; 0x4200
 124:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 128:	00490803 	subeq	r0, r9, r3, lsl #16
 12c:	06010402 	streq	r0, [r1], -r2, lsl #8
 130:	4c69063c 	stclmi	6, cr0, [r9], #-240	; 0xffffff10
 134:	02004c4b 	andeq	r4, r0, #19200	; 0x4b00
 138:	003d0304 	eorseq	r0, sp, r4, lsl #6
 13c:	08030402 	stmdaeq	r3, {r1, sl}
 140:	04020059 	streq	r0, [r2], #-89	; 0xffffffa7
 144:	00560803 	subseq	r0, r6, r3, lsl #16
 148:	06010402 	streq	r0, [r1], -r2, lsl #8
 14c:	756a063c 	strbvc	r0, [sl, #-1596]!	; 0xfffff9c4
 150:	83594b76 	cmphi	r9, #120832	; 0x1d800
 154:	83594b59 	cmphi	r9, #91136	; 0x16400
 158:	04024b5a 	streq	r4, [r2], #-2906	; 0xfffff4a6
 15c:	b6010100 	strlt	r0, [r1], -r0, lsl #2
 160:	02000000 	andeq	r0, r0, #0
 164:	00005e00 	andeq	r5, r0, r0, lsl #28
 168:	fb010200 	blx	40972 <startup-0x1ffbf68e>
 16c:	01000d0e 	tsteq	r0, lr, lsl #26
 170:	00010101 	andeq	r0, r1, r1, lsl #2
 174:	00010000 	andeq	r0, r1, r0
 178:	3a430100 	bcc	10c0580 <startup-0x1ef3fa80>
 17c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 180:	6a2f7372 	bvs	bdcf50 <startup-0x1f4230b0>
 184:	6e61686f 	cdpvs	8, 6, cr6, cr1, cr15, {3}
 188:	6f6f672f 	svcvs	0x006f672f
 18c:	5f656c67 	svcpl	0x00656c67
 190:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 194:	72502f65 	subsvc	r2, r0, #404	; 0x194
 198:	6172676f 	cmnvs	r2, pc, ror #14
 19c:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 1a0:	2f676e69 	svccs	0x00676e69
 1a4:	2f746947 	svccs	0x00746947
 1a8:	006d724f 	rsbeq	r7, sp, pc, asr #4
 1ac:	79656b00 	stmdbvc	r5!, {r8, r9, fp, sp, lr}^
 1b0:	2e646170 	mcrcs	1, 3, r6, cr4, cr0, {3}
 1b4:	00010063 	andeq	r0, r1, r3, rrx
 1b8:	66656400 	strbtvs	r6, [r5], -r0, lsl #8
 1bc:	73656e69 	cmnvc	r5, #1680	; 0x690
 1c0:	0100682e 	tsteq	r0, lr, lsr #16
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	01d80205 	bicseq	r0, r8, r5, lsl #4
 1cc:	4b152000 	blmi	5481d4 <startup-0x1fab7e2c>
 1d0:	4b4b4b91 	blmi	12d301c <startup-0x1ed2cfe4>
 1d4:	3e924c4b 	cdpcc	12, 9, cr4, cr2, cr11, {2}
 1d8:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 1dc:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 1e0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1e4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 1e8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1ec:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 1f0:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1f4:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 1f8:	3d68212f 	stfcce	f2, [r8, #-188]!	; 0xffffff44
 1fc:	754b3d68 	strbvc	r3, [fp, #-3432]	; 0xfffff298
 200:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 204:	02008c02 	andeq	r8, r0, #512	; 0x200
 208:	3c060104 	stfccs	f0, [r6], {4}
 20c:	003d4306 	eorseq	r4, sp, r6, lsl #6
 210:	21010402 	tstcs	r1, r2, lsl #8
 214:	01000702 	tsteq	r0, r2, lsl #14
 218:	0001d201 	andeq	sp, r1, r1, lsl #4
 21c:	fb000200 	blx	a26 <startup-0x1ffff5da>
 220:	02000000 	andeq	r0, r0, #0
 224:	0d0efb01 	vstreq	d15, [lr, #-4]
 228:	01010100 	mrseq	r0, (UNDEF: 17)
 22c:	00000001 	andeq	r0, r0, r1
 230:	01000001 	tsteq	r0, r1
 234:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff7f9 <ball+0xdfffee41>
 238:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 23c:	686f6a2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 240:	672f6e61 	strvs	r6, [pc, -r1, ror #28]!
 244:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
 248:	72645f65 	rsbvc	r5, r4, #404	; 0x194
 24c:	2f657669 	svccs	0x00657669
 250:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 254:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 258:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 25c:	69472f67 	stmdbvs	r7, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 260:	724f2f74 	subvc	r2, pc, #116, 30	; 0x1d0
 264:	3a63006d 	bcc	18c0420 <startup-0x1e73fbe0>
 268:	6573635c 	ldrbvs	r6, [r3, #-860]!	; 0xfffffca4
 26c:	5c707061 	ldclpl	0, cr7, [r0], #-388	; 0xfffffe7c
 270:	65646f63 	strbvs	r6, [r4, #-3939]!	; 0xfffff09d
 274:	6574696c 	ldrbvs	r6, [r4, #-2412]!	; 0xfffff694
 278:	6f6f745c 	svcvs	0x006f745c
 27c:	675c736c 	ldrbvs	r7, [ip, -ip, ror #6]
 280:	612d6363 			; <UNDEFINED> instruction: 0x612d6363
 284:	615c6d72 	cmpvs	ip, r2, ror sp
 288:	6e2d6d72 	mcrvs	13, 1, r6, cr13, cr2, {3}
 28c:	2d656e6f 	stclcs	14, cr6, [r5, #-444]!	; 0xfffffe44
 290:	69626165 	stmdbvs	r2!, {r0, r2, r5, r6, r8, sp, lr}^
 294:	636e695c 	cmnvs	lr, #92, 18	; 0x170000
 298:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 29c:	63616d5c 	cmnvs	r1, #92, 26	; 0x1700
 2a0:	656e6968 	strbvs	r6, [lr, #-2408]!	; 0xfffff698
 2a4:	5c3a6300 	ldcpl	3, cr6, [sl], #-0
 2a8:	61657363 	cmnvs	r5, r3, ror #6
 2ac:	635c7070 	cmpvs	ip, #112	; 0x70
 2b0:	6c65646f 	cfstrdvs	mvd6, [r5], #-444	; 0xfffffe44
 2b4:	5c657469 	cfstrdpl	mvd7, [r5], #-420	; 0xfffffe5c
 2b8:	6c6f6f74 	stclvs	15, cr6, [pc], #-464	; f0 <startup-0x1fffff10>
 2bc:	63675c73 	cmnvs	r7, #29440	; 0x7300
 2c0:	72612d63 	rsbvc	r2, r1, #6336	; 0x18c0
 2c4:	72615c6d 	rsbvc	r5, r1, #27904	; 0x6d00
 2c8:	6f6e2d6d 	svcvs	0x006e2d6d
 2cc:	652d656e 	strvs	r6, [sp, #-1390]!	; 0xfffffa92
 2d0:	5c696261 	sfmpl	f6, 2, [r9], #-388	; 0xfffffe7c
 2d4:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 2d8:	5c656475 	cfstrdpl	mvd6, [r5], #-468	; 0xfffffe2c
 2dc:	00737973 	rsbseq	r7, r3, r3, ror r9
 2e0:	61726700 	cmnvs	r2, r0, lsl #14
 2e4:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 2e8:	00632e73 	rsbeq	r2, r3, r3, ror lr
 2ec:	5f000001 	svcpl	0x00000001
 2f0:	61666564 	cmnvs	r6, r4, ror #10
 2f4:	5f746c75 	svcpl	0x00746c75
 2f8:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 2fc:	00682e73 	rsbeq	r2, r8, r3, ror lr
 300:	5f000002 	svcpl	0x00000002
 304:	69647473 	stmdbvs	r4!, {r0, r1, r4, r5, r6, sl, ip, sp, lr}^
 308:	682e746e 	stmdavs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
 30c:	00000300 	andeq	r0, r0, r0, lsl #6
 310:	69666564 	stmdbvs	r6!, {r2, r5, r6, r8, sl, sp, lr}^
 314:	2e73656e 	cdpcs	5, 7, cr6, cr3, cr14, {3}
 318:	00010068 	andeq	r0, r1, r8, rrx
 31c:	05000000 	streq	r0, [r0, #-0]
 320:	0002e802 	andeq	lr, r2, r2, lsl #16
 324:	59681620 	stmdbpl	r8!, {r5, r9, sl, ip}^
 328:	684bc967 	stmdavs	fp, {r0, r1, r2, r5, r6, r8, fp, lr, pc}^
 32c:	bb675968 	bllt	19d68d4 <startup-0x1e62972c>
 330:	0367764b 	cmneq	r7, #78643200	; 0x4b00000
 334:	70037410 	andvc	r7, r3, r0, lsl r4
 338:	4a100320 	bmi	400fc0 <startup-0x1fbff040>
 33c:	3d207203 	sfmcc	f7, 4, [r0, #-12]!
 340:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
 344:	3d223d3d 	stccc	13, cr3, [r2, #-244]!	; 0xffffff0c
 348:	3d3e4c22 	ldccc	12, cr4, [lr, #-136]!	; 0xffffff78
 34c:	313d3d3d 	teqcc	sp, sp, lsr sp
 350:	3d752f3d 	ldclcc	15, cr2, [r5, #-244]!	; 0xffffff0c
 354:	2225452f 	eorcs	r4, r5, #197132288	; 0xbc00000
 358:	3d68a03d 	stclcc	0, cr10, [r8, #-244]!	; 0xffffff0c
 35c:	2f593d3d 	svccs	0x00593d3d
 360:	3d592f3d 	ldclcc	15, cr2, [r9, #-244]	; 0xffffff0c
 364:	303d593e 	eorscc	r5, sp, lr, lsr r9
 368:	3d303d59 	ldccc	13, cr3, [r0, #-356]!	; 0xfffffe9c
 36c:	675967ae 	ldrbvs	r6, [r9, -lr, lsr #15]
 370:	594b914c 	stmdbpl	fp, {r2, r3, r6, r8, ip, pc}^
 374:	3e2f3d2f 	cdpcc	13, 2, cr3, cr15, cr15, {1}
 378:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
 37c:	3d3d303d 	ldccc	0, cr3, [sp, #-244]!	; 0xffffff0c
 380:	3d91683d 	ldccc	8, cr6, [r1, #244]	; 0xf4
 384:	4c833d59 	stcmi	13, cr3, [r3], {89}	; 0x59
 388:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 38c:	3f4c833d 	svccc	0x004c833d
 390:	004b9f4b 	subeq	r9, fp, fp, asr #30
 394:	4b030402 	blmi	c13a4 <startup-0x1ff3ec5c>
 398:	03040200 	movweq	r0, #16896	; 0x4200
 39c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 3a0:	00580601 	subseq	r0, r8, r1, lsl #12
 3a4:	06020402 	streq	r0, [r2], -r2, lsl #8
 3a8:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 3ac:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 3b0:	3d2f4c51 	stccc	12, cr4, [pc, #-324]!	; 274 <startup-0x1ffffd8c>
 3b4:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 3b8:	4b4b4b3d 	blmi	12d30b4 <startup-0x1ed2cf4c>
 3bc:	3e3d4b4b 	vsubcc.f64	d4, d13, d11
 3c0:	0402006a 	streq	r0, [r2], #-106	; 0xffffff96
 3c4:	004a0601 	subeq	r0, sl, r1, lsl #12
 3c8:	4a020402 	bmi	813d8 <startup-0x1ff7ec28>
 3cc:	03040200 	movweq	r0, #16896	; 0x4200
 3d0:	754c064a 	strbvc	r0, [ip, #-1610]	; 0xfffff9b6
 3d4:	683d1408 	ldmdavs	sp!, {r3, sl, ip}
 3d8:	4b4c4b3d 	blmi	13130d4 <startup-0x1ececf2c>
 3dc:	91c9c93f 	bicls	ip, r9, pc, lsr r9
 3e0:	92a03dbc 	adcls	r3, r0, #188, 26	; 0x2f00
 3e4:	03ac6603 			; <UNDEFINED> instruction: 0x03ac6603
 3e8:	0602201b 			; <UNDEFINED> instruction: 0x0602201b
 3ec:	3e010100 	adfccs	f0, f1, f0
 3f0:	02000001 	andeq	r0, r0, #1
 3f4:	00010400 	andeq	r0, r1, r0, lsl #8
 3f8:	fb010200 	blx	40c02 <startup-0x1ffbf3fe>
 3fc:	01000d0e 	tsteq	r0, lr, lsl #26
 400:	00010101 	andeq	r0, r1, r1, lsl #2
 404:	00010000 	andeq	r0, r1, r0
 408:	3a430100 	bcc	10c0810 <startup-0x1ef3f7f0>
 40c:	6573552f 	ldrbvs	r5, [r3, #-1327]!	; 0xfffffad1
 410:	6a2f7372 	bvs	bdd1e0 <startup-0x1f422e20>
 414:	6e61686f 	cdpvs	8, 6, cr6, cr1, cr15, {3}
 418:	6f6f672f 	svcvs	0x006f672f
 41c:	5f656c67 	svcpl	0x00656c67
 420:	76697264 	strbtvc	r7, [r9], -r4, ror #4
 424:	72502f65 	subsvc	r2, r0, #404	; 0x194
 428:	6172676f 	cmnvs	r2, pc, ror #14
 42c:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
 430:	2f676e69 	svccs	0x00676e69
 434:	2f746947 	svccs	0x00746947
 438:	006d724f 	rsbeq	r7, sp, pc, asr #4
 43c:	635c3a63 	cmpvs	ip, #405504	; 0x63000
 440:	70616573 	rsbvc	r6, r1, r3, ror r5
 444:	6f635c70 	svcvs	0x00635c70
 448:	696c6564 	stmdbvs	ip!, {r2, r5, r6, r8, sl, sp, lr}^
 44c:	745c6574 	ldrbvc	r6, [ip], #-1396	; 0xfffffa8c
 450:	736c6f6f 	cmnvc	ip, #444	; 0x1bc
 454:	6363675c 	cmnvs	r3, #92, 14	; 0x1700000
 458:	6d72612d 	ldfvse	f6, [r2, #-180]!	; 0xffffff4c
 45c:	6d72615c 	ldfvse	f6, [r2, #-368]!	; 0xfffffe90
 460:	6e6f6e2d 	cdpvs	14, 6, cr6, cr15, cr13, {1}
 464:	61652d65 	cmnvs	r5, r5, ror #26
 468:	695c6962 	ldmdbvs	ip, {r1, r5, r6, r8, fp, sp, lr}^
 46c:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 470:	6d5c6564 	cfldr64vs	mvdx6, [ip, #-400]	; 0xfffffe70
 474:	69686361 	stmdbvs	r8!, {r0, r5, r6, r8, r9, sp, lr}^
 478:	6300656e 	movwvs	r6, #1390	; 0x56e
 47c:	73635c3a 	cmnvc	r3, #14848	; 0x3a00
 480:	70706165 	rsbsvc	r6, r0, r5, ror #2
 484:	646f635c 	strbtvs	r6, [pc], #-860	; 48c <startup-0x1ffffb74>
 488:	74696c65 	strbtvc	r6, [r9], #-3173	; 0xfffff39b
 48c:	6f745c65 	svcvs	0x00745c65
 490:	5c736c6f 	ldclpl	12, cr6, [r3], #-444	; 0xfffffe44
 494:	2d636367 	stclcs	3, cr6, [r3, #-412]!	; 0xfffffe64
 498:	5c6d7261 	sfmpl	f7, 2, [sp], #-388	; 0xfffffe7c
 49c:	2d6d7261 	sfmcs	f7, 2, [sp, #-388]!	; 0xfffffe7c
 4a0:	656e6f6e 	strbvs	r6, [lr, #-3950]!	; 0xfffff092
 4a4:	6261652d 	rsbvs	r6, r1, #188743680	; 0xb400000
 4a8:	6e695c69 	cdpvs	12, 6, cr5, cr9, cr9, {3}
 4ac:	64756c63 	ldrbtvs	r6, [r5], #-3171	; 0xfffff39d
 4b0:	79735c65 	ldmdbvc	r3!, {r0, r2, r5, r6, sl, fp, ip, lr}^
 4b4:	73000073 	movwvc	r0, #115	; 0x73
 4b8:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
 4bc:	632e7075 			; <UNDEFINED> instruction: 0x632e7075
 4c0:	00000100 	andeq	r0, r0, r0, lsl #2
 4c4:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
 4c8:	746c7561 	strbtvc	r7, [ip], #-1377	; 0xfffffa9f
 4cc:	7079745f 	rsbsvc	r7, r9, pc, asr r4
 4d0:	682e7365 	stmdavs	lr!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 4d4:	00000200 	andeq	r0, r0, r0, lsl #4
 4d8:	6474735f 	ldrbtvs	r7, [r4], #-863	; 0xfffffca1
 4dc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
 4e0:	00030068 	andeq	r0, r3, r8, rrx
 4e4:	66656400 	strbtvs	r6, [r5], -r0, lsl #8
 4e8:	73656e69 	cmnvc	r5, #1680	; 0x690
 4ec:	0100682e 	tsteq	r0, lr, lsr #16
 4f0:	61620000 	cmnvs	r2, r0
 4f4:	682e6c6c 	stmdavs	lr!, {r2, r3, r5, r6, sl, fp, sp, lr}
 4f8:	00000100 	andeq	r0, r0, r0, lsl #2
 4fc:	02050000 	andeq	r0, r5, #0
 500:	20000000 	andcs	r0, r0, r0
 504:	025e1315 	subseq	r1, lr, #1409286144	; 0x54000000
 508:	01010003 	tsteq	r1, r3
 50c:	0c020500 	cfstr32eq	mvfx0, [r2], {-0}
 510:	03200008 			; <UNDEFINED> instruction: 0x03200008
 514:	3f300113 	svccc	0x00300113
 518:	0367833d 	cmneq	r7, #-201326592	; 0xf4000000
 51c:	2f3dd618 	svccs	0x003dd618
 520:	682f322f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, ip, sp}	; <UNPREDICTABLE>
 524:	8383d75b 	orrhi	sp, r3, #23855104	; 0x16c0000
 528:	74790375 	ldrbtvc	r0, [r9], #-885	; 0xfffffc8b
 52c:	01000402 	tsteq	r0, r2, lsl #8
 530:	00008301 	andeq	r8, r0, r1, lsl #6
 534:	51000200 	mrspl	r0, R8_usr
 538:	02000000 	andeq	r0, r0, #0
 53c:	0d0efb01 	vstreq	d15, [lr, #-4]
 540:	01010100 	mrseq	r0, (UNDEF: 17)
 544:	00000001 	andeq	r0, r0, r1
 548:	01000001 	tsteq	r0, r1
 54c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffb11 <ball+0xdffff159>
 550:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 554:	686f6a2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 558:	672f6e61 	strvs	r6, [pc, -r1, ror #28]!
 55c:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
 560:	72645f65 	rsbvc	r5, r4, #404	; 0x194
 564:	2f657669 	svccs	0x00657669
 568:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 56c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 570:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 574:	69472f67 	stmdbvs	r7, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 578:	724f2f74 	subvc	r2, pc, #116, 30	; 0x1d0
 57c:	6400006d 	strvs	r0, [r0], #-109	; 0xffffff93
 580:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 584:	00632e73 	rsbeq	r2, r3, r3, ror lr
 588:	00000001 	andeq	r0, r0, r1
 58c:	e0020500 	and	r0, r2, r0, lsl #10
 590:	15200008 	strne	r0, [r0, #-8]!
 594:	3d3d3d2f 	ldccc	13, cr3, [sp, #-188]!	; 0xffffff44
 598:	0402003d 	streq	r0, [r2], #-61	; 0xffffffc3
 59c:	06200601 	strteq	r0, [r0], -r1, lsl #12
 5a0:	2fa03d67 	svccs	0x00a03d67
 5a4:	4b3e2f2f 	blmi	f8c268 <startup-0x1f073d98>
 5a8:	2f2f2f21 	svccs	0x002f2f21
 5ac:	4c4c5e2a 	mcrrmi	14, 2, r5, ip, cr10
 5b0:	025e3b21 	subseq	r3, lr, #33792	; 0x8400
 5b4:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	5f5f0059 	svcpl	0x005f0059
   c:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
  10:	00745f38 	rsbseq	r5, r4, r8, lsr pc
  14:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
  18:	766f6d00 	strbtvc	r6, [pc], -r0, lsl #26
  1c:	3a430065 	bcc	10c01b8 <startup-0x1ef3fe48>
  20:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0xfffffaa4
  24:	6a5c7372 	bvs	171cdf4 <startup-0x1e8e320c>
  28:	6e61686f 	cdpvs	8, 6, cr6, cr1, cr15, {3}
  2c:	6f6f675c 	svcvs	0x006f675c
  30:	5f656c67 	svcpl	0x00656c67
  34:	76697264 	strbtvc	r7, [r9], -r4, ror #4
  38:	72505c65 	subsvc	r5, r0, #25856	; 0x6500
  3c:	6172676f 	cmnvs	r2, pc, ror #14
  40:	72656d6d 	rsbvc	r6, r5, #6976	; 0x1b40
  44:	5c676e69 	stclpl	14, cr6, [r7], #-420	; 0xfffffe5c
  48:	5c746947 			; <UNDEFINED> instruction: 0x5c746947
  4c:	006d724f 	rsbeq	r7, sp, pc, asr #4
  50:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  54:	72696400 	rsbvc	r6, r9, #0, 8
  58:	69700079 	ldmdbvs	r0!, {r0, r3, r4, r5, r6}^
  5c:	006c6578 	rsbeq	r6, ip, r8, ror r5
  60:	20554e47 	subscs	r4, r5, r7, asr #28
  64:	20393943 	eorscs	r3, r9, r3, asr #18
  68:	2e322e37 	mrccs	14, 1, r2, cr2, cr7, {1}
  6c:	30322031 	eorscc	r2, r2, r1, lsr r0
  70:	39303731 	ldmdbcc	r0!, {r0, r4, r5, r8, r9, sl, ip, sp}
  74:	28203430 	stmdacs	r0!, {r4, r5, sl, ip, sp}
  78:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  7c:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  80:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  84:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  88:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  8c:	372d6465 	strcc	r6, [sp, -r5, ror #8]!
  90:	6172622d 	cmnvs	r2, sp, lsr #4
  94:	2068636e 	rsbcs	r6, r8, lr, ror #6
  98:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  9c:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  a0:	35353220 	ldrcc	r3, [r5, #-544]!	; 0xfffffde0
  a4:	5d343032 	ldcpl	0, cr3, [r4, #-200]!	; 0xffffff38
  a8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  ac:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  b0:	616d2d20 	cmnvs	sp, r0, lsr #26
  b4:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  b8:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  bc:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  c0:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  c4:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  c8:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  cc:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  d0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  d4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  d8:	616d2d20 	cmnvs	sp, r0, lsr #26
  dc:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  e0:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e4:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e8:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  ec:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  f0:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  f4:	00393963 	eorseq	r3, r9, r3, ror #18
  f8:	696f5074 	stmdbvs	pc!, {r2, r4, r5, r6, ip, lr}^	; <UNPREDICTABLE>
  fc:	5000746e 	andpl	r7, r0, lr, ror #8
 100:	544e494f 	strbpl	r4, [lr], #-2383	; 0xfffff6b1
 104:	736e7500 	cmnvc	lr, #0, 10
 108:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 10c:	68632064 	stmdavs	r3!, {r2, r5, r6, sp}^
 110:	73007261 	movwvc	r7, #609	; 0x261
 114:	735f7465 	cmpvc	pc, #1694498816	; 0x65000000
 118:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 11c:	736f7000 	cmnvc	pc, #0
 120:	6f700078 	svcvs	0x00700078
 124:	73007973 	movwvc	r7, #2419	; 0x973
 128:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xfffff098
 12c:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
 130:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0xfffff897
 134:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
 138:	47740074 			; <UNDEFINED> instruction: 0x47740074
 13c:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 140:	00797274 	rsbseq	r7, r9, r4, ror r2
 144:	676e6f6c 	strbvs	r6, [lr, -ip, ror #30]!
 148:	6e6f6c20 	cdpvs	12, 6, cr6, cr15, cr0, {1}
 14c:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
 150:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 154:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 158:	4300746e 	movwmi	r7, #1134	; 0x46e
 15c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 160:	2f737265 	svccs	0x00737265
 164:	61686f6a 	cmnvs	r8, sl, ror #30
 168:	6f672f6e 	svcvs	0x00672f6e
 16c:	656c676f 	strbvs	r6, [ip, #-1903]!	; 0xfffff891
 170:	6972645f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, sl, sp, lr}^
 174:	502f6576 	eorpl	r6, pc, r6, ror r5	; <UNPREDICTABLE>
 178:	72676f72 	rsbvc	r6, r7, #456	; 0x1c8
 17c:	656d6d61 	strbvs	r6, [sp, #-3425]!	; 0xfffff29f
 180:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
 184:	7469472f 	strbtvc	r4, [r9], #-1839	; 0xfffff8d1
 188:	6d724f2f 	ldclvs	15, cr4, [r2, #-188]!	; 0xffffff44
 18c:	6c61622f 	sfmvs	f6, 2, [r1], #-188	; 0xffffff44
 190:	00632e6c 	rsbeq	r2, r3, ip, ror #28
 194:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 198:	69730078 	ldmdbvs	r3!, {r3, r4, r5, r6}^
 19c:	0079657a 	rsbseq	r6, r9, sl, ror r5
 1a0:	706d756e 	rsbvc	r7, sp, lr, ror #10
 1a4:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
 1a8:	6f6c0073 	svcvs	0x006c0073
 1ac:	6c20676e 	stcvs	7, cr6, [r0], #-440	; 0xfffffe48
 1b0:	20676e6f 	rsbcs	r6, r7, pc, ror #28
 1b4:	00746e69 	rsbseq	r6, r4, r9, ror #28
 1b8:	726f6873 	rsbvc	r6, pc, #7536640	; 0x730000
 1bc:	6e692074 	mcrvs	0, 3, r2, cr9, cr4, {3}
 1c0:	6c630074 	stclvs	0, cr0, [r3], #-464	; 0xfffffe30
 1c4:	5f726165 	svcpl	0x00726165
 1c8:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 1cc:	74007463 	strvc	r7, [r0], #-1123	; 0xfffffb9d
 1d0:	006a624f 	rsbeq	r6, sl, pc, asr #4
 1d4:	77617264 	strbvc	r7, [r1, -r4, ror #4]!
 1d8:	6a626f5f 	bvs	189bf5c <startup-0x1e7640a4>
 1dc:	00746365 	rsbseq	r6, r4, r5, ror #6
 1e0:	65766f6d 	ldrbvs	r6, [r6, #-3949]!	; 0xfffff093
 1e4:	6a626f5f 	bvs	189bf68 <startup-0x1e764098>
 1e8:	00746365 	rsbseq	r6, r4, r5, ror #6
 1ec:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 1f0:	73007864 	movwvc	r7, #2148	; 0x864
 1f4:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 1f8:	4f500079 	svcmi	0x00500079
 1fc:	43454a42 	movtmi	r4, #23106	; 0x5a42
 200:	65730054 	ldrbvs	r0, [r3, #-84]!	; 0xffffffac
 204:	626f5f74 	rsbvs	r5, pc, #116, 30	; 0x1d0
 208:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 20c:	6570735f 	ldrbvs	r7, [r0, #-863]!	; 0xfffffca1
 210:	70006465 	andvc	r6, r0, r5, ror #8
 214:	72647075 	rsbvc	r7, r4, #117	; 0x75
 218:	646f6d00 	strbtvs	r6, [pc], #-3328	; 220 <startup-0x1ffffde0>
 21c:	6f007265 	svcvs	0x00007265
 220:	73655274 	cmnvc	r5, #116, 4	; 0x40000007
 224:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 228:	656b0064 	strbvs	r0, [fp, #-100]!	; 0xffffff9c
 22c:	6f006279 	svcvs	0x00006279
 230:	69487264 	stmdbvs	r8, {r2, r5, r6, r9, ip, sp, lr}^
 234:	6f006867 	svcvs	0x00006867
 238:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0xfffff68c
 23c:	646f0072 	strbtvs	r0, [pc], #-114	; 244 <startup-0x1ffffdbc>
 240:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 244:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 248:	646f0064 	strbtvs	r0, [pc], #-100	; 250 <startup-0x1ffffdb0>
 24c:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 250:	70736f00 	rsbsvc	r6, r3, r0, lsl #30
 254:	72646565 	rsbvc	r6, r4, #423624704	; 0x19400000
 258:	2f3a4300 	svccs	0x003a4300
 25c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 260:	6f6a2f73 	svcvs	0x006a2f73
 264:	2f6e6168 	svccs	0x006e6168
 268:	676f6f67 	strbvs	r6, [pc, -r7, ror #30]!
 26c:	645f656c 	ldrbvs	r6, [pc], #-1388	; 274 <startup-0x1ffffd8c>
 270:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 274:	6f72502f 	svcvs	0x0072502f
 278:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 27c:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 280:	472f676e 	strmi	r6, [pc, -lr, ror #14]!
 284:	4f2f7469 	svcmi	0x002f7469
 288:	6b2f6d72 	blvs	bdb858 <startup-0x1f4247a8>
 28c:	61707965 	cmnvs	r0, r5, ror #18
 290:	00632e64 	rsbeq	r2, r3, r4, ror #28
 294:	4764626b 	strbmi	r6, [r4, -fp, ror #4]!
 298:	6f437465 	svcvs	0x00437465
 29c:	6469006c 	strbtvs	r0, [r9], #-108	; 0xffffff94
 2a0:	73655272 	cmnvc	r5, #536870919	; 0x20000007
 2a4:	65767265 	ldrbvs	r7, [r6, #-613]!	; 0xfffffd9b
 2a8:	64690064 	strbtvs	r0, [r9], #-100	; 0xffffff9c
 2ac:	776f4c72 			; <UNDEFINED> instruction: 0x776f4c72
 2b0:	64626b00 	strbtvs	r6, [r2], #-2816	; 0xfffff500
 2b4:	69746341 	ldmdbvs	r4!, {r0, r6, r8, r9, sp, lr}^
 2b8:	65746176 	ldrbvs	r6, [r4, #-374]!	; 0xfffffe8a
 2bc:	49504700 	ldmdbmi	r0, {r8, r9, sl, lr}^
 2c0:	6469004f 	strbtvs	r0, [r9], #-79	; 0xffffffb1
 2c4:	67694872 			; <UNDEFINED> instruction: 0x67694872
 2c8:	6e690068 	cdpvs	0, 6, cr0, cr9, cr8, {3}
 2cc:	00786564 	rsbseq	r6, r8, r4, ror #10
 2d0:	616c6564 	cmnvs	ip, r4, ror #10
 2d4:	696d5f79 	stmdbvs	sp!, {r0, r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
 2d8:	006f7263 	rsbeq	r7, pc, r3, ror #4
 2dc:	70617267 	rsbvc	r7, r1, r7, ror #4
 2e0:	5f636968 	svcpl	0x00636968
 2e4:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 2e8:	6f635f65 	svcvs	0x00635f65
 2ec:	6e616d6d 	cdpvs	13, 6, cr6, cr1, cr13, {3}
 2f0:	61760064 	cmnvs	r6, r4, rrx
 2f4:	0065756c 	rsbeq	r7, r5, ip, ror #10
 2f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 2fc:	5f636968 	svcpl	0x00636968
 300:	61656c63 	cmnvs	r5, r3, ror #24
 304:	63735f72 	cmnvs	r3, #456	; 0x1c8
 308:	6e656572 	mcrvs	5, 3, r6, cr5, cr2, {3}
 30c:	61726700 	cmnvs	r2, r0, lsl #14
 310:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 314:	6165725f 	cmnvs	r5, pc, asr r2
 318:	72670064 	rsbvc	r0, r7, #100	; 0x64
 31c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 320:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 324:	645f6461 	ldrbvs	r6, [pc], #-1121	; 32c <startup-0x1ffffcd4>
 328:	00617461 	rsbeq	r7, r1, r1, ror #8
 32c:	70617267 	rsbvc	r7, r1, r7, ror #4
 330:	5f636968 	svcpl	0x00636968
 334:	74697277 	strbtvc	r7, [r9], #-631	; 0xfffffd89
 338:	61645f65 	cmnvs	r4, r5, ror #30
 33c:	64006174 	strvs	r6, [r0], #-372	; 0xfffffe8c
 340:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
 344:	6c696d5f 	stclvs	13, cr6, [r9], #-380	; 0xfffffe84
 348:	6700696c 	strvs	r6, [r0, -ip, ror #18]
 34c:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 350:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 354:	5f6c7274 	svcpl	0x006c7274
 358:	5f746962 	svcpl	0x00746962
 35c:	61656c63 	cmnvs	r5, r3, ror #24
 360:	72670072 	rsbvc	r0, r7, #114	; 0x72
 364:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 368:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 36c:	00657469 	rsbeq	r7, r5, r9, ror #8
 370:	616c6564 	cmnvs	ip, r4, ror #10
 374:	30355f79 	eorscc	r5, r5, r9, ror pc
 378:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 37c:	70617267 	rsbvc	r7, r1, r7, ror #4
 380:	5f636968 	svcpl	0x00636968
 384:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 388:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 38c:	7465735f 	strbtvc	r7, [r5], #-863	; 0xfffffca1
 390:	2f3a4300 	svccs	0x003a4300
 394:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
 398:	6f6a2f73 	svcvs	0x006a2f73
 39c:	2f6e6168 	svccs	0x006e6168
 3a0:	676f6f67 	strbvs	r6, [pc, -r7, ror #30]!
 3a4:	645f656c 	ldrbvs	r6, [pc], #-1388	; 3ac <startup-0x1ffffc54>
 3a8:	65766972 	ldrbvs	r6, [r6, #-2418]!	; 0xfffff68e
 3ac:	6f72502f 	svcvs	0x0072502f
 3b0:	6d617267 	sfmvs	f7, 2, [r1, #-412]!	; 0xfffffe64
 3b4:	6972656d 	ldmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sl, sp, lr}^
 3b8:	472f676e 	strmi	r6, [pc, -lr, ror #14]!
 3bc:	4f2f7469 	svcmi	0x002f7469
 3c0:	672f6d72 			; <UNDEFINED> instruction: 0x672f6d72
 3c4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 3c8:	2e736369 	cdpcs	3, 7, cr6, cr3, cr9, {3}
 3cc:	72670063 	rsbvc	r0, r7, #99	; 0x63
 3d0:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 3d4:	61775f63 	cmnvs	r7, r3, ror #30
 3d8:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 3dc:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 3e0:	73616d00 	cmnvc	r1, #0, 26
 3e4:	6573006b 	ldrbvs	r0, [r3, #-107]!	; 0xffffff95
 3e8:	7463656c 	strbtvc	r6, [r3], #-1388	; 0xfffffa94
 3ec:	6e6f635f 	mcrvs	3, 3, r6, cr15, cr15, {2}
 3f0:	6c6f7274 	sfmvs	f7, 2, [pc], #-464	; 228 <startup-0x1ffffdd8>
 3f4:	0072656c 	rsbseq	r6, r2, ip, ror #10
 3f8:	70617267 	rsbvc	r7, r1, r7, ror #4
 3fc:	5f636968 	svcpl	0x00636968
 400:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 404:	696c6169 	stmdbvs	ip!, {r0, r3, r5, r6, r8, sp, lr}^
 408:	6200657a 	andvs	r6, r0, #511705088	; 0x1e800000
 40c:	006c6c61 	rsbeq	r6, ip, r1, ror #24
 410:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffff9d5 <ball+0xdffff01d>
 414:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 418:	686f6a2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 41c:	672f6e61 	strvs	r6, [pc, -r1, ror #28]!
 420:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
 424:	72645f65 	rsbvc	r5, r4, #404	; 0x194
 428:	2f657669 	svccs	0x00657669
 42c:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 430:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 434:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 438:	69472f67 	stmdbvs	r7, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 43c:	724f2f74 	subvc	r2, pc, #116, 30	; 0x1d0
 440:	74732f6d 	ldrbtvc	r2, [r3], #-3949	; 0xfffff093
 444:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
 448:	00632e70 	rsbeq	r2, r3, r0, ror lr
 44c:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 450:	7070615f 	rsbsvc	r6, r0, pc, asr r1
 454:	69616d00 	stmdbvs	r1!, {r8, sl, fp, sp, lr}^
 458:	6162006e 	cmnvs	r2, lr, rrx
 45c:	675f6c6c 	ldrbvs	r6, [pc, -ip, ror #24]
 460:	656d6f65 	strbvs	r6, [sp, #-3941]!	; 0xfffff09b
 464:	00797274 	rsbseq	r7, r9, r4, ror r2
 468:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
 46c:	00707574 	rsbseq	r7, r0, r4, ror r5
 470:	616c6564 	cmnvs	ip, r4, ror #10
 474:	35325f79 	ldrcc	r5, [r2, #-3961]!	; 0xfffff087
 478:	00736e30 	rsbseq	r6, r3, r0, lsr lr
 47c:	552f3a43 	strpl	r3, [pc, #-2627]!	; fffffa41 <ball+0xdffff089>
 480:	73726573 	cmnvc	r2, #482344960	; 0x1cc00000
 484:	686f6a2f 	stmdavs	pc!, {r0, r1, r2, r3, r5, r9, fp, sp, lr}^	; <UNPREDICTABLE>
 488:	672f6e61 	strvs	r6, [pc, -r1, ror #28]!
 48c:	6c676f6f 	stclvs	15, cr6, [r7], #-444	; 0xfffffe44
 490:	72645f65 	rsbvc	r5, r4, #404	; 0x194
 494:	2f657669 	svccs	0x00657669
 498:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 49c:	6d6d6172 	stfvse	f6, [sp, #-456]!	; 0xfffffe38
 4a0:	6e697265 	cdpvs	2, 6, cr7, cr9, cr5, {3}
 4a4:	69472f67 	stmdbvs	r7, {r0, r1, r2, r5, r6, r8, r9, sl, fp, sp}^
 4a8:	724f2f74 	subvc	r2, pc, #116, 30	; 0x1d0
 4ac:	65642f6d 	strbvs	r2, [r4, #-3949]!	; 0xfffff093
 4b0:	7379616c 	cmnvc	r9, #108, 2
 4b4:	Address 0x000004b4 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	206d7241 	rsbcs	r7, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d37 	eorscc	r2, r2, r7, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	616d2d34 	cmnvs	sp, r4, lsr sp
  38:	29726f6a 	ldmdbcs	r2!, {r1, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
  3c:	322e3720 	eorcc	r3, lr, #32, 14	; 0x800000
  40:	3220312e 	eorcc	r3, r0, #-2147483637	; 0x8000000b
  44:	30373130 	eorscc	r3, r7, r0, lsr r1
  48:	20343039 	eorscs	r3, r4, r9, lsr r0
  4c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60
  50:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0xfffffe9b
  54:	415b2029 	cmpmi	fp, r9, lsr #32
  58:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff30e <ball+0xdfffe956>
  5c:	6465626d 	strbtvs	r6, [r5], #-621	; 0xfffffd93
  60:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  64:	72622d37 	rsbvc	r2, r2, #3520	; 0xdc0
  68:	68636e61 	stmdavs	r3!, {r0, r5, r6, r9, sl, fp, sp, lr}^
  6c:	76657220 	strbtvc	r7, [r5], -r0, lsr #4
  70:	6f697369 	svcvs	0x00697369
  74:	3532206e 	ldrcc	r2, [r2, #-110]!	; 0xffffff92
  78:	34303235 	ldrtcc	r3, [r0], #-565	; 0xfffffdcb
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	20000010 	andcs	r0, r0, r0, lsl r0
  1c:	00000020 	andeq	r0, r0, r0, lsr #32
  20:	40080e41 	andmi	r0, r8, r1, asr #28
  24:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  28:	180e4101 	stmdane	lr, {r0, r8, lr}
  2c:	00070d41 	andeq	r0, r7, r1, asr #26
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	20000030 	andcs	r0, r0, r0, lsr r0
  3c:	00000052 	andeq	r0, r0, r2, asr r0
  40:	40080e41 	andmi	r0, r8, r1, asr #28
  44:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  48:	180e4101 	stmdane	lr, {r0, r8, lr}
  4c:	00070d41 	andeq	r0, r7, r1, asr #26
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	20000082 	andcs	r0, r0, r2, lsl #1
  5c:	00000052 	andeq	r0, r0, r2, asr r0
  60:	40080e41 	andmi	r0, r8, r1, asr #28
  64:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  68:	180e4101 	stmdane	lr, {r0, r8, lr}
  6c:	00070d41 	andeq	r0, r7, r1, asr #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	200000d4 	ldrdcs	r0, [r0], -r4
  7c:	00000104 	andeq	r0, r0, r4, lsl #2
  80:	40080e41 	andmi	r0, r8, r1, asr #28
  84:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  88:	180e4101 	stmdane	lr, {r0, r8, lr}
  8c:	00070d41 	andeq	r0, r7, r1, asr #26
  90:	0000000c 	andeq	r0, r0, ip
  94:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
  98:	7c020001 	stcvc	0, cr0, [r2], {1}
  9c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	00000090 	muleq	r0, r0, r0
  a8:	200001d8 	ldrdcs	r0, [r0], -r8
  ac:	00000054 	andeq	r0, r0, r4, asr r0
  b0:	40080e41 	andmi	r0, r8, r1, asr #28
  b4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b8:	100e4101 	andne	r4, lr, r1, lsl #2
  bc:	00070d41 	andeq	r0, r7, r1, asr #26
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	00000090 	muleq	r0, r0, r0
  c8:	2000022c 	andcs	r0, r0, ip, lsr #4
  cc:	00000054 	andeq	r0, r0, r4, asr r0
  d0:	40080e41 	andmi	r0, r8, r1, asr #28
  d4:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d8:	100e4101 	andne	r4, lr, r1, lsl #2
  dc:	00070d41 	andeq	r0, r7, r1, asr #26
  e0:	00000020 	andeq	r0, r0, r0, lsr #32
  e4:	00000090 	muleq	r0, r0, r0
  e8:	20000280 	andcs	r0, r0, r0, lsl #5
  ec:	00000068 	andeq	r0, r0, r8, rrx
  f0:	400c0e41 	andmi	r0, ip, r1, asr #28
  f4:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
  f8:	018e4002 	orreq	r4, lr, r2
  fc:	41280e41 			; <UNDEFINED> instruction: 0x41280e41
 100:	0000070d 	andeq	r0, r0, sp, lsl #14
 104:	0000000c 	andeq	r0, r0, ip
 108:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 10c:	7c020001 	stcvc	0, cr0, [r2], {1}
 110:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 114:	0000001c 	andeq	r0, r0, ip, lsl r0
 118:	00000104 	andeq	r0, r0, r4, lsl #2
 11c:	200002e8 	andcs	r0, r0, r8, ror #5
 120:	00000050 	andeq	r0, r0, r0, asr r0
 124:	40080e41 	andmi	r0, r8, r1, asr #28
 128:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 12c:	180e4101 	stmdane	lr, {r0, r8, lr}
 130:	00070d41 	andeq	r0, r7, r1, asr #26
 134:	0000001c 	andeq	r0, r0, ip, lsl r0
 138:	00000104 	andeq	r0, r0, r4, lsl #2
 13c:	20000338 	andcs	r0, r0, r8, lsr r3
 140:	00000050 	andeq	r0, r0, r0, asr r0
 144:	40080e41 	andmi	r0, r8, r1, asr #28
 148:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 14c:	180e4101 	stmdane	lr, {r0, r8, lr}
 150:	00070d41 	andeq	r0, r7, r1, asr #26
 154:	0000001c 	andeq	r0, r0, ip, lsl r0
 158:	00000104 	andeq	r0, r0, r4, lsl #2
 15c:	20000388 	andcs	r0, r0, r8, lsl #7
 160:	0000005a 	andeq	r0, r0, sl, asr r0
 164:	40080e41 	andmi	r0, r8, r1, asr #28
 168:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 16c:	100e4101 	andne	r4, lr, r1, lsl #2
 170:	00070d41 	andeq	r0, r7, r1, asr #26
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000104 	andeq	r0, r0, r4, lsl #2
 17c:	200003e2 	andcs	r0, r0, r2, ror #7
 180:	0000006a 	andeq	r0, r0, sl, rrx
 184:	40080e41 	andmi	r0, r8, r1, asr #28
 188:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 18c:	100e4101 	andne	r4, lr, r1, lsl #2
 190:	00070d41 	andeq	r0, r7, r1, asr #26
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000104 	andeq	r0, r0, r4, lsl #2
 19c:	2000044c 	andcs	r0, r0, ip, asr #8
 1a0:	00000090 	muleq	r0, r0, r0
 1a4:	40080e41 	andmi	r0, r8, r1, asr #28
 1a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ac:	180e4101 	stmdane	lr, {r0, r8, lr}
 1b0:	00070d41 	andeq	r0, r7, r1, asr #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000104 	andeq	r0, r0, r4, lsl #2
 1bc:	200004dc 	ldrdcs	r0, [r0], -ip
 1c0:	0000002a 	andeq	r0, r0, sl, lsr #32
 1c4:	40080e41 	andmi	r0, r8, r1, asr #28
 1c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1cc:	100e4101 	andne	r4, lr, r1, lsl #2
 1d0:	00070d41 	andeq	r0, r7, r1, asr #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000104 	andeq	r0, r0, r4, lsl #2
 1dc:	20000506 	andcs	r0, r0, r6, lsl #10
 1e0:	0000007e 	andeq	r0, r0, lr, ror r0
 1e4:	40080e41 	andmi	r0, r8, r1, asr #28
 1e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1ec:	100e4101 	andne	r4, lr, r1, lsl #2
 1f0:	00070d41 	andeq	r0, r7, r1, asr #26
 1f4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1f8:	00000104 	andeq	r0, r0, r4, lsl #2
 1fc:	20000584 	andcs	r0, r0, r4, lsl #11
 200:	00000040 	andeq	r0, r0, r0, asr #32
 204:	40080e41 	andmi	r0, r8, r1, asr #28
 208:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 20c:	100e4101 	andne	r4, lr, r1, lsl #2
 210:	00070d41 	andeq	r0, r7, r1, asr #26
 214:	0000001c 	andeq	r0, r0, ip, lsl r0
 218:	00000104 	andeq	r0, r0, r4, lsl #2
 21c:	200005c4 	andcs	r0, r0, r4, asr #11
 220:	00000046 	andeq	r0, r0, r6, asr #32
 224:	40080e41 	andmi	r0, r8, r1, asr #28
 228:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 22c:	100e4101 	andne	r4, lr, r1, lsl #2
 230:	00070d41 	andeq	r0, r7, r1, asr #26
 234:	0000001c 	andeq	r0, r0, ip, lsl r0
 238:	00000104 	andeq	r0, r0, r4, lsl #2
 23c:	2000060a 	andcs	r0, r0, sl, lsl #12
 240:	00000066 	andeq	r0, r0, r6, rrx
 244:	40080e41 	andmi	r0, r8, r1, asr #28
 248:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 24c:	100e4101 	andne	r4, lr, r1, lsl #2
 250:	00070d41 	andeq	r0, r7, r1, asr #26
 254:	00000018 	andeq	r0, r0, r8, lsl r0
 258:	00000104 	andeq	r0, r0, r4, lsl #2
 25c:	20000670 	andcs	r0, r0, r0, ror r6
 260:	0000005c 	andeq	r0, r0, ip, asr r0
 264:	40080e41 	andmi	r0, r8, r1, asr #28
 268:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 26c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 270:	00000024 	andeq	r0, r0, r4, lsr #32
 274:	00000104 	andeq	r0, r0, r4, lsl #2
 278:	200006cc 	andcs	r0, r0, ip, asr #13
 27c:	00000140 	andeq	r0, r0, r0, asr #2
 280:	40100e41 	andsmi	r0, r0, r1, asr #28
 284:	85400484 	strbhi	r0, [r0, #-1156]	; 0xfffffb7c
 288:	02874003 	addeq	r4, r7, #3
 28c:	41018e40 	tstmi	r1, r0, asr #28
 290:	0d41300e 	stcleq	0, cr3, [r1, #-56]	; 0xffffffc8
 294:	00000007 	andeq	r0, r0, r7
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	0000000c 	andeq	r0, r0, ip
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	20000000 	andcs	r0, r0, r0
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000018 	andeq	r0, r0, r8, lsl r0
 2bc:	00000298 	muleq	r0, r8, r2
 2c0:	2000080c 	andcs	r0, r0, ip, lsl #16
 2c4:	00000048 	andeq	r0, r0, r8, asr #32
 2c8:	40080e41 	andmi	r0, r8, r1, asr #28
 2cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2d0:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 2d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2d8:	00000298 	muleq	r0, r8, r2
 2dc:	20000854 	andcs	r0, r0, r4, asr r8
 2e0:	0000008c 	andeq	r0, r0, ip, lsl #1
 2e4:	40080e41 	andmi	r0, r8, r1, asr #28
 2e8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ec:	100e4101 	andne	r4, lr, r1, lsl #2
 2f0:	00070d41 	andeq	r0, r7, r1, asr #26
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 300:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 304:	00000018 	andeq	r0, r0, r8, lsl r0
 308:	000002f4 	strdeq	r0, [r0], -r4
 30c:	200008e0 	andcs	r0, r0, r0, ror #17
 310:	00000044 	andeq	r0, r0, r4, asr #32
 314:	40080e41 	andmi	r0, r8, r1, asr #28
 318:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 31c:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 320:	00000018 	andeq	r0, r0, r8, lsl r0
 324:	000002f4 	strdeq	r0, [r0], -r4
 328:	20000924 	andcs	r0, r0, r4, lsr #18
 32c:	00000012 	andeq	r0, r0, r2, lsl r0
 330:	40080e41 	andmi	r0, r8, r1, asr #28
 334:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 338:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 33c:	0000001c 	andeq	r0, r0, ip, lsl r0
 340:	000002f4 	strdeq	r0, [r0], -r4
 344:	20000936 	andcs	r0, r0, r6, lsr r9
 348:	0000002c 	andeq	r0, r0, ip, lsr #32
 34c:	40080e41 	andmi	r0, r8, r1, asr #28
 350:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 354:	100e4101 	andne	r4, lr, r1, lsl #2
 358:	00070d41 	andeq	r0, r7, r1, asr #26
 35c:	0000001c 	andeq	r0, r0, ip, lsl r0
 360:	000002f4 	strdeq	r0, [r0], -r4
 364:	20000962 	andcs	r0, r0, r2, ror #18
 368:	00000022 	andeq	r0, r0, r2, lsr #32
 36c:	40080e41 	andmi	r0, r8, r1, asr #28
 370:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 374:	100e4101 	andne	r4, lr, r1, lsl #2
 378:	00070d41 	andeq	r0, r7, r1, asr #26

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	2000080c 	andcs	r0, r0, ip, lsl #16
   4:	200008e0 	andcs	r0, r0, r0, ror #17
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...
